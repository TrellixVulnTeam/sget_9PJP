/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { BlockUIModule } from 'ng-block-ui';
import { BlockUIHttpSettings } from './block-ui-http-settings.service';
import { BlockUIInterceptor } from './block-ui-http.interceptor';
// Needed for AOT compiling
import * as ɵngcc0 from '@angular/core';
export var /** @type {?} */ BlockUIHttpModuleSettings = new InjectionToken('BlockUIHttpModuleSettings');
/**
 * @param {?} settings
 * @return {?}
 */
export function provideSettingsInstance(settings) {
    return { settings: settings };
}
var BlockUIHttpModule = /** @class */ (function () {
    function BlockUIHttpModule() {
    }
    /**
     * @param {?=} settings
     * @return {?}
     */
    BlockUIHttpModule.forRoot = /**
     * @param {?=} settings
     * @return {?}
     */
    function (settings) {
        if (settings === void 0) { settings = {}; }
        return {
            ngModule: BlockUIHttpModule,
            providers: [
                {
                    provide: BlockUIHttpModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIHttpSettings,
                    useFactory: provideSettingsInstance,
                    deps: [BlockUIHttpModuleSettings]
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: BlockUIInterceptor,
                    multi: true
                }
            ]
        };
    };
BlockUIHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BlockUIHttpModule });
BlockUIHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BlockUIHttpModule_Factory(t) { return new (t || BlockUIHttpModule)(); }, imports: [[BlockUIModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIHttpModule, { imports: function () { return [BlockUIModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIHttpModule, [{
        type: NgModule,
        args: [{
                imports: [BlockUIModule]
            }]
    }], function () { return []; }, null); })();
    return BlockUIHttpModule;
}());
export { BlockUIHttpModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nLWJsb2NrLXVpL2h0dHAvYmxvY2stdWktaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFnQixNQUFNLGFBQWEsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRTs7QUFHQSxNQUFNLENBQUMscUJBQU0seUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQVMsMkJBQTJCLENBQUMsQ0FBQztBQUNqRztBQUNHO0FBQXVCO0FBQWU7QUFBekMsTUFBTSxrQ0FBa0MsUUFBc0I7QUFBSSxJQUNoRSxNQUFNLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDO0FBQ3RCLENBQUM7QUFDRDtBQUlVO0FBQ0U7QUFBTTtBQUFRO0FBQTRCO0FBQW1CO0FBQ3BFLElBRFcseUJBQU87QUFBTztBQUE0QjtBQUN6RDtBQUFRLGNBRGUsUUFBMkI7QUFBSSxRQUEvQix5QkFBQSxFQUFBLGFBQTJCO0FBQUksUUFDbkQsTUFBTSxDQUFDO0FBQ1gsWUFBTSxRQUFRLEVBQUUsaUJBQWlCO0FBQ2pDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHlCQUF5QjtBQUM1QyxvQkFBVSxRQUFRLEVBQUUsUUFBUTtBQUM1QixpQkFBUztBQUNULGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLG1CQUFtQjtBQUN0QyxvQkFBVSxVQUFVLEVBQUUsdUJBQXVCO0FBQzdDLG9CQUFVLElBQUksRUFBRSxDQUFDLHlCQUF5QixDQUFDO0FBQzNDLGlCQUFTO0FBQ1QsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsaUJBQWlCO0FBQ3BDLG9CQUFVLFFBQVEsRUFBRSxrQkFBa0I7QUFDdEMsb0JBQVUsS0FBSyxFQUFFLElBQUk7QUFDckIsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ047cURBeEJDLFFBQVEsU0FBQzthQUNSLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxrQkFDekI7Ozs7Ozs7Z0RBQ1E7QUFBQyw0QkFqQlY7QUFBRTtBQUFNLFNBaUJLLGlCQUFpQjs7QUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQXZCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQWhCQSxBQWlCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEJsb2NrVUlNb2R1bGUsIEh0dHBTZXR0aW5ncyB9IGZyb20gJ25nLWJsb2NrLXVpJztcbmltcG9ydCB7IEJsb2NrVUlIdHRwU2V0dGluZ3MgfSBmcm9tICcuL2Jsb2NrLXVpLWh0dHAtc2V0dGluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBCbG9ja1VJSW50ZXJjZXB0b3IgfSBmcm9tICcuL2Jsb2NrLXVpLWh0dHAuaW50ZXJjZXB0b3InO1xuXG5cbi8vIE5lZWRlZCBmb3IgQU9UIGNvbXBpbGluZ1xuZXhwb3J0IGNvbnN0IEJsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3MgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5ncycpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVNldHRpbmdzSW5zdGFuY2Uoc2V0dGluZ3M6IEh0dHBTZXR0aW5ncyk6IEJsb2NrVUlIdHRwU2V0dGluZ3Mge1xuICByZXR1cm4geyBzZXR0aW5ncyB9O1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQmxvY2tVSU1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tVSUh0dHBNb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3Qoc2V0dGluZ3M6IEh0dHBTZXR0aW5ncyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBCbG9ja1VJSHR0cE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5ncyxcbiAgICAgICAgICB1c2VWYWx1ZTogc2V0dGluZ3NcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEJsb2NrVUlIdHRwU2V0dGluZ3MsXG4gICAgICAgICAgdXNlRmFjdG9yeTogcHJvdmlkZVNldHRpbmdzSW5zdGFuY2UsXG4gICAgICAgICAgZGVwczogW0Jsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3NdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgICAgICB1c2VDbGFzczogQmxvY2tVSUludGVyY2VwdG9yLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=