{"ast":null,"code":"import _get from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HttpResponse, HttpClient, HttpErrorResponse, HttpHeaders, HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, InjectionToken, Component, Inject, Input, NgModule, Directive, HostListener, ElementRef, TemplateRef, ViewContainerRef, RendererFactory2, ErrorHandler, NgZone, Pipe, EventEmitter, Output, ChangeDetectorRef, Injector } from '@angular/core';\nimport { tap, filter, startWith, map } from 'rxjs/operators';\nimport { Subject, BehaviorSubject, ReplaySubject, Subscription } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NgControl, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\n/**\n * Class BlockUiService\n * @class\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/common/http';\nimport * as ɵngcc3 from '@angular/forms';\nvar _c0 = [\"hide-while-login\", \"\"];\n\nfunction HideWhileLoginComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.loadingContent);\n  }\n}\n\nvar _c1 = [\"*\"];\n\nvar BlockUiService = /*#__PURE__*/function () {\n  /**\n   * constructor method\n   * @constructor\n   */\n  function BlockUiService() {\n    _classCallCheck(this, BlockUiService);\n\n    /**\n     * subject property\n     * @private\n     * @type {Subject<BlockUiStatus>}\n     */\n    this.subject = new Subject();\n    /**\n     * loaderStatus property\n     * @public\n     * @type {Observable}\n     */\n\n    this.loaderStatus = this.subject.asObservable();\n  }\n  /**\n   * show methods\n   * @returns void\n   */\n\n\n  _createClass(BlockUiService, [{\n    key: \"show\",\n    value: function show() {\n      this.subject.next({\n        status: true\n      });\n    }\n    /**\n     * hide methods\n     * @returns void\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.subject.next({\n        status: false\n      });\n    }\n  }]);\n\n  return BlockUiService;\n}();\n\nBlockUiService.ɵfac = function BlockUiService_Factory(t) {\n  return new (t || BlockUiService)();\n};\n\nBlockUiService.ɵprov = ɵɵdefineInjectable({\n  factory: function BlockUiService_Factory() {\n    return new BlockUiService();\n  },\n  token: BlockUiService,\n  providedIn: \"root\"\n});\n\nBlockUiService.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUiService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Class BlockUiInterceptor\n * @class\n */\n\n\nvar BlockUiInterceptor = /*#__PURE__*/function () {\n  /**\n   * constructor method\n   * @constructor\n   * @param {BlockUiService} service\n   */\n  function BlockUiInterceptor(service) {\n    _classCallCheck(this, BlockUiInterceptor);\n\n    this.service = service;\n  }\n  /**\n   * intercept method\n   * @public\n   * @param {HttpRequest<any>} req\n   * @param {HttpHandler} next\n   * @return Observable<HttpEvent<any>>\n   */\n\n\n  _createClass(BlockUiInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var _this = this;\n\n      if (this.isMutation(req.method)) {\n        this.service.show();\n      }\n\n      return next.handle(req).pipe(tap(function (event) {\n        if (event instanceof HttpResponse) {\n          _this.service.hide();\n        }\n      }, function (err) {\n        _this.service.hide();\n      }));\n    }\n    /**\n     * isMutation method\n     * @private\n     * @param {string} method\n     * @return boolean\n     */\n\n  }, {\n    key: \"isMutation\",\n    value: function isMutation(method) {\n      var mutationsMethods = ['DELETE', 'PATCH', 'POST', 'PUT'];\n      return mutationsMethods.indexOf(method) !== -1;\n    }\n  }]);\n\n  return BlockUiInterceptor;\n}();\n\nBlockUiInterceptor.ɵfac = function BlockUiInterceptor_Factory(t) {\n  return new (t || BlockUiInterceptor)(ɵngcc0.ɵɵinject(BlockUiService));\n};\n\nBlockUiInterceptor.ɵprov = ɵɵdefineInjectable({\n  factory: function BlockUiInterceptor_Factory() {\n    return new BlockUiInterceptor(ɵɵinject(BlockUiService));\n  },\n  token: BlockUiInterceptor,\n  providedIn: \"root\"\n});\n\nBlockUiInterceptor.ctorParameters = function () {\n  return [{\n    type: BlockUiService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUiInterceptor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BlockUiService\n    }];\n  }, null);\n})();\n/**\n * Constante de configuração\n * @const\n */\n\n\nvar VERSIONTAG_CONFIG = new InjectionToken('versiontag.config');\n/**\n * Componente responsável por expor o seletor <app-version-tag></app-version-tag> para reuso\n * @class\n */\n\nvar VersionTagComponent = /*#__PURE__*/function () {\n  function VersionTagComponent(config) {\n    _classCallCheck(this, VersionTagComponent);\n\n    this.config = config;\n  }\n  /**\n   * Metodo executado ao carregar o componente responsável por carregar o arquivo 'package.json'\n   * @return void\n   */\n\n\n  _createClass(VersionTagComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.version = this.config.appVersion;\n    }\n  }]);\n\n  return VersionTagComponent;\n}();\n\nVersionTagComponent.ɵfac = function VersionTagComponent_Factory(t) {\n  return new (t || VersionTagComponent)(ɵngcc0.ɵɵdirectiveInject(VERSIONTAG_CONFIG));\n};\n\nVersionTagComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: VersionTagComponent,\n  selectors: [[\"app-version-tag\"]],\n  inputs: {\n    cssClass: \"cssClass\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[2, \"margin-left\", \"5px\"]],\n  template: function VersionTagComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate1(\" Vers\\xE3o: \", ctx.version, \"\\n\");\n    }\n  },\n  encapsulation: 2\n});\n\nVersionTagComponent.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [VERSIONTAG_CONFIG]\n    }]\n  }];\n};\n\nVersionTagComponent.propDecorators = {\n  cssClass: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VersionTagComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-version-tag',\n      template: \"<span style=\\\"margin-left: 5px;\\\">\\n    Vers\\xE3o: {{version}}\\n</span>\"\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [VERSIONTAG_CONFIG]\n      }]\n    }];\n  }, {\n    cssClass: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * O componente VersionTag exibe o atributo `version` do arquivo `package.json` do sistema,\n * com o intuito de informar o usuário a versão atual da aplicação. Inicialmente foi feito para\n * ser utilizado no rodapé das aplicações conforme o exemplo a seguir.\n * @module\n */\n\n\nvar VersionTagModule = /*#__PURE__*/function () {\n  function VersionTagModule() {\n    _classCallCheck(this, VersionTagModule);\n  }\n\n  _createClass(VersionTagModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * forRoot method\n     * @public\n     * @static\n     * @returns ModuleWithProviders\n     */\n    function forRoot(config) {\n      return {\n        ngModule: VersionTagModule,\n        providers: [{\n          provide: VERSIONTAG_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return VersionTagModule;\n}();\n\nVersionTagModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: VersionTagModule\n});\nVersionTagModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function VersionTagModule_Factory(t) {\n    return new (t || VersionTagModule)();\n  },\n  imports: [[CommonModule, RouterModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(VersionTagModule, {\n    declarations: function declarations() {\n      return [VersionTagComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, RouterModule];\n    },\n    exports: function exports() {\n      return [VersionTagComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VersionTagModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RouterModule],\n      declarations: [VersionTagComponent],\n      exports: [VersionTagComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Classe abstrata para serviço de autenticação\n * @class\n */\n\n\nvar Authentication = function Authentication() {\n  _classCallCheck(this, Authentication);\n};\n\nvar LogoutDirective = /*#__PURE__*/function () {\n  function LogoutDirective(authenticationService) {\n    _classCallCheck(this, LogoutDirective);\n\n    this.authenticationService = authenticationService;\n  }\n\n  _createClass(LogoutDirective, [{\n    key: \"click\",\n    value: function click() {\n      this.authenticationService.logout();\n    }\n  }]);\n\n  return LogoutDirective;\n}();\n\nLogoutDirective.ɵfac = function LogoutDirective_Factory(t) {\n  return new (t || LogoutDirective)(ɵngcc0.ɵɵdirectiveInject(Authentication));\n};\n\nLogoutDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: LogoutDirective,\n  selectors: [[\"\", \"logout\", \"\"]],\n  hostBindings: function LogoutDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function LogoutDirective_click_HostBindingHandler() {\n        return ctx.click();\n      });\n    }\n  }\n});\n\nLogoutDirective.ctorParameters = function () {\n  return [{\n    type: Authentication\n  }];\n};\n\nLogoutDirective.propDecorators = {\n  click: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LogoutDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[logout]'\n    }]\n  }], function () {\n    return [{\n      type: Authentication\n    }];\n  }, {\n    click: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nvar UserDirective = /*#__PURE__*/function () {\n  function UserDirective(el, authenticationService) {\n    _classCallCheck(this, UserDirective);\n\n    this.el = el;\n    this.authenticationService = authenticationService;\n  }\n\n  _createClass(UserDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.authenticationService.isAuthenticated()) {\n        var user = this.authenticationService.getUser();\n        this.el.nativeElement.innerHTML += this.user ? user[this.user] : user.name;\n      }\n    }\n  }]);\n\n  return UserDirective;\n}();\n\nUserDirective.ɵfac = function UserDirective_Factory(t) {\n  return new (t || UserDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Authentication));\n};\n\nUserDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: UserDirective,\n  selectors: [[\"\", \"user\", \"\"]],\n  inputs: {\n    user: \"user\"\n  }\n});\n\nUserDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Authentication\n  }];\n};\n\nUserDirective.propDecorators = {\n  user: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[user]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: Authentication\n    }];\n  }, {\n    user: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Componente de login que será chamado quando a aplicação for logada com sucesso.\n * Deverá ser criada uma rota para esse componente.\n * @class\n */\n\n\nvar LoginSuccessComponent = /*#__PURE__*/function () {\n  function LoginSuccessComponent(authenticationService) {\n    _classCallCheck(this, LoginSuccessComponent);\n\n    this.authenticationService = authenticationService;\n  }\n\n  _createClass(LoginSuccessComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.authenticationService.login();\n    }\n  }]);\n\n  return LoginSuccessComponent;\n}();\n\nLoginSuccessComponent.ɵfac = function LoginSuccessComponent_Factory(t) {\n  return new (t || LoginSuccessComponent)(ɵngcc0.ɵɵdirectiveInject(Authentication));\n};\n\nLoginSuccessComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LoginSuccessComponent,\n  selectors: [[\"app-login-success\"]],\n  decls: 0,\n  vars: 0,\n  template: function LoginSuccessComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\nLoginSuccessComponent.ctorParameters = function () {\n  return [{\n    type: Authentication\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoginSuccessComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-login-success',\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: Authentication\n    }];\n  }, null);\n})();\n/**\n * Classe abstrata para serviço de autorização\n * @class\n */\n\n\nvar Authorization = function Authorization() {\n  _classCallCheck(this, Authorization);\n};\n/**\n * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.\n * @class\n */\n\n\nvar HasRoleDirective = /*#__PURE__*/function () {\n  /**\n   * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança\n   * @param {TemplateRef<any>} templateRef\n   * @param {ViewContainerRef} viewContainer\n   * @param {Authorization} authorization\n   * @param {Authentication<User>} authentication\n   */\n  function HasRoleDirective(templateRef, viewContainer, authorization, authentication) {\n    _classCallCheck(this, HasRoleDirective);\n\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n    this.authorization = authorization;\n    this.authentication = authentication;\n  }\n  /**\n   * Propriedade para identificar regras de acesso aos itens\n   * @type {string}\n   */\n\n\n  _createClass(HasRoleDirective, [{\n    key: \"hasRole\",\n    set: function set(hasRole) {\n      var _this2 = this;\n\n      this.viewContainer.clear();\n\n      if (hasRole) {\n        if (this.loginNotifications) this.loginNotifications.unsubscribe();\n        this.loginNotifications = this.authentication.getLoginNotifications().subscribe(function () {\n          if (_this2.authorization.hasRole(hasRole)) {\n            _this2.viewContainer.clear();\n\n            _this2.viewContainer.createEmbeddedView(_this2.templateRef);\n          }\n        });\n      } else {\n        this.viewContainer.createEmbeddedView(this.templateRef);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.loginNotifications) {\n        this.loginNotifications.unsubscribe();\n      }\n    }\n  }]);\n\n  return HasRoleDirective;\n}();\n\nHasRoleDirective.ɵfac = function HasRoleDirective_Factory(t) {\n  return new (t || HasRoleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(Authorization), ɵngcc0.ɵɵdirectiveInject(Authentication));\n};\n\nHasRoleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: HasRoleDirective,\n  selectors: [[\"\", \"hasRole\", \"\"]],\n  inputs: {\n    hasRole: \"hasRole\"\n  }\n});\n\nHasRoleDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: Authorization\n  }, {\n    type: Authentication\n  }];\n};\n\nHasRoleDirective.propDecorators = {\n  hasRole: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HasRoleDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[hasRole]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: Authorization\n    }, {\n      type: Authentication\n    }];\n  }, {\n    hasRole: [{\n      type: Input\n    }]\n  });\n})();\n/**\n *\n * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.\n *\n * @class\n */\n\n\nvar HideWhileLoginComponent = /*#__PURE__*/function () {\n  /**\n   * constructor method\n   * @param {ElementRef} hostComponent\n   * @param {AbstractAuthentication} auth\n   * @param {BlockUiService} blockUiService\n   * @constructor\n   */\n  function HideWhileLoginComponent(hostComponent, auth, blockUiService) {\n    _classCallCheck(this, HideWhileLoginComponent);\n\n    this.hostComponent = hostComponent;\n    this.auth = auth;\n    this.blockUiService = blockUiService;\n    /**\n     * Carrega conteúdo\n     * @type {loadingString}\n     */\n\n    this.loadingContent = \"\";\n    this.waitingLogin = false;\n  }\n\n  _createClass(HideWhileLoginComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.waitingLogin = !this.auth.isAuthenticated();\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (!this.auth.isAuthenticated()) {\n        this.blockUiService.show();\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this3 = this;\n\n      if (!this.auth.isAuthenticated()) {\n        for (var i = 1; i < this.hostComponent.nativeElement.children.length; i++) {\n          this.hostComponent.nativeElement.children[i].style.display = 'none';\n        }\n      }\n\n      this.loginNotifications = this.auth.getLoginNotifications().subscribe(function () {\n        for (var _i = 1; _i < _this3.hostComponent.nativeElement.children.length; _i++) {\n          _this3.hostComponent.nativeElement.children[_i].style.display = 'inherit';\n        }\n\n        _this3.waitingLogin = false;\n\n        _this3.blockUiService.hide();\n      });\n    }\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.loginNotifications.unsubscribe();\n    }\n  }]);\n\n  return HideWhileLoginComponent;\n}();\n\nHideWhileLoginComponent.ɵfac = function HideWhileLoginComponent_Factory(t) {\n  return new (t || HideWhileLoginComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Authentication), ɵngcc0.ɵɵdirectiveInject(BlockUiService));\n};\n\nHideWhileLoginComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: HideWhileLoginComponent,\n  selectors: [[\"\", \"hide-while-login\", \"\"]],\n  inputs: {\n    loadingContent: \"loadingContent\"\n  },\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 1,\n  consts: [[4, \"ngIf\"]],\n  template: function HideWhileLoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, HideWhileLoginComponent_span_0_Template, 2, 1, \"span\", 0);\n      ɵngcc0.ɵɵprojection(1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.waitingLogin);\n    }\n  },\n  directives: [ɵngcc1.NgIf],\n  encapsulation: 2\n});\n\nHideWhileLoginComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Authentication\n  }, {\n    type: BlockUiService\n  }];\n};\n\nHideWhileLoginComponent.propDecorators = {\n  loadingContent: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HideWhileLoginComponent, [{\n    type: Component,\n    args: [{\n      selector: '[hide-while-login]',\n      template: \"<span *ngIf=\\\"waitingLogin\\\">{{ loadingContent }}</span>\\n<ng-content></ng-content>\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: Authentication\n    }, {\n      type: BlockUiService\n    }];\n  }, {\n    loadingContent: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Constante de configuração\n * @const\n */\n\n\nvar AUTH_CONFIG = new InjectionToken('auth.config');\n/**\n * Serviço de autorização\n * @class\n */\n\nvar AuthorizationService = /*#__PURE__*/function (_Authorization) {\n  _inherits(AuthorizationService, _Authorization);\n\n  var _super = _createSuper(AuthorizationService);\n\n  /**\n   * Método construtor para a injeção do serviço de configuração AuthConfig\n   * @constructor\n   * @param {AuthConfig} config\n   */\n  function AuthorizationService(authenticationService) {\n    var _this4;\n\n    _classCallCheck(this, AuthorizationService);\n\n    _this4 = _super.call(this);\n    _this4.authenticationService = authenticationService;\n    return _this4;\n  }\n  /**\n   * Método responsável por identificar as regras de acesso\n   * @public\n   * @param {any} role\n   * @returns boolean\n   */\n\n\n  _createClass(AuthorizationService, [{\n    key: \"hasRole\",\n    value: function hasRole(role) {\n      if (role) {\n        var user = this.authenticationService.getUser();\n\n        if (role instanceof Array) {\n          return user.roles.some(function (userRole) {\n            return role.some(function (checkRole) {\n              return userRole === checkRole;\n            });\n          });\n        }\n\n        return user.roles.some(function (userRole) {\n          return userRole === role;\n        });\n      }\n\n      return true;\n    }\n  }]);\n\n  return AuthorizationService;\n}(Authorization);\n\nAuthorizationService.ɵfac = function AuthorizationService_Factory(t) {\n  return new (t || AuthorizationService)(ɵngcc0.ɵɵinject(Authentication));\n};\n\nAuthorizationService.ɵprov = ɵɵdefineInjectable({\n  factory: function AuthorizationService_Factory() {\n    return new AuthorizationService(ɵɵinject(Authentication));\n  },\n  token: AuthorizationService,\n  providedIn: \"root\"\n});\n\nAuthorizationService.ctorParameters = function () {\n  return [{\n    type: Authentication\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthorizationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Authentication\n    }];\n  }, null);\n})();\n\nfunction _isAuthenticated(config) {\n  return null !== config.storage.getItem(config.userStorageIndex);\n}\n\n;\n\nfunction _redirect(config) {\n  window.location.href = config.loginUrl;\n  ;\n}\n\n;\n/**\n * Serviço de autenticação\n * @class\n */\n\nvar AuthenticationService = /*#__PURE__*/function (_Authentication) {\n  _inherits(AuthenticationService, _Authentication);\n\n  var _super2 = _createSuper(AuthenticationService);\n\n  function AuthenticationService(config, http) {\n    var _this5;\n\n    _classCallCheck(this, AuthenticationService);\n\n    _this5 = _super2.call(this);\n    _this5.config = config;\n    _this5.http = http;\n    _this5.loginNotifications = new BehaviorSubject(_this5.getUser());\n    return _this5;\n  }\n  /**\n   * Método para verificar se o usuário esta autenticado na aplicação\n   * @returns boolean\n   * @public\n   */\n\n\n  _createClass(AuthenticationService, [{\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      return _isAuthenticated(this.config);\n    }\n    /**\n     * Método responsável por realizar redirecionamentos\n     * @returns void\n     * @public\n     */\n\n  }, {\n    key: \"redirect\",\n    value: function redirect() {\n      _redirect(this.config);\n    }\n    /**\n     * Método responsável pelo login da aplicação\n     * @public\n     * @param {User} user\n     * @returns Observable<any>\n     */\n\n  }, {\n    key: \"login\",\n    value: function login() {\n      var _this6 = this;\n\n      this.getUserDetails().subscribe(function (user) {\n        _this6.setUser(user);\n\n        _this6.loginNotifications.next(user);\n      });\n    }\n    /**\n     * Método responsável pelo logou da aplicação\n     * @public\n     * @returns void\n     */\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      this.loginNotifications.next(null);\n      this.config.storage.removeItem(this.config.userStorageIndex);\n      window.location.href = this.config.logoutUrl;\n    }\n    /**\n     * Método responsável por obter os dados do usuário logado\n     * @public\n     * @returns Observable<any>\n     */\n\n  }, {\n    key: \"getUserDetails\",\n    value: function getUserDetails() {\n      return this.http.get(this.config.baseUrl + this.config.detailsUrl);\n    }\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));\n    }\n  }, {\n    key: \"getLoginNotifications\",\n    value: function getLoginNotifications() {\n      return this.loginNotifications.pipe(filter(function (value) {\n        return value != null;\n      }));\n    }\n  }]);\n\n  return AuthenticationService;\n}(Authentication);\n\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(ɵngcc0.ɵɵinject(AUTH_CONFIG), ɵngcc0.ɵɵinject(ɵngcc2.HttpClient));\n};\n\nAuthenticationService.ɵprov = ɵɵdefineInjectable({\n  factory: function AuthenticationService_Factory() {\n    return new AuthenticationService(ɵɵinject(AUTH_CONFIG), ɵɵinject(HttpClient));\n  },\n  token: AuthenticationService,\n  providedIn: \"root\"\n});\n\nAuthenticationService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [AUTH_CONFIG]\n    }]\n  }, {\n    type: HttpClient\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthenticationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [AUTH_CONFIG]\n      }]\n    }, {\n      type: ɵngcc2.HttpClient\n    }];\n  }, null);\n})();\n/**\n * Provedor de error para criação de erros de notificação.\n * @class\n */\n\n\nvar NotAuthenticatedErrorProvider = /*#__PURE__*/function () {\n  function NotAuthenticatedErrorProvider(authenticationService) {\n    _classCallCheck(this, NotAuthenticatedErrorProvider);\n\n    this.authenticationService = authenticationService;\n  }\n  /**\n   * Método para identificar se o usuário está logado\n   * @public\n   * @param {HttpErrorResponse} error\n   * @returns void\n   */\n\n\n  _createClass(NotAuthenticatedErrorProvider, [{\n    key: \"shouldHandle\",\n    value: function shouldHandle(error) {\n      return error instanceof HttpErrorResponse && error.status == 401;\n    }\n    /**\n     * Método para redirecionar caso o usuário não esteja\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(error) {\n      this.authenticationService.redirect();\n    }\n  }]);\n\n  return NotAuthenticatedErrorProvider;\n}();\n\nNotAuthenticatedErrorProvider.ɵfac = function NotAuthenticatedErrorProvider_Factory(t) {\n  return new (t || NotAuthenticatedErrorProvider)(ɵngcc0.ɵɵinject(Authentication));\n};\n\nNotAuthenticatedErrorProvider.ɵprov = ɵɵdefineInjectable({\n  factory: function NotAuthenticatedErrorProvider_Factory() {\n    return new NotAuthenticatedErrorProvider(ɵɵinject(Authentication));\n  },\n  token: NotAuthenticatedErrorProvider,\n  providedIn: \"root\"\n});\n\nNotAuthenticatedErrorProvider.ctorParameters = function () {\n  return [{\n    type: Authentication\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotAuthenticatedErrorProvider, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Authentication\n    }];\n  }, null);\n})();\n/**\n * Anstract class ErrorProvider\n * @class\n * @abstract\n */\n\n\nvar ErrorProvider = function ErrorProvider() {\n  _classCallCheck(this, ErrorProvider);\n};\n/**\n * Classe abstrata para gerencia de tokens\n * @class\n */\n\n\nvar Token = function Token() {\n  _classCallCheck(this, Token);\n};\n/**\n * Implementação de classe para interceptar e tratar requisições http/https\n * @class\n */\n\n\nvar JWTAuthInterceptor = /*#__PURE__*/function () {\n  /**\n   * Metodo construtor responsável por injetar serviço de autenticação\n   * @constructor\n   * @param {AbstractAuthentication} auth\n   */\n  function JWTAuthInterceptor(token) {\n    _classCallCheck(this, JWTAuthInterceptor);\n\n    this.token = token;\n  }\n  /**\n   * Metodo responsável por interceptar requisições HTTP/HTTPS\n   * @public\n   * @param {HttpRequest<any>} request\n   * @param {HttpHandler} next\n   * @returns Observable<HttpEvent<any>>\n   */\n\n\n  _createClass(JWTAuthInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(request, next) {\n      var _this7 = this;\n\n      if (this.token.hasToken()) {\n        request = this.token.setTokenInHeader(request);\n      }\n\n      return next.handle(request).pipe(tap(function (event) {\n        if (event instanceof HttpResponse) {\n          var token = _this7.token.extractTokenFromHeaders(event.headers);\n\n          if (null !== token) _this7.token.storeToken(token);\n        }\n\n        return event;\n      }));\n    }\n  }]);\n\n  return JWTAuthInterceptor;\n}();\n\nJWTAuthInterceptor.ɵfac = function JWTAuthInterceptor_Factory(t) {\n  return new (t || JWTAuthInterceptor)(ɵngcc0.ɵɵinject(Token));\n};\n\nJWTAuthInterceptor.ɵprov = ɵɵdefineInjectable({\n  factory: function JWTAuthInterceptor_Factory() {\n    return new JWTAuthInterceptor(ɵɵinject(Token));\n  },\n  token: JWTAuthInterceptor,\n  providedIn: \"root\"\n});\n\nJWTAuthInterceptor.ctorParameters = function () {\n  return [{\n    type: Token\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JWTAuthInterceptor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Token\n    }];\n  }, null);\n})();\n/**\n * Inplementação de serviço JWTTokenService\n * @class\n */\n\n\nvar JWTTokenService = /*#__PURE__*/function (_Token) {\n  _inherits(JWTTokenService, _Token);\n\n  var _super3 = _createSuper(JWTTokenService);\n\n  /**\n   * Metodo construtor responsável por injetar as configurações de autenticação\n   * @constructor\n   * @param {AuthConfig} config\n   */\n  function JWTTokenService(config) {\n    var _this8;\n\n    _classCallCheck(this, JWTTokenService);\n\n    _this8 = _super3.call(this);\n    _this8.config = config;\n    return _this8;\n  }\n  /**\n   * Metodo responsável pela extração de tokes do heaedrs das requisições\n   * @public\n   * @param {HttpHeaders} headers\n   * @returns string\n   */\n\n\n  _createClass(JWTTokenService, [{\n    key: \"extractTokenFromHeaders\",\n    value: function extractTokenFromHeaders(headers) {\n      return headers.get(JWTTokenService.HEADER_STRING);\n    }\n    /**\n     * Metodo responsável pela adição dos tokens no storage\n     * @public\n     * @param {String} token\n     * @returns void\n     */\n\n  }, {\n    key: \"storeToken\",\n    value: function storeToken(token) {\n      this.config.storage.setItem(this.config.tokenStorageIndex, token.toString());\n    }\n    /**\n     * Metodo responsável por injetar token no header das requisições\n     * @public\n     * @param {HttpRequest<any>} request\n     * @returns HttpRequest<any>\n     */\n\n  }, {\n    key: \"setTokenInHeader\",\n    value: function setTokenInHeader(request) {\n      var req = request.clone({\n        headers: new HttpHeaders(_defineProperty({}, JWTTokenService.HEADER_STRING, this.config.storage.getItem(this.config.tokenStorageIndex)))\n      });\n      return req;\n    }\n    /**\n     * Metodo responsável por verificar a existencia de um token de autenticação\n     * @returns boolean\n     * @public\n     */\n\n  }, {\n    key: \"hasToken\",\n    value: function hasToken() {\n      return null !== this.config.storage.getItem(this.config.tokenStorageIndex);\n    }\n  }]);\n\n  return JWTTokenService;\n}(Token);\n\nJWTTokenService.ɵfac = function JWTTokenService_Factory(t) {\n  return new (t || JWTTokenService)(ɵngcc0.ɵɵinject(AUTH_CONFIG));\n};\n/**\n * TOKEN_PREFIX  property\n * @type {string}\n */\n\n\nJWTTokenService.TOKEN_PREFIX = \"Bearer\";\n/**\n * HEADER_STRING property\n * @type {string}\n */\n\nJWTTokenService.HEADER_STRING = \"Authorization\";\nJWTTokenService.ɵprov = ɵɵdefineInjectable({\n  factory: function JWTTokenService_Factory() {\n    return new JWTTokenService(ɵɵinject(AUTH_CONFIG));\n  },\n  token: JWTTokenService,\n  providedIn: \"root\"\n});\n\nJWTTokenService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [AUTH_CONFIG]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JWTTokenService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [AUTH_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/**\n * O modulo de segurança contem funcionalidades para autenticação, autorização, redirecionamento\n * para login, gerenciamento de tokens JWT e obtenção e armazenamento de dados de usuário.\n * @class\n */\n\n\nvar SecurityModule = /*#__PURE__*/function () {\n  function SecurityModule() {\n    _classCallCheck(this, SecurityModule);\n  }\n\n  _createClass(SecurityModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * forRoot method\n     * @public\n     * @static\n     * @returns ModuleWithProviders\n     */\n    function forRoot(config) {\n      return {\n        ngModule: SecurityModule,\n        providers: [{\n          provide: AUTH_CONFIG,\n          useValue: config\n        }, config.tokenStorageIndex ? [{\n          provide: Token,\n          useClass: JWTTokenService\n        }, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: JWTAuthInterceptor,\n          multi: true\n        }] : []]\n      };\n    }\n  }]);\n\n  return SecurityModule;\n}();\n\nSecurityModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SecurityModule\n});\nSecurityModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SecurityModule_Factory(t) {\n    return new (t || SecurityModule)();\n  },\n  providers: [AuthorizationService, AuthenticationService, {\n    provide: ErrorProvider,\n    useClass: NotAuthenticatedErrorProvider,\n    multi: true\n  }, {\n    provide: Authorization,\n    useClass: AuthorizationService\n  }, {\n    provide: Authentication,\n    useClass: AuthenticationService\n  }],\n  imports: [[CommonModule, RouterModule, HttpClientModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SecurityModule, {\n    declarations: function declarations() {\n      return [LogoutDirective, UserDirective, LoginSuccessComponent, HasRoleDirective, HideWhileLoginComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, RouterModule, HttpClientModule];\n    },\n    exports: function exports() {\n      return [LogoutDirective, UserDirective, LoginSuccessComponent, HasRoleDirective, HideWhileLoginComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SecurityModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RouterModule, HttpClientModule],\n      declarations: [LogoutDirective, UserDirective, LoginSuccessComponent, HasRoleDirective, HideWhileLoginComponent],\n      providers: [AuthorizationService, AuthenticationService, {\n        provide: ErrorProvider,\n        useClass: NotAuthenticatedErrorProvider,\n        multi: true\n      }, {\n        provide: Authorization,\n        useClass: AuthorizationService\n      }, {\n        provide: Authentication,\n        useClass: AuthenticationService\n      }],\n      exports: [LogoutDirective, UserDirective, LoginSuccessComponent, HasRoleDirective, HideWhileLoginComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Guard que verifica se usuário está autenticado antes do usuário acessar uma rota.\n * Se for verificar que o usuário não está autenticado, é feito um redirecionamento para o login.\n * @class\n */\n\n\nvar AuthGuard = /*#__PURE__*/function () {\n  /**\n   * Método construtor responsável pela injeção do serviço de autenticação\n   * @constructor\n   * @param {Authentication} auth\n   */\n  function AuthGuard(authenticationService) {\n    _classCallCheck(this, AuthGuard);\n\n    this.authenticationService = authenticationService;\n  }\n  /**\n   * Método responsável por identificar se o usuário está autenticado\n   * @public\n   * @param {ActivatedRouteSnapshot} route\n   * @param {RouterStateSnapshot} state\n   * @returns boolean\n   */\n\n\n  _createClass(AuthGuard, [{\n    key: \"canActivate\",\n    value: function canActivate(route, state) {\n      if (this.authenticationService.isAuthenticated()) {\n        return true;\n      }\n\n      this.authenticationService.redirect();\n      return false;\n    }\n    /**\n     * Método responsável por atuar somente em rotas filhas de modo independente\n     * @public\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns boolean\n     */\n\n  }, {\n    key: \"canActivateChild\",\n    value: function canActivateChild(route, state) {\n      return this.canActivate(route, state);\n    }\n  }]);\n\n  return AuthGuard;\n}();\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(ɵngcc0.ɵɵinject(Authentication));\n};\n\nAuthGuard.ɵprov = ɵɵdefineInjectable({\n  factory: function AuthGuard_Factory() {\n    return new AuthGuard(ɵɵinject(Authentication));\n  },\n  token: AuthGuard,\n  providedIn: \"root\"\n});\n\nAuthGuard.ctorParameters = function () {\n  return [{\n    type: Authentication\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Authentication\n    }];\n  }, null);\n})();\n\nfunction bootstrapSecurity(config, authenticated) {\n  var isAuthenticated$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _isAuthenticated;\n  var notAuthenticated = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _redirect;\n\n  if (window.location.href.includes(config.loginSuccessRoute) || isAuthenticated$1(config)) {\n    authenticated();\n  } else {\n    notAuthenticated(config);\n  }\n}\n/**\n * AccessbilityService Serviço de acessibilidade, este serviço prove recursos de contraste\n * de tela e controle do tamanho da fonte apresentadas na tela.\n * @class\n */\n\n\nvar AccessbilityService = /*#__PURE__*/function () {\n  function AccessbilityService(rendererFactory) {\n    _classCallCheck(this, AccessbilityService);\n\n    /**\n     * Propriedade que define tamanho da fonte\n     * @type {number}\n     */\n    this.fontSize = 1.0;\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n  /**\n   * Medoto para habilitar contraste\n   * @public\n   * @returns void\n   */\n\n\n  _createClass(AccessbilityService, [{\n    key: \"enableHighContrast\",\n    value: function enableHighContrast() {\n      this.renderer.addClass(document.body, 'contraste');\n    }\n    /**\n     * Metodo para desabilitar contraste\n     * @public\n     * @returns void\n     */\n\n  }, {\n    key: \"disableHighContrast\",\n    value: function disableHighContrast() {\n      this.renderer.removeClass(document.body, 'contraste');\n    }\n    /**\n     * Metodo utilizado para aumentar o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n\n  }, {\n    key: \"increaseFontSize\",\n    value: function increaseFontSize() {\n      this.fontSize += 0.1;\n      this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n    /**\n     * Metodo utilizado para diminuir o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n\n  }, {\n    key: \"decreaseFontSize\",\n    value: function decreaseFontSize() {\n      this.fontSize -= 0.1;\n      this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n  }, {\n    key: \"addAccessibilityIcons\",\n    value: function addAccessibilityIcons() {\n      var elements = document.querySelector('.p-button-icon-left, p-button-icon-righ');\n\n      if (elements) {\n        this.renderer.setStyle(elements, 'aria-hidden', true);\n      }\n    }\n  }, {\n    key: \"addAccessibilityMessages\",\n    value: function addAccessibilityMessages(msg) {\n      var type = 'polite';\n\n      if (msg.severity.toLowerCase() !== 'custom' && msg.severity.toLowerCase() !== 'success') {\n        type = 'assertive';\n      }\n\n      this.renderer.setStyle(document.querySelector('p-toast, p-growl'), 'aria-live', type);\n    }\n  }]);\n\n  return AccessbilityService;\n}();\n\nAccessbilityService.ɵfac = function AccessbilityService_Factory(t) {\n  return new (t || AccessbilityService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2));\n};\n\nAccessbilityService.ɵprov = ɵɵdefineInjectable({\n  factory: function AccessbilityService_Factory() {\n    return new AccessbilityService(ɵɵinject(RendererFactory2));\n  },\n  token: AccessbilityService,\n  providedIn: \"root\"\n});\n\nAccessbilityService.ctorParameters = function () {\n  return [{\n    type: RendererFactory2\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AccessbilityService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.RendererFactory2\n    }];\n  }, null);\n})();\n/**\n * AccessbilityModule expõe o serviço AccessbilityService para o uso de outras aplicações\n * @module\n */\n\n\nvar AccessbilityModule = function AccessbilityModule() {\n  _classCallCheck(this, AccessbilityModule);\n};\n\nAccessbilityModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AccessbilityModule\n});\nAccessbilityModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AccessbilityModule_Factory(t) {\n    return new (t || AccessbilityModule)();\n  },\n  providers: [AccessbilityService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AccessbilityModule, {\n    imports: function imports() {\n      return [CommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AccessbilityModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [AccessbilityService],\n      exports: []\n    }]\n  }], null, null);\n})();\n/**\n *\n * Class CommonMaskService serviço para inserção de mascara de data em campos input\n * @class\n */\n\n\nvar CommonMaskService = /*#__PURE__*/function () {\n  function CommonMaskService() {\n    _classCallCheck(this, CommonMaskService);\n\n    /**\n     * DATE_SEPARATOR property\n     * @type {string}\n     */\n    this.DATE_SEPARATOR = '/';\n  }\n  /**\n   * Metodo para formatar valor digitado no padrão dd/mm/yyyy\n   * @param $event\n   * @returns void\n   */\n\n\n  _createClass(CommonMaskService, [{\n    key: \"dateMask\",\n    value: function dateMask($event) {\n      if ($event.target.value) {\n        var date = $event.target.value.replace(/[^0-9]/g, '').substr(0, 8);\n\n        if (date.length >= 3) {\n          date = date.replace(/^(\\d{2})(\\d{1,2})/, '$1' + this.DATE_SEPARATOR + '$2');\n        }\n\n        if (date.length >= 6) {\n          date = date.replace(/^(\\S{5})(\\d{1,4})/, '$1' + this.DATE_SEPARATOR + '$2');\n        }\n\n        $event.target.value = date;\n      }\n    }\n  }]);\n\n  return CommonMaskService;\n}();\n\nCommonMaskService.ɵfac = function CommonMaskService_Factory(t) {\n  return new (t || CommonMaskService)();\n};\n\nCommonMaskService.ɵprov = ɵɵdefineInjectable({\n  factory: function CommonMaskService_Factory() {\n    return new CommonMaskService();\n  },\n  token: CommonMaskService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommonMaskService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * CommonMaskModule expõe o servico CommonMaskService para o uso de outras aplicações\n * @class\n */\n\n\nvar CommonMaskModule = function CommonMaskModule() {\n  _classCallCheck(this, CommonMaskModule);\n};\n\nCommonMaskModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CommonMaskModule\n});\nCommonMaskModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CommonMaskModule_Factory(t) {\n    return new (t || CommonMaskModule)();\n  },\n  providers: [CommonMaskService],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommonMaskModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      providers: [CommonMaskService],\n      exports: []\n    }]\n  }], null, null);\n})();\n/**\n * Class ErrorService\n * @class\n */\n\n\nvar ErrorService = /*#__PURE__*/function (_ErrorHandler) {\n  _inherits(ErrorService, _ErrorHandler);\n\n  var _super4 = _createSuper(ErrorService);\n\n  /**\n   * Metodo construtor responável por injetar o serviço ErrorProvider\n   * @param {ErrorProvider} providers\n   */\n  function ErrorService(providers) {\n    var _this9;\n\n    _classCallCheck(this, ErrorService);\n\n    _this9 = _super4.call(this);\n    _this9.providers = providers;\n    return _this9;\n  }\n  /**\n   * Metodo responsável por idetificar e obter os erros lançados de requisições http/https\n   * @param {Error} error\n   * @returns void\n   */\n\n\n  _createClass(ErrorService, [{\n    key: \"handleError\",\n    value: function handleError(error) {\n      try {\n        this.providers.forEach(function (p) {\n          if (p.shouldHandle(error)) {\n            p.handle(error);\n          }\n        });\n      } catch (e) {}\n\n      _get(_getPrototypeOf(ErrorService.prototype), \"handleError\", this).call(this, error);\n    }\n  }]);\n\n  return ErrorService;\n}(ErrorHandler);\n\nErrorService.ɵfac = function ErrorService_Factory(t) {\n  return new (t || ErrorService)(ɵngcc0.ɵɵinject(ErrorProvider));\n};\n\nErrorService.ɵprov = ɵɵdefineInjectable({\n  factory: function ErrorService_Factory() {\n    return new ErrorService(ɵɵinject(ErrorProvider));\n  },\n  token: ErrorService,\n  providedIn: \"root\"\n});\n\nErrorService.ctorParameters = function () {\n  return [{\n    type: Array,\n    decorators: [{\n      type: Inject,\n      args: [ErrorProvider]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Inject,\n        args: [ErrorProvider]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Abstract provider NotificationProvider\n * @abstract\n * @class\n */\n\n\nvar NotificationProvider = function NotificationProvider() {\n  _classCallCheck(this, NotificationProvider);\n};\n/**\n * Classe modelo ApplicationProblemType\n * @class\n */\n\n\nvar ApplicationProblemType =\n/**\n * constructor method\n * @param {string} type\n * @param {string} title\n * @param {string} detail\n * @param {Number} status\n * @param {string} instance\n * @param {Array<string>} stacktrace\n * @param {ApplicationProblemType} cause\n * @constructor\n */\nfunction ApplicationProblemType(type, title, detail, status, instance, stacktrace, cause) {\n  _classCallCheck(this, ApplicationProblemType);\n\n  this.type = type;\n  this.title = title;\n  this.detail = detail;\n  this.status = status;\n  this.instance = instance;\n  this.stacktrace = stacktrace;\n  this.cause = cause;\n};\n/**\n * Serviço HttpApplicationProblemErrorService\n * @class\n */\n\n\nvar HttpApplicationProblemErrorService = /*#__PURE__*/function () {\n  /**\n   * Metodo construtor responsável por injetar serviço NotificationProvider\n   * @param {NotificationProvider} notification\n   * @constructor\n   */\n  function HttpApplicationProblemErrorService(notification, ngZone) {\n    _classCallCheck(this, HttpApplicationProblemErrorService);\n\n    this.notification = notification;\n    this.ngZone = ngZone;\n  }\n  /**\n   * Metodo responsável pela identificação de erros\n   * @public\n   * @param {Error | HttpErrorResponse} error\n   * @returns Boolean\n   */\n\n\n  _createClass(HttpApplicationProblemErrorService, [{\n    key: \"shouldHandle\",\n    value: function shouldHandle(error) {\n      return error instanceof HttpErrorResponse && error.headers.get('Content-Type') === 'application/problem+json' && error.error;\n    }\n    /**\n     * Metodo pela adição de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(error) {\n      var _this10 = this;\n\n      this.ngZone.run(function () {\n        _this10.notification.addErrorProblem(new ApplicationProblemType(error.error.type, error.error.title, error.error.detail, error.error.status, error.error.instance));\n      });\n    }\n  }]);\n\n  return HttpApplicationProblemErrorService;\n}();\n\nHttpApplicationProblemErrorService.ɵfac = function HttpApplicationProblemErrorService_Factory(t) {\n  return new (t || HttpApplicationProblemErrorService)(ɵngcc0.ɵɵinject(NotificationProvider), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nHttpApplicationProblemErrorService.ɵprov = ɵɵdefineInjectable({\n  factory: function HttpApplicationProblemErrorService_Factory() {\n    return new HttpApplicationProblemErrorService(ɵɵinject(NotificationProvider), ɵɵinject(NgZone));\n  },\n  token: HttpApplicationProblemErrorService,\n  providedIn: \"root\"\n});\n\nHttpApplicationProblemErrorService.ctorParameters = function () {\n  return [{\n    type: NotificationProvider\n  }, {\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpApplicationProblemErrorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NotificationProvider\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * Classe modelo HttpGenericErrorType\n * @class\n */\n\n\nvar HttpGenericErrorType =\n/**\n * constructor method\n * @param {Number} code\n * @param {string} title\n * @param {string} detail\n * @constructor\n */\nfunction HttpGenericErrorType(code, title, detail) {\n  _classCallCheck(this, HttpGenericErrorType);\n\n  this.code = code;\n  this.title = title;\n  this.detail = detail;\n};\n/**\n * Serviço HttpGenericErrorService\n * @class\n */\n\n\nvar HttpGenericErrorService = /*#__PURE__*/function () {\n  /**\n   * Metodo construtor responsávelpor injetar o serviço NotificationProvider\n   * @param {NotificationProvider} notification\n   * @constructor\n   */\n  function HttpGenericErrorService(notification, ngZone) {\n    _classCallCheck(this, HttpGenericErrorService);\n\n    this.notification = notification;\n    this.ngZone = ngZone;\n  }\n  /**\n   * Metodo responsável pela identificação de erros\n   * @public\n   * @param {Error | HttpErrorResponse} error\n   * @returns Boolean\n   */\n\n\n  _createClass(HttpGenericErrorService, [{\n    key: \"shouldHandle\",\n    value: function shouldHandle(error) {\n      return error instanceof HttpErrorResponse && !(error.headers.get('Content-Type') === 'application/problem+json' && error.error);\n    }\n    /**\n     * Metodo pela adição de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(error) {\n      var _this11 = this;\n\n      var generic = this.getErrorByCode(error);\n      this.ngZone.run(function () {\n        _this11.notification.addErrorMessage(generic.detail, generic.title);\n      });\n    }\n    /**\n     * Metodo para obter erros a partir de um código\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns HttpGenericErrorType\n     */\n\n  }, {\n    key: \"getErrorByCode\",\n    value: function getErrorByCode(error) {\n      var generic = GENERIC_ERRORS[error.status];\n\n      if (generic === undefined) {\n        return new HttpGenericErrorType(error.status, error.statusText, error.message);\n      }\n\n      return generic;\n    }\n  }]);\n\n  return HttpGenericErrorService;\n}();\n\nHttpGenericErrorService.ɵfac = function HttpGenericErrorService_Factory(t) {\n  return new (t || HttpGenericErrorService)(ɵngcc0.ɵɵinject(NotificationProvider), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nHttpGenericErrorService.ɵprov = ɵɵdefineInjectable({\n  factory: function HttpGenericErrorService_Factory() {\n    return new HttpGenericErrorService(ɵɵinject(NotificationProvider), ɵɵinject(NgZone));\n  },\n  token: HttpGenericErrorService,\n  providedIn: \"root\"\n});\n\nHttpGenericErrorService.ctorParameters = function () {\n  return [{\n    type: NotificationProvider\n  }, {\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpGenericErrorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NotificationProvider\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * Constante que define tipos de erros básicos\n * @const GENERIC_ERRORS\n */\n\n\nvar GENERIC_ERRORS = {\n  401: new HttpGenericErrorType(401, 'Não Autenticado', 'Essa requisição requer um usuário autenticado.'),\n  403: new HttpGenericErrorType(403, 'Proibido', 'Essa requisição requer uma permissão no servidor da aplicação que o usuário não possui.'),\n  404: new HttpGenericErrorType(404, 'Não encontrado', 'Essa requisição não pode ser encontrada.'),\n  500: new HttpGenericErrorType(500, 'Erro desconhecido', 'O servidor encontrou uma condição inesperada.'),\n  502: new HttpGenericErrorType(502, 'Bad Gateway', 'O servidor recebeu uma resposta inválida de um serviço que utilizou para cumprir a requisição'),\n  503: new HttpGenericErrorType(503, 'Serviço Indisponível', 'O servidor não pode atender a requisição nesse momento. Esta é uma condição temporária, tente novamente mais tarde'),\n  504: new HttpGenericErrorType(504, 'Gateway Timeout', 'O servidor não conseguiu receber uma resposta a tempo esperado por um serviço que utilizou para cumprir a requisição')\n};\n/**\n * O modulo ErrorModule contem funcionalidades para a captura e apresentação dos erros que possam ocorrer na aplicação.\n * @module\n */\n\nvar ErrorModule = function ErrorModule() {\n  _classCallCheck(this, ErrorModule);\n};\n\nErrorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ErrorModule\n});\nErrorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ErrorModule_Factory(t) {\n    return new (t || ErrorModule)();\n  },\n  providers: [{\n    provide: ErrorProvider,\n    useClass: HttpGenericErrorService,\n    multi: true\n  }, {\n    provide: ErrorProvider,\n    useClass: HttpApplicationProblemErrorService,\n    multi: true\n  }, {\n    provide: ErrorHandler,\n    useClass: ErrorService\n  }],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ErrorModule, {\n    imports: function imports() {\n      return [CommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [CommonModule],\n      providers: [{\n        provide: ErrorProvider,\n        useClass: HttpGenericErrorService,\n        multi: true\n      }, {\n        provide: ErrorProvider,\n        useClass: HttpApplicationProblemErrorService,\n        multi: true\n      }, {\n        provide: ErrorHandler,\n        useClass: ErrorService\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Class NotificationService\n * @class\n */\n\n\nvar NotificationService = /*#__PURE__*/function (_NotificationProvider) {\n  _inherits(NotificationService, _NotificationProvider);\n\n  var _super5 = _createSuper(NotificationService);\n\n  function NotificationService() {\n    _classCallCheck(this, NotificationService);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(NotificationService, [{\n    key: \"addErrorMessage\",\n    value:\n    /**\n     * Metodo responsável po adicionar mensagem de erro\n     * @param {string} message\n     * @param {string} title\n     * @returns void\n     */\n    function addErrorMessage(message, title) {\n      console.error(title + ' ' + message);\n    }\n    /**\n     * Metodo responsável por adicionar o detalhamento do erro no console\n     * @param {ApplicationProblemType} problem\n     * @returns void\n     */\n\n  }, {\n    key: \"addErrorProblem\",\n    value: function addErrorProblem(problem) {\n      console.error(problem.title + ' ' + problem.detail);\n    }\n  }]);\n\n  return NotificationService;\n}(NotificationProvider);\n\nNotificationService.ɵfac = function NotificationService_Factory(t) {\n  return ɵNotificationService_BaseFactory(t || NotificationService);\n};\n\nNotificationService.ɵprov = ɵɵdefineInjectable({\n  factory: function NotificationService_Factory() {\n    return new NotificationService();\n  },\n  token: NotificationService,\n  providedIn: \"root\"\n});\nvar ɵNotificationService_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NotificationService);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotificationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Serviço de erros ErrorStackService\n * @class\n */\n\n\nvar ErrorStackService = /*#__PURE__*/function () {\n  /**\n   * metodo construtor injeta serviço generico de erros\n   * @param {HttpGenericErrorService} genericErrorService\n   * @constructor\n   */\n  function ErrorStackService(genericErrorService) {\n    var _this12 = this;\n\n    _classCallCheck(this, ErrorStackService);\n\n    this.genericErrorService = genericErrorService;\n    /**\n     * Propriedade errors\n     * @type {ReplaySubject<NamedErrorType>}\n     */\n\n    this.errors = new ReplaySubject();\n\n    if (null === localStorage.getItem('errorStack')) {\n      localStorage.setItem('errorStack', JSON.stringify([]));\n    }\n\n    this.getErrorsSubjects().forEach(function (error) {\n      _this12.errors.next(error);\n    });\n  }\n  /**\n   * Metodo responsável por criar erro do tipo HttpResponse\n   * @param {HttpErrorResponse} error\n   * @returns void\n   */\n\n\n  _createClass(ErrorStackService, [{\n    key: \"create\",\n    value: function create(error) {\n      var namedError = this.createNamedError(error);\n      var persistedErrors = this.getErrorsSubjects();\n\n      if (persistedErrors.length >= 15) {\n        persistedErrors.shift();\n      }\n\n      persistedErrors.push(namedError);\n      localStorage.setItem('errorStack', JSON.stringify(persistedErrors));\n      this.errors.next(namedError);\n    }\n    /**\n     * Metodo responsável por obter o conteúdo dos erros emitidos\n     * @private\n     * @returns NamedErrorType[]\n     */\n\n  }, {\n    key: \"getErrorsSubjects\",\n    value: function getErrorsSubjects() {\n      return JSON.parse(localStorage.getItem('errorStack'));\n    }\n    /**\n     * Metodo responsável por itentifica o tipo de erro lançado\n     * @private\n     * @param {HttpErrorResponse} error\n     * @returns NamedErrorType\n     */\n\n  }, {\n    key: \"createNamedError\",\n    value: function createNamedError(error) {\n      var fullMessage;\n      var namedError;\n      var createdAt = new Date();\n      var errorId = this.getErrorId(error);\n      var title;\n\n      if (error.headers.get('Content-Type') === 'application/problem+json') {\n        fullMessage = \"X-Correlation-ID: \".concat(errorId, \"\\n                           createdAt: \").concat(createdAt, \"\\n                           status: \").concat(error.status, \"\\n                           url: \").concat(error.url, \"\\n                           body: \").concat(error.error.detail, \"\\n                           stacktrace: \").concat(error.error.stacktrace, \"\\n                           cause: \").concat(error.error.cause);\n        title = error.error.title;\n      } else {\n        var genericError = this.genericErrorService.getErrorByCode(error);\n        fullMessage = \"X-Correlation-ID: \".concat(errorId, \"\\n                           createdAt: \").concat(createdAt, \"\\n                           status: \").concat(error.status, \"\\n                           url: \").concat(error.url, \"\\n                           body: \").concat(genericError.detail);\n        title = genericError.title;\n      }\n\n      namedError = {\n        message: title,\n        createdAt: createdAt,\n        correlationId: errorId,\n        fullMessage: fullMessage\n      };\n      return namedError;\n    }\n    /**\n     * Metodo responsável por obter o identificador do erro\n     * @private\n     * @param {HttpErrorResponse} error\n     * @returns string\n     */\n\n  }, {\n    key: \"getErrorId\",\n    value: function getErrorId(error) {\n      var errorKey;\n      error.headers.keys().every(function (key) {\n        if (key.toUpperCase() === 'X-CORRELATION-ID') {\n          errorKey = key;\n          return false;\n        }\n\n        return true;\n      });\n      return errorKey ? error.headers.get(errorKey) : null;\n    }\n  }]);\n\n  return ErrorStackService;\n}();\n\nErrorStackService.ɵfac = function ErrorStackService_Factory(t) {\n  return new (t || ErrorStackService)(ɵngcc0.ɵɵinject(HttpGenericErrorService));\n};\n\nErrorStackService.ɵprov = ɵɵdefineInjectable({\n  factory: function ErrorStackService_Factory() {\n    return new ErrorStackService(ɵɵinject(HttpGenericErrorService));\n  },\n  token: ErrorStackService,\n  providedIn: \"root\"\n});\n\nErrorStackService.ctorParameters = function () {\n  return [{\n    type: HttpGenericErrorService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorStackService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: HttpGenericErrorService\n    }];\n  }, null);\n})();\n/**\n * Class ErrorStackProviderService\n * @class\n */\n\n\nvar ErrorStackProviderService = /*#__PURE__*/function () {\n  /**\n   * Metodo construtor responsável por injetar o serviso de erros\n   * @param {ErrorStackService} errorStackService\n   */\n  function ErrorStackProviderService(errorStackService) {\n    _classCallCheck(this, ErrorStackProviderService);\n\n    this.errorStackService = errorStackService;\n  }\n  /**\n   * Metodo responsável pela identificação de erros\n   * @param {Error} error\n   * @returns Boolean\n   */\n\n\n  _createClass(ErrorStackProviderService, [{\n    key: \"shouldHandle\",\n    value: function shouldHandle(error) {\n      return error instanceof HttpErrorResponse;\n    }\n    /**\n     * Metodo pela adição de erros\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(error) {\n      this.errorStackService.create(error);\n    }\n  }]);\n\n  return ErrorStackProviderService;\n}();\n\nErrorStackProviderService.ɵfac = function ErrorStackProviderService_Factory(t) {\n  return new (t || ErrorStackProviderService)(ɵngcc0.ɵɵinject(ErrorStackService));\n};\n\nErrorStackProviderService.ɵprov = ɵɵdefineInjectable({\n  factory: function ErrorStackProviderService_Factory() {\n    return new ErrorStackProviderService(ɵɵinject(ErrorStackService));\n  },\n  token: ErrorStackProviderService,\n  providedIn: \"root\"\n});\n\nErrorStackProviderService.ctorParameters = function () {\n  return [{\n    type: ErrorStackService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorStackProviderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ErrorStackService\n    }];\n  }, null);\n})();\n/**\n *\n * Cria PIPE de CEP para valores.\n *\n * Usage:\n * {{ value | cep }}\n*/\n\n\nvar CepPipe = /*#__PURE__*/function () {\n  function CepPipe() {\n    _classCallCheck(this, CepPipe);\n  }\n\n  _createClass(CepPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      if (value === null) {\n        return '-';\n      } else {\n        value = value.replace(/[^0-9A-Za-z]/g, '');\n        return value.substring(0, 5) + '-' + value.substring(5, 8);\n      }\n    }\n  }]);\n\n  return CepPipe;\n}();\n\nCepPipe.ɵfac = function CepPipe_Factory(t) {\n  return new (t || CepPipe)();\n};\n\nCepPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"cep\",\n  type: CepPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CepPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cep'\n    }]\n  }], null, null);\n})();\n/**\n *\n * Cria PIPE de CPF para valores.\n *\n * Usage:\n * {{ value | cpf }}\n*/\n\n\nvar CpfPipe = /*#__PURE__*/function () {\n  function CpfPipe() {\n    _classCallCheck(this, CpfPipe);\n  }\n\n  _createClass(CpfPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      if (value === null || value.length !== 11) {\n        return value;\n      } else {\n        value = value.replace(/[^0-9A-Za-z]/g, '');\n        return value.substring(0, 3) + '.' + value.substring(3, 6) + '.' + value.substring(6, 9) + '-' + value.substring(9, 11);\n      }\n    }\n  }]);\n\n  return CpfPipe;\n}();\n\nCpfPipe.ɵfac = function CpfPipe_Factory(t) {\n  return new (t || CpfPipe)();\n};\n\nCpfPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"cpf\",\n  type: CpfPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CpfPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cpf'\n    }]\n  }], null, null);\n})();\n/**\n *\n * Cria PIPE de CNPJ para valores.\n *\n * Usage:\n * {{ value | cnpj }}\n*/\n\n\nvar CnpjPipe = /*#__PURE__*/function () {\n  function CnpjPipe() {\n    _classCallCheck(this, CnpjPipe);\n  }\n\n  _createClass(CnpjPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      if (value === null || value.length !== 14) {\n        return value;\n      } else {\n        value = value.replace(/[^0-9A-Za-z]/g, '');\n        return value.substring(0, 2) + '.' + value.substring(2, 5) + '.' + value.substring(5, 8) + '/' + value.substring(8, 12) + '-' + value.substring(12, 14);\n      }\n    }\n  }]);\n\n  return CnpjPipe;\n}();\n\nCnpjPipe.ɵfac = function CnpjPipe_Factory(t) {\n  return new (t || CnpjPipe)();\n};\n\nCnpjPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"cnpj\",\n  type: CnpjPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CnpjPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'cnpj'\n    }]\n  }], null, null);\n})();\n/**\n *\n * Cria PIPE de valores com regra definida em expressão regex\n * Usage:\n * {{ value | regex:arg1:arg2 }}\n*/\n\n\nvar RegexPipe = /*#__PURE__*/function () {\n  function RegexPipe() {\n    _classCallCheck(this, RegexPipe);\n  }\n\n  _createClass(RegexPipe, [{\n    key: \"transform\",\n    value: function transform(value, regex, regexPrint) {\n      return value.replace(regex, regexPrint);\n    }\n  }]);\n\n  return RegexPipe;\n}();\n\nRegexPipe.ɵfac = function RegexPipe_Factory(t) {\n  return new (t || RegexPipe)();\n};\n\nRegexPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"regex\",\n  type: RegexPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RegexPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'regex'\n    }]\n  }], null, null);\n})();\n/**\n *\n * Cria PIPE para valores com restrição de valores a serem apresentados.\n *\n * Usage:\n * {{ value | limit:20 }}\n * {{ value | limit:20:\"...\" }}\n*/\n\n\nvar LimitPipe = /*#__PURE__*/function () {\n  function LimitPipe() {\n    _classCallCheck(this, LimitPipe);\n  }\n\n  _createClass(LimitPipe, [{\n    key: \"transform\",\n    value: function transform(value) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n      var ellipsis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';\n      return value.length > limit ? \"\".concat(value.substr(0, limit)).concat(ellipsis) : value;\n    }\n  }]);\n\n  return LimitPipe;\n}();\n\nLimitPipe.ɵfac = function LimitPipe_Factory(t) {\n  return new (t || LimitPipe)();\n};\n\nLimitPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"limit\",\n  type: LimitPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LimitPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'limit'\n    }]\n  }], null, null);\n})();\n/**\n *\n *  Export do módulo\n */\n\n\nvar PipeModule = function PipeModule() {\n  _classCallCheck(this, PipeModule);\n};\n\nPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PipeModule\n});\nPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PipeModule_Factory(t) {\n    return new (t || PipeModule)();\n  },\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PipeModule, {\n    declarations: [CepPipe, CpfPipe, CnpjPipe, RegexPipe, LimitPipe],\n    exports: [CepPipe, CpfPipe, CnpjPipe, RegexPipe, LimitPipe]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PipeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [CepPipe, CpfPipe, CnpjPipe, RegexPipe, LimitPipe],\n      exports: [CepPipe, CpfPipe, CnpjPipe, RegexPipe, LimitPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Fornece metodo para copia de textos\n * @class\n */\n\n\nvar ClipboardService = /*#__PURE__*/function () {\n  function ClipboardService() {\n    _classCallCheck(this, ClipboardService);\n  }\n\n  _createClass(ClipboardService, [{\n    key: \"copy\",\n    value:\n    /**\n     * Inspirado no clipboard.js, copia texto selecionado para área de trasferência\n     * @param {string} text\n     * @returns void\n     * @public\n     */\n    function copy(text) {\n      var isRTL = document.documentElement.getAttribute('dir') === 'rtl'; // cria um elemento temporário, seta o foco, copia e remove em seguida\n\n      var fake = document.createElement('textarea');\n      fake.style.fontSize = '12pt';\n      fake.style.border = '0';\n      fake.style.padding = '0';\n      fake.style.margin = '0';\n      fake.style.position = 'absolute';\n      fake.style[isRTL ? 'right' : 'left'] = '-9999px';\n      var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n      fake.style.top = \"\".concat(yPosition, \"px\");\n      fake.setAttribute('readonly', '');\n      fake.value = text;\n      document.body.appendChild(fake);\n      fake.select();\n      document.execCommand('copy');\n      document.body.removeChild(fake);\n    }\n  }]);\n\n  return ClipboardService;\n}();\n\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)();\n};\n\nClipboardService.ɵprov = ɵɵdefineInjectable({\n  factory: function ClipboardService_Factory() {\n    return new ClipboardService();\n  },\n  token: ClipboardService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Diretiva que expõe seletor para o uso do clipbord\n * @class\n */\n\n\nvar ClipboardDirective = /*#__PURE__*/function () {\n  /**\n   * constructor method\n   * @param {ClipboardService} service\n   * @constructor\n   */\n  function ClipboardDirective(service) {\n    _classCallCheck(this, ClipboardDirective);\n\n    this.service = service;\n    /**\n     * onClipboard variable\n     * @type {EventEmitter<boolean>}\n     */\n\n    this.onClipboard = new EventEmitter();\n  }\n  /**\n   * copy method\n   * @event click\n   * @returns void\n   */\n\n\n  _createClass(ClipboardDirective, [{\n    key: \"copy\",\n    value: function copy() {\n      try {\n        this.service.copy(this.clipboard);\n        this.onClipboard.emit(true);\n      } catch (e) {\n        this.onClipboard.emit(false);\n        throw e;\n      }\n    }\n  }]);\n\n  return ClipboardDirective;\n}();\n\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService));\n};\n\nClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"clipboard\", \"\"]],\n  hostBindings: function ClipboardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler() {\n        return ctx.copy();\n      });\n    }\n  },\n  inputs: {\n    clipboard: \"clipboard\"\n  },\n  outputs: {\n    onClipboard: \"onClipboard\"\n  }\n});\n\nClipboardDirective.ctorParameters = function () {\n  return [{\n    type: ClipboardService\n  }];\n};\n\nClipboardDirective.propDecorators = {\n  clipboard: [{\n    type: Input\n  }],\n  onClipboard: [{\n    type: Output\n  }],\n  copy: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[clipboard]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }];\n  }, {\n    onClipboard: [{\n      type: Output\n    }],\n\n    /**\n     * copy method\n     * @event click\n     * @returns void\n     */\n    copy: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    clipboard: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * ClipboardModule expõe o servico ClipboardService para o uso de outras aplicações\n * @module\n */\n\n\nvar ClipboardModule = function ClipboardModule() {\n  _classCallCheck(this, ClipboardModule);\n};\n\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ClipboardModule_Factory(t) {\n    return new (t || ClipboardModule)();\n  },\n  providers: [ClipboardService],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: [ClipboardDirective],\n    exports: [ClipboardDirective]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [ClipboardDirective],\n      providers: [ClipboardService],\n      exports: [ClipboardDirective]\n    }]\n  }], null, null);\n})();\n/**\n *\n * UnmaskDirective diretiva para remoção de mascaras de valores numericos\n * @class\n */\n\n\nvar UnmaskDirective = /*#__PURE__*/function () {\n  /**\n   * constructor method\n   * @param {ElementRef} elementRef\n   * @param {NgControl} model\n   * @constructor\n   */\n  function UnmaskDirective(elementRef, model) {\n    _classCallCheck(this, UnmaskDirective);\n\n    this.elementRef = elementRef;\n    this.model = model;\n  }\n  /**\n   * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular\n   * @returns void\n   */\n\n\n  _createClass(UnmaskDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this13 = this;\n\n      this.subscriber = this.model.control.valueChanges.subscribe(function () {\n        var newValue = _this13.elementRef.nativeElement.value.replace(new RegExp(_this13.appUnmask), '');\n\n        _this13.model.control.setValue(newValue, {\n          emitEvent: false,\n          emitModelToViewChange: false,\n          emitViewToModelChange: false\n        });\n      });\n    }\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscriber.unsubscribe();\n    }\n  }]);\n\n  return UnmaskDirective;\n}();\n\nUnmaskDirective.ɵfac = function UnmaskDirective_Factory(t) {\n  return new (t || UnmaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl));\n};\n\nUnmaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: UnmaskDirective,\n  selectors: [[\"\", \"unmask\", \"\"]],\n  inputs: {\n    appUnmask: \"appUnmask\"\n  }\n});\n\nUnmaskDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgControl\n  }];\n};\n\nUnmaskDirective.propDecorators = {\n  appUnmask: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UnmaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[unmask]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.NgControl\n    }];\n  }, {\n    appUnmask: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * OnlyNumbersDirective diretiva para que sejam permitidos somente números\n * @class\n */\n\n\nvar OnlyNumbersDirective = /*#__PURE__*/function () {\n  /**\n   * @param {ElementRef} el\n   * @constructor\n   */\n  function OnlyNumbersDirective(el) {\n    _classCallCheck(this, OnlyNumbersDirective);\n\n    this.el = el;\n    /**\n     * Propriedade que carrega expressão regular para numeros\n     * @type {RegExp}\n     */\n\n    this.regex = new RegExp(/[^0-9]$/g);\n    /**\n     * Propriedade que lista opções aceitas além de núsmeros\n     * @type {Array<string>}\n     */\n\n    this.specialKeys = ['Backspace', 'Delete', 'Tab', 'End', 'Home', 'ArrowLeft', 'ArrowRight'];\n  }\n  /**\n   * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado\n   * @param {KeyboardEvent} event\n   * @returns void\n   */\n\n\n  _createClass(OnlyNumbersDirective, [{\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      var current = this.el.nativeElement.value;\n      var next = current.concat(event.key);\n\n      if (this.specialKeys.indexOf(event.key) !== -1) {\n        return;\n      }\n\n      if (next && String(next).match(this.regex)) {\n        event.preventDefault();\n      }\n    }\n  }]);\n\n  return OnlyNumbersDirective;\n}();\n\nOnlyNumbersDirective.ɵfac = function OnlyNumbersDirective_Factory(t) {\n  return new (t || OnlyNumbersDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nOnlyNumbersDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: OnlyNumbersDirective,\n  selectors: [[\"input\", \"onlyNumbers\", \"\"]],\n  hostBindings: function OnlyNumbersDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function OnlyNumbersDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  }\n});\n\nOnlyNumbersDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nOnlyNumbersDirective.propDecorators = {\n  onKeyDown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OnlyNumbersDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[onlyNumbers]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    /**\n     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado\n     * @param {KeyboardEvent} event\n     * @returns void\n     */\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n/**\n * DIRECTIVES constant\n * @constant\n */\n\n\nvar DIRECTIVES = [OnlyNumbersDirective, UnmaskDirective];\n/**\n * Expõe directivas para reuso em outras palicações\n * @module\n */\n\nvar DirectivesModule = function DirectivesModule() {\n  _classCallCheck(this, DirectivesModule);\n};\n\nDirectivesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: DirectivesModule\n});\nDirectivesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function DirectivesModule_Factory(t) {\n    return new (t || DirectivesModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DirectivesModule, {\n    declarations: [OnlyNumbersDirective, UnmaskDirective],\n    exports: [OnlyNumbersDirective, UnmaskDirective]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DirectivesModule, [{\n    type: NgModule,\n    args: [{\n      declarations: DIRECTIVES,\n      exports: DIRECTIVES\n    }]\n  }], null, null);\n})();\n\nvar FormNotificationType;\n\n(function (FormNotificationType) {\n  FormNotificationType[FormNotificationType[\"CLEAN\"] = 0] = \"CLEAN\";\n  FormNotificationType[FormNotificationType[\"FIELD\"] = 1] = \"FIELD\";\n})(FormNotificationType || (FormNotificationType = {}));\n/**\n * Class modelo para validação de formulários\n * @class\n */\n\n\nvar FormNotification =\n/**\n * Metodo construtor para validação de formulários\n * @param {string} form\n * @param {FormNotificationType} type\n */\nfunction FormNotification(form, type) {\n  _classCallCheck(this, FormNotification);\n\n  this.form = form;\n  this.type = type;\n};\n/**\n * Class modelo para validação de campos de formulários\n * @class\n */\n\n\nvar FieldFormNotification = /*#__PURE__*/function (_FormNotification) {\n  _inherits(FieldFormNotification, _FormNotification);\n\n  var _super6 = _createSuper(FieldFormNotification);\n\n  /**\n   * Método construtor para validação de campos de formulários\n   * @param {string} form\n   * @param {string} field\n   * @param {string} message\n   */\n  function FieldFormNotification(form, field, message) {\n    var _this14;\n\n    _classCallCheck(this, FieldFormNotification);\n\n    _this14 = _super6.call(this, form, FormNotificationType.FIELD);\n    _this14.field = field;\n    _this14.message = message;\n    return _this14;\n  }\n\n  return FieldFormNotification;\n}(FormNotification);\n/**\n * Serviço ṕara tratar notificações em formulários\n * @class\n */\n\n\nvar FormNotificationService = /*#__PURE__*/function () {\n  function FormNotificationService() {\n    _classCallCheck(this, FormNotificationService);\n\n    /**\n     * @type {Subject<FormNotification>()}\n     */\n    this.formNotifications = new Subject();\n  }\n  /**\n   * Método para criação de inscrição de campos presentes nos formulários\n   * @param {string} field\n   * @returns Observable<ResponseHandle>\n   */\n\n\n  _createClass(FormNotificationService, [{\n    key: \"notifications\",\n    value: function notifications(form, field) {\n      return this.formNotifications.pipe(filter(function (violation) {\n        return (!form || violation.form === form) && (violation.type === FormNotificationType.CLEAN || violation instanceof FieldFormNotification && violation.field === field);\n      }));\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(notification) {\n      this.formNotifications.next(notification);\n    }\n  }]);\n\n  return FormNotificationService;\n}();\n\nFormNotificationService.ɵfac = function FormNotificationService_Factory(t) {\n  return new (t || FormNotificationService)();\n};\n\nFormNotificationService.ɵprov = ɵɵdefineInjectable({\n  factory: function FormNotificationService_Factory() {\n    return new FormNotificationService();\n  },\n  token: FormNotificationService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Provedor de error para criação de erros de notificação.\n * @class\n */\n\n\nvar FormNotificationErrorProvider = /*#__PURE__*/function () {\n  /**\n   * Método construtor\n   * @param {FormtNotificationService} formNotificationService\n   * @constructor\n   */\n  function FormNotificationErrorProvider(formNotificationService) {\n    _classCallCheck(this, FormNotificationErrorProvider);\n\n    this.formNotificationService = formNotificationService;\n  }\n  /**\n   * Método responsável pela identificação de erros\n   * @public\n   * @param {Error | HttpErrorResponse} error\n   * @returns Boolean\n   */\n\n\n  _createClass(FormNotificationErrorProvider, [{\n    key: \"shouldHandle\",\n    value: function shouldHandle(error) {\n      return error instanceof HttpErrorResponse && error.headers.get('Content-Type') === 'application/problem+json' && error.error && (error.error.violations || error.error.fieldErrors);\n    }\n    /**\n     * Método para emissão de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(error) {\n      if (error.error.violations) {\n        this.violation(error.url, error.error.violations);\n      }\n\n      if (error.error.fieldErrors) {\n        this.violation(error.url, error.error.fieldErrors);\n      }\n    }\n    /**\n     * Método iteração de violações e emissão de erros\n     * @param values\n     */\n\n  }, {\n    key: \"violation\",\n    value: function violation(form, values) {\n      var _this15 = this;\n\n      values.forEach(function (violation) {\n        return _this15.formNotificationService.notify(new FieldFormNotification(form, violation.field, violation.message));\n      });\n    }\n  }]);\n\n  return FormNotificationErrorProvider;\n}();\n\nFormNotificationErrorProvider.ɵfac = function FormNotificationErrorProvider_Factory(t) {\n  return new (t || FormNotificationErrorProvider)(ɵngcc0.ɵɵinject(FormNotificationService));\n};\n\nFormNotificationErrorProvider.ɵprov = ɵɵdefineInjectable({\n  factory: function FormNotificationErrorProvider_Factory() {\n    return new FormNotificationErrorProvider(ɵɵinject(FormNotificationService));\n  },\n  token: FormNotificationErrorProvider,\n  providedIn: \"root\"\n});\n\nFormNotificationErrorProvider.ctorParameters = function () {\n  return [{\n    type: FormNotificationService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationErrorProvider, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FormNotificationService\n    }];\n  }, null);\n})();\n/**\n * Class modelo para limpeza de validação de formulários\n * @class\n */\n\n\nvar CleanFormNotification = /*#__PURE__*/function (_FormNotification2) {\n  _inherits(CleanFormNotification, _FormNotification2);\n\n  var _super7 = _createSuper(CleanFormNotification);\n\n  /**\n   * Método construtor para limpeza de validação de formulários\n   * @param {string} form\n   */\n  function CleanFormNotification(form) {\n    _classCallCheck(this, CleanFormNotification);\n\n    return _super7.call(this, form, FormNotificationType.CLEAN);\n  }\n\n  return CleanFormNotification;\n}(FormNotification);\n/**\n * Implementação de classe para interceptar e tratar requisições http/https\n * @class\n */\n\n\nvar FormNotificationInterceptor = /*#__PURE__*/function () {\n  /**\n   * Método construtor\n   * @constructor\n   * @param {AbstractAuthentication} auth\n   */\n  function FormNotificationInterceptor(formNotificationService) {\n    _classCallCheck(this, FormNotificationInterceptor);\n\n    this.formNotificationService = formNotificationService;\n  }\n  /**\n   * Método responsável por interceptar requisições HTTP/HTTPS\n   * @public\n   * @param {HttpRequest<any>} request\n   * @param {HttpHandler} next\n   * @returns Observable<HttpEvent<any>>\n   */\n\n\n  _createClass(FormNotificationInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(request, next) {\n      this.formNotificationService.notify(new CleanFormNotification(request.url));\n      return next.handle(request);\n    }\n  }]);\n\n  return FormNotificationInterceptor;\n}();\n\nFormNotificationInterceptor.ɵfac = function FormNotificationInterceptor_Factory(t) {\n  return new (t || FormNotificationInterceptor)(ɵngcc0.ɵɵinject(FormNotificationService));\n};\n\nFormNotificationInterceptor.ɵprov = ɵɵdefineInjectable({\n  factory: function FormNotificationInterceptor_Factory() {\n    return new FormNotificationInterceptor(ɵɵinject(FormNotificationService));\n  },\n  token: FormNotificationInterceptor,\n  providedIn: \"root\"\n});\n\nFormNotificationInterceptor.ctorParameters = function () {\n  return [{\n    type: FormNotificationService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationInterceptor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FormNotificationService\n    }];\n  }, null);\n})();\n\nvar FormNotificationComponentSuperclass = /*#__PURE__*/function () {\n  /**\n   * Método construtor responsável por carregar o serviço de validação\n   * @param formNotificationService\n   */\n  function FormNotificationComponentSuperclass(formNotificationService) {\n    _classCallCheck(this, FormNotificationComponentSuperclass);\n\n    this.formNotificationService = formNotificationService;\n  }\n  /**\n   * Método Inicial para subscrição no endpoint responsável por validar o formulário\n   */\n\n\n  _createClass(FormNotificationComponentSuperclass, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this16 = this;\n\n      this.subscription = this.formNotificationService.notifications(this.form, this.name).subscribe(function (notification) {\n        if (notification instanceof FieldFormNotification) {\n          _this16.message = notification.message;\n        } else {\n          _this16.message = null;\n        }\n      });\n    }\n    /**\n     * Método responsável por realizar a saida das subscrições do endpont de validação\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n  }]);\n\n  return FormNotificationComponentSuperclass;\n}();\n\nFormNotificationComponentSuperclass.ɵfac = function FormNotificationComponentSuperclass_Factory(t) {\n  return new (t || FormNotificationComponentSuperclass)(ɵngcc0.ɵɵdirectiveInject(FormNotificationService));\n};\n\nFormNotificationComponentSuperclass.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FormNotificationComponentSuperclass,\n  selectors: [[\"form-notification-component-superclass\"]],\n  inputs: {\n    name: \"name\",\n    form: \"form\"\n  }\n});\n\nFormNotificationComponentSuperclass.ctorParameters = function () {\n  return [{\n    type: FormNotificationService\n  }];\n};\n\nFormNotificationComponentSuperclass.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  form: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationComponentSuperclass, [{\n    type: Directive,\n    args: [{\n      selector: 'form-notification-component-superclass'\n    }]\n  }], function () {\n    return [{\n      type: FormNotificationService\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    form: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Módulo para adicionar funcionalidade de notificação de erros de formulários.\n * @module\n */\n\n\nvar FormNotificationBaseModule = function FormNotificationBaseModule() {\n  _classCallCheck(this, FormNotificationBaseModule);\n};\n\nFormNotificationBaseModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: FormNotificationBaseModule\n});\nFormNotificationBaseModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function FormNotificationBaseModule_Factory(t) {\n    return new (t || FormNotificationBaseModule)();\n  },\n  providers: [FormNotificationService, {\n    provide: ErrorProvider,\n    useClass: FormNotificationErrorProvider,\n    multi: true\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: FormNotificationInterceptor,\n    multi: true\n  }],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormNotificationBaseModule, {\n    declarations: function declarations() {\n      return [FormNotificationComponentSuperclass];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [FormNotificationComponentSuperclass];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationBaseModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [FormNotificationComponentSuperclass],\n      exports: [FormNotificationComponentSuperclass],\n      providers: [FormNotificationService, {\n        provide: ErrorProvider,\n        useClass: FormNotificationErrorProvider,\n        multi: true\n      }, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: FormNotificationInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Class provider para definição básica de tratamento de erros de formulários\n * @class\n */\n\n\nvar FormNotificationProvider = /*#__PURE__*/function (_ApplicationProblemTy) {\n  _inherits(FormNotificationProvider, _ApplicationProblemTy);\n\n  var _super8 = _createSuper(FormNotificationProvider);\n\n  /**\n   * Metodo construtor para validação de formulários\n   * @param {string} type\n   * @param {string} title\n   * @param {string} detail\n   * @param {Number} status\n   * @param {string} instance\n   * @param {Array<string>} stacktrace\n   * @param {ApplicationProblemType} cause\n   * @param {FormViolation} violations\n   */\n  function FormNotificationProvider(type, title, detail, status, instance, stacktrace, cause, violations) {\n    var _this17;\n\n    _classCallCheck(this, FormNotificationProvider);\n\n    _this17 = _super8.call(this, type, title, detail, status, instance, stacktrace, cause);\n    _this17.violations = violations;\n    return _this17;\n  }\n\n  return FormNotificationProvider;\n}(ApplicationProblemType);\n/**\n * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.\n *\n * ```ts\n * @Injectable()\n * // or @Component() (also consider DirectiveSuperclass)\n * // or @Directive() (also consider DirectiveSuperclass)\n * // or @Pipe()\n * class MyThing extends InjectableSuperclass {\n *   constructor(somethingObservable: Observable) {\n *     super();\n *     this.subscribeTo(somethingObservable);\n *   }\n *\n *   ngOnDestroy() {\n *     // if you override ngOnDestroy, be sure to call this too\n *     super.ngOnDestroy();\n *   }\n * }\n * ```\n */\n\n\nvar InjectableSuperclass = /*#__PURE__*/function () {\n  function InjectableSuperclass() {\n    _classCallCheck(this, InjectableSuperclass);\n\n    this.subscriptions = new Subscription();\n    this.destructionSubject = new Subject();\n    this.destruction$ = this.destructionSubject.asObservable();\n  }\n\n  _createClass(InjectableSuperclass, [{\n    key: \"subscribeTo\",\n    value: function subscribeTo(observable, next, error, complete) {\n      this.subscriptions.add(observable.subscribe(this.bind(next), this.bind(error), this.bind(complete)));\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.subscriptions.unsubscribe();\n      this.subscriptions = new Subscription();\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(fn) {\n      return fn === null || fn === void 0 ? void 0 : fn.bind(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unsubscribe();\n      this.destructionSubject.next();\n      this.destructionSubject.complete();\n    }\n  }]);\n\n  return InjectableSuperclass;\n}();\n\nInjectableSuperclass.ɵfac = function InjectableSuperclass_Factory(t) {\n  return new (t || InjectableSuperclass)();\n};\n\nInjectableSuperclass.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: InjectableSuperclass,\n  factory: InjectableSuperclass.ɵfac\n});\n\nInjectableSuperclass.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InjectableSuperclass, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Extend this when creating a directive (including a component, which is a kind of directive) to gain access to the helpers demonstrated below. **Warning:** You _must_ include a constructor in your subclass.\n *\n * ```ts\n * @Component({\n *   selector: \"s-color-text\",\n *   template: `\n *     <span [style.background]=\"color\">{{ color }}</span>\n *   `,\n *   // note that `bindToInstance()` works even with OnPush change detection\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n *  class ColorTextComponent extends DirectiveSuperclass {\n *   @Input() prefix?: string;\n *   @Input() prefix2?: string;\n *   color!: string;\n *\n *   // Even if you don't need extra arguments injector, you must still include a constructor. It is required for angular to provide `Injector`.\n *   constructor(\n *     @Inject(\"color$\") color$: Observable<string>,\n *     injector: Injector,\n *   ) {\n *     super(injector);\n *\n *     // combine everything to calculate `color` and keep it up to date\n *     this.bindToInstance(\n *       \"color\",\n *       combineLatest(\n *         this.getInput$(\"prefix\"),\n *         this.getInput$(\"prefix2\"),\n *         color$,\n *       ).pipe(map((parts) => parts.filter((p) => p).join(\"\"))),\n *     );\n *   }\n * }\n * ```\n */\n\n\nvar DirectiveSuperclass = /*#__PURE__*/function (_InjectableSuperclass) {\n  _inherits(DirectiveSuperclass, _InjectableSuperclass);\n\n  var _super9 = _createSuper(DirectiveSuperclass);\n\n  function DirectiveSuperclass(injector) {\n    var _this18;\n\n    _classCallCheck(this, DirectiveSuperclass);\n\n    _this18 = _super9.call(this);\n    /**\n     *  Emits the set of `@Input()` property names that change during each call to `ngOnChanges()`.\n     */\n\n    _this18.inputChanges$ = new Subject();\n    _this18.changeDetectorRef = injector.get(ChangeDetectorRef);\n    return _this18;\n  }\n\n  _createClass(DirectiveSuperclass, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.inputChanges$.next(new Set(Object.getOwnPropertyNames(changes)));\n    }\n    /**\n     * @return an observable of the values for one of this directive's `@Input()` properties\n     */\n\n  }, {\n    key: \"getInput$\",\n    value: function getInput$(key) {\n      var _this19 = this;\n\n      return this.inputChanges$.pipe(filter(function (keys) {\n        return keys.has(key);\n      }), startWith(undefined), map(function () {\n        return _this19[key];\n      }));\n    }\n    /**\n     * Binds an observable to one of this directive's instance variables. When the observable emits the instance variable will be updated, and change detection will be triggered to propagate any changes. Use this an an alternative to repeating `| async` multiple times in your template.\n     */\n\n  }, {\n    key: \"bindToInstance\",\n    value: function bindToInstance(key, value$) {\n      var _this20 = this;\n\n      this.subscribeTo(value$, function (value) {\n        _this20[key] = value;\n\n        _this20.changeDetectorRef.markForCheck();\n      });\n    }\n  }]);\n\n  return DirectiveSuperclass;\n}(InjectableSuperclass);\n\nDirectiveSuperclass.ɵfac = function DirectiveSuperclass_Factory(t) {\n  return new (t || DirectiveSuperclass)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n};\n\nDirectiveSuperclass.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DirectiveSuperclass,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nDirectiveSuperclass.ctorParameters = function () {\n  return [{\n    type: Injector\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DirectiveSuperclass, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n\nfunction noop() {}\n\n;\n/**\n * Use in the `providers` of a component that implements `ControlValueAccessor` to reduce some boilerplate.\n *\n * ```ts\n * @Component({ providers: [provideValueAccessor(MyFormControl)] }\n * class MyFormControl extends BaseFormControl {\n *   // ...\n * }\n * ```\n */\n\nfunction provideValueAccessor(type) {\n  return {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: type,\n    multi: true\n  };\n}\n/**\n * Extend this when creating a form control to reduce some boilerplate. **Warning:** You _must_ include a constructor in your subclass.\n *\n * This example allows 2-way binding to a number via `[(ngModel)]`, `[formControl]`, or any other technique that leverages the `ControlValueAccessor` interface.\n * ```ts\n * @Component({\n *   template: `\n *     <button (click)=\"increment()\" [disabled]=\"isDisabled\">{{ counter }}</button>\n *   `,\n *   providers: [provideValueAccessor(CounterComponent)],\n * })\n * class CounterComponent extends FormControlSuperclass<number> {\n *   counter = 0;\n *\n *   // This looks unnecessary, but is required for Angular to provide `Injector`\n *   constructor(injector: Injector) {\n *     super(injector);\n *   }\n *\n *   handleIncomingValue(value: number) {\n *     this.counter = value;\n *   }\n *\n *   increment() {\n *     this.emitOutgoingValue(++this.counter);\n *     this.onTouched();\n *   }\n * }\n * ```\n */\n\n\nvar FormControlSuperclass = /*#__PURE__*/function (_DirectiveSuperclass) {\n  _inherits(FormControlSuperclass, _DirectiveSuperclass);\n\n  var _super10 = _createSuper(FormControlSuperclass);\n\n  function FormControlSuperclass() {\n    var _this21;\n\n    _classCallCheck(this, FormControlSuperclass);\n\n    _this21 = _super10.apply(this, arguments);\n    /** Call this to emit a new value when it changes. */\n\n    _this21.emitOutgoingValue = noop;\n    /** Call this to \"commit\" a change, traditionally done e.g. on blur. */\n\n    _this21.onTouched = noop;\n    /** You can bind to this in your template as needed. */\n\n    _this21.isDisabled = false;\n    return _this21;\n  }\n  /** Called as angular propagates value changes to this `ControlValueAccessor`. You normally do not need to use it. */\n\n\n  _createClass(FormControlSuperclass, [{\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.handleIncomingValue(value);\n      this.changeDetectorRef.markForCheck();\n    }\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.emitOutgoingValue = fn;\n    }\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.isDisabled = isDisabled;\n      this.changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return FormControlSuperclass;\n}(DirectiveSuperclass);\n\nFormControlSuperclass.ɵfac = function FormControlSuperclass_Factory(t) {\n  return ɵFormControlSuperclass_BaseFactory(t || FormControlSuperclass);\n};\n\nFormControlSuperclass.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FormControlSuperclass,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵFormControlSuperclass_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(FormControlSuperclass);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormControlSuperclass, [{\n    type: Directive\n  }], null, null);\n})();\n\nvar WrappedFormControlSuperclass = /*#__PURE__*/function (_FormControlSuperclas) {\n  _inherits(WrappedFormControlSuperclass, _FormControlSuperclas);\n\n  var _super11 = _createSuper(WrappedFormControlSuperclass);\n\n  function WrappedFormControlSuperclass(injector) {\n    var _this22;\n\n    _classCallCheck(this, WrappedFormControlSuperclass);\n\n    _this22 = _super11.call(this, injector);\n    _this22.formControl = new FormControl();\n\n    _this22.subscribeTo(_this22.formControl.valueChanges, function (value) {\n      _this22.emitOutgoingValue(_this22.innerToOuter(value));\n    });\n\n    _this22.formControl.markAsTouched = function () {\n      _this22.onTouched();\n    };\n\n    return _this22;\n  }\n  /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */\n\n\n  _createClass(WrappedFormControlSuperclass, [{\n    key: \"handleIncomingValue\",\n    value: function handleIncomingValue(value) {\n      this.formControl.setValue(this.outerToInner(value), {\n        emitEvent: false\n      });\n    }\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      if (isDisabled) {\n        this.formControl.disable({\n          emitEvent: false\n        });\n      } else {\n        this.formControl.enable({\n          emitEvent: false\n        });\n      }\n\n      _get(_getPrototypeOf(WrappedFormControlSuperclass.prototype), \"setDisabledState\", this).call(this, this.isDisabled);\n    }\n    /** Override this to modify a value coming from the outside to the format needed within this component. */\n\n  }, {\n    key: \"outerToInner\",\n    value: function outerToInner(value) {\n      return value;\n    }\n    /** Override this to modify a value coming from within this component to the format expected on the outside. */\n\n  }, {\n    key: \"innerToOuter\",\n    value: function innerToOuter(value) {\n      return value;\n    }\n  }]);\n\n  return WrappedFormControlSuperclass;\n}(FormControlSuperclass);\n\nWrappedFormControlSuperclass.ɵfac = function WrappedFormControlSuperclass_Factory(t) {\n  return new (t || WrappedFormControlSuperclass)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n};\n\nWrappedFormControlSuperclass.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: WrappedFormControlSuperclass,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nWrappedFormControlSuperclass.ctorParameters = function () {\n  return [{\n    type: Injector\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WrappedFormControlSuperclass, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of angular-base\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AUTH_CONFIG, AccessbilityModule, AccessbilityService, ApplicationProblemType, AuthGuard, Authentication, AuthenticationService, Authorization, AuthorizationService, BlockUiInterceptor, BlockUiService, CepPipe, CleanFormNotification, ClipboardDirective, ClipboardModule, ClipboardService, CnpjPipe, CommonMaskModule, CommonMaskService, CpfPipe, DirectivesModule, ErrorModule, ErrorProvider, ErrorService, ErrorStackProviderService, ErrorStackService, FieldFormNotification, FormControlSuperclass, FormNotification, FormNotificationBaseModule, FormNotificationComponentSuperclass, FormNotificationErrorProvider, FormNotificationProvider, FormNotificationService, FormNotificationType, GENERIC_ERRORS, HasRoleDirective, HideWhileLoginComponent, HttpApplicationProblemErrorService, HttpGenericErrorService, HttpGenericErrorType, JWTAuthInterceptor, JWTTokenService, LimitPipe, LoginSuccessComponent, LogoutDirective, NotAuthenticatedErrorProvider, NotificationProvider, NotificationService, OnlyNumbersDirective, PipeModule, RegexPipe, SecurityModule, Token, UnmaskDirective, UserDirective, VersionTagComponent, VersionTagModule, WrappedFormControlSuperclass, bootstrapSecurity, _isAuthenticated as isAuthenticated, noop, provideValueAccessor, _redirect as redirect, VERSIONTAG_CONFIG as ɵb, FormNotificationInterceptor as ɵc, DirectiveSuperclass as ɵd, InjectableSuperclass as ɵe };","map":{"version":3,"sources":["../../../projects/angular-base/src/lib/block-ui/block-ui.service.ts","../../../projects/angular-base/src/lib/block-ui/block-ui.interceptor.ts","../../../projects/angular-base/src/lib/version-tag/version-tag.config.ts","../../../projects/angular-base/src/lib/version-tag/version-tag.component.ts","../../../projects/angular-base/src/lib/version-tag/version-tag.module.ts","../../../projects/angular-base/src/lib/security/authentication/authentication.ts","../../../projects/angular-base/src/lib/security/authentication/logout.directive.ts","../../../projects/angular-base/src/lib/security/authentication/user.directive.ts","../../../projects/angular-base/src/lib/security/authentication/login-success.component.ts","../../../projects/angular-base/src/lib/security/authentication/authorization/authorization.ts","../../../projects/angular-base/src/lib/security/authentication/authorization/has-role.directive.ts","../../../projects/angular-base/src/lib/security/authentication/hide-while-login.component.ts","../../../projects/angular-base/src/lib/security/config/auth-config.ts","../../../projects/angular-base/src/lib/security/authentication/authorization/authorization.service.ts","../../../projects/angular-base/src/lib/security/authentication/authentication.service.ts","../../../projects/angular-base/src/lib/security/authentication/not-authenticated-error-provider.service.ts","../../../projects/angular-base/src/lib/error/providers/error.provider.ts","../../../projects/angular-base/src/lib/security/token/token.ts","../../../projects/angular-base/src/lib/security/token/jwt-auth.interceptor.ts","../../../projects/angular-base/src/lib/security/token/jwt-token.service.ts","../../../projects/angular-base/src/lib/security/security.module.ts","../../../projects/angular-base/src/lib/security/authentication/auth.guard.ts","../../../projects/angular-base/src/lib/security/authentication/security.bootstrap.ts","../../../projects/angular-base/src/lib/accessibility/accessibility.service.ts","../../../projects/angular-base/src/lib/accessibility/accessibility.module.ts","../../../projects/angular-base/src/lib/common-mask/common-mask.service.ts","../../../projects/angular-base/src/lib/common-mask/common-mask.module.ts","../../../projects/angular-base/src/lib/error/error.service.ts","../../../projects/angular-base/src/lib/error/providers/notification.provider.ts","../../../projects/angular-base/src/lib/error/types/application-problem.type.ts","../../../projects/angular-base/src/lib/error/services/http-application-problem-error.service.ts","../../../projects/angular-base/src/lib/error/types/http-generic-error.type.ts","../../../projects/angular-base/src/lib/error/services/http-generic-error.service.ts","../../../projects/angular-base/src/lib/error/error.module.ts","../../../projects/angular-base/src/lib/error/services/notification.service.ts","../../../projects/angular-base/src/lib/error/services/error-stack.service.ts","../../../projects/angular-base/src/lib/error/services/error-stack-provider.service.ts","../../../projects/angular-base/src/lib/pipes/cep.pipe.ts","../../../projects/angular-base/src/lib/pipes/cpf.pipe.ts","../../../projects/angular-base/src/lib/pipes/cnpj.pipe.ts","../../../projects/angular-base/src/lib/pipes/pipe.regex.ts","../../../projects/angular-base/src/lib/pipes/pipe.limit.ts","../../../projects/angular-base/src/lib/pipes/pipe.module.ts","../../../projects/angular-base/src/lib/clipboard/clipboard.service.ts","../../../projects/angular-base/src/lib/clipboard/clipboard.directive.ts","../../../projects/angular-base/src/lib/clipboard/clipboard.module.ts","../../../projects/angular-base/src/lib/directives/unmask.directive.ts","../../../projects/angular-base/src/lib/directives/only-numbers.directive.ts","../../../projects/angular-base/src/lib/directives/directives.module.ts","../../../projects/angular-base/src/lib/form-notification/types/form-notification.type.ts","../../../projects/angular-base/src/lib/form-notification/types/field-form-notification.type.ts","../../../projects/angular-base/src/lib/form-notification/services/form-notification.service.ts","../../../projects/angular-base/src/lib/form-notification/services/form-notification-error-provider.service.ts","../../../projects/angular-base/src/lib/form-notification/types/clean-form-notification.type.ts","../../../projects/angular-base/src/lib/form-notification/interceptor/form-notification.interceptor.ts","../../../projects/angular-base/src/lib/form-notification/components/form-notification-superclass.component.ts","../../../projects/angular-base/src/lib/form-notification/form-notification.module.ts","../../../projects/angular-base/src/lib/form-notification/providers/form-notification.provider.ts","../../../projects/angular-base/src/lib/form-utils/injectable-superclass.ts","../../../projects/angular-base/src/lib/form-utils/directive-superclass.ts","../../../projects/angular-base/src/lib/form-utils/form-control-superclass.ts","../../../projects/angular-base/src/lib/form-utils/wrapped-form-control-superclass.ts","../../../projects/angular-base/src/public-api.ts","../../../projects/angular-base/src/nuvem-angular-base.ts"],"names":["isAuthenticated","ia"],"mappings":"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","sourcesContent":["import { BlockUiStatus } from './block-ui.status';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * Class BlockUiService\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BlockUiService {\n\n    /**\n     * subject property\n     * @private\n     * @type {Subject<BlockUiStatus>}\n     */\n    private subject = new Subject<BlockUiStatus>();\n\n    /**\n     * loaderStatus property\n     * @public\n     * @type {Observable}\n     */\n    loaderStatus = this.subject.asObservable();\n\n    /**\n     * constructor method\n     * @constructor\n     */\n    constructor() { }\n\n    /**\n     * show methods\n     * @returns void\n     */\n    show() {\n        this.subject.next(<BlockUiStatus>{ status: true });\n    }\n\n    /**\n     * hide methods\n     * @returns void\n     */\n    hide() {\n        this.subject.next(<BlockUiStatus>{ status: false });\n    }\n}\n","import { Observable } from 'rxjs';\nimport { HttpEvent, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { Injectable } from \"@angular/core\";\nimport { tap } from 'rxjs/operators';\nimport { BlockUiService } from './block-ui.service';\n\n/**\n * Class BlockUiInterceptor\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BlockUiInterceptor implements HttpInterceptor {\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {BlockUiService} service \n     */\n    constructor(private service: BlockUiService) {}\n\n    /**\n     * intercept method\n     * @public \n     * @param {HttpRequest<any>} req\n     * @param {HttpHandler} next\n     * @return Observable<HttpEvent<any>>\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        if (this.isMutation(req.method)) {\n            this.service.show();\n        }\n\n        return next.handle(req).pipe(\n            tap(\n                (event: HttpEvent<any>) => {\n                    if (event instanceof HttpResponse) {\n                        this.service.hide();\n                    }\n                },\n                (err: any) => {\n                    this.service.hide();\n                }\n            )\n        );\n    }\n    /**\n     * isMutation method\n     * @private\n     * @param {string} method\n     * @return boolean\n     */\n    private isMutation(method: string): boolean {\n        const mutationsMethods = [\n            'DELETE',\n            'PATCH',\n            'POST',\n            'PUT'\n        ];\n\n        return mutationsMethods.indexOf(method) !== -1;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Interface para dados de configuração do Version Tag\n * @interface\n */\nexport interface VersionTagConfig {\n\n    /**\n     * Propriedade que determina a versão da aplicação\n     * @type {sring}\n     */\n    appVersion: string;\n}\n\n/**\n * Constante de configuração\n * @const\n */\nexport const VERSIONTAG_CONFIG = new InjectionToken<VersionTagConfig>('versiontag.config');\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { VERSIONTAG_CONFIG, VersionTagConfig } from './version-tag.config';\n\n/**\n * Componente responsável por expor o seletor <app-version-tag></app-version-tag> para reuso\n * @class\n */\n@Component({\n    selector: 'app-version-tag',\n    templateUrl: './version-tag.component.html'\n})\nexport class VersionTagComponent implements OnInit {\n\n\n    constructor(@Inject(VERSIONTAG_CONFIG) private config: VersionTagConfig) { }\n\n    /**\n     * Propriedade de para definição para classe CSS\n     * @public\n     * @type {string}\n     */\n    @Input() cssClass: string;\n\n    /**\n     * Propriedade para definição de versão\n     * @public\n     * @type {string}\n     */\n    version: string;\n\n    /**\n     * Metodo executado ao carregar o componente responsável por carregar o arquivo 'package.json'\n     * @return void\n     */\n    ngOnInit() {\n        this.version = this.config.appVersion;\n    }\n}\n","import { VersionTagComponent } from './version-tag.component';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { VersionTagConfig, VERSIONTAG_CONFIG } from './version-tag.config';\n\n/**\n * O componente VersionTag exibe o atributo `version` do arquivo `package.json` do sistema,\n * com o intuito de informar o usuário a versão atual da aplicação. Inicialmente foi feito para\n * ser utilizado no rodapé das aplicações conforme o exemplo a seguir.\n * @module\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    declarations: [\n        VersionTagComponent\n    ],\n    exports: [\n        VersionTagComponent\n    ]\n})\nexport class VersionTagModule {\n\n    /**\n     * forRoot method\n     * @public\n     * @static\n     * @returns ModuleWithProviders\n     */\n    static forRoot(config: VersionTagConfig): ModuleWithProviders<VersionTagModule> {\n        return {\n            ngModule: VersionTagModule,\n            providers: [\n                { provide: VERSIONTAG_CONFIG, useValue: config },\n            ]\n        };\n    }\n}\n","import { User } from \"./user\";\nimport { Observable } from \"rxjs\";\n\n/**\n * Classe abstrata para serviço de autenticação\n * @class\n */\nexport abstract class Authentication<U extends User> {\n\n    /**\n     * Metodo responsável por checar se o usuário esta autenticado na aplicação\n     * @returns boolean\n     * @abstract\n     * @public\n     */\n    abstract isAuthenticated(): boolean;\n\n    /**\n     * Metodo responsável pelo login da aplicação\n     * @public\n     */\n    abstract login();\n\n    /**\n     * Metodo responsável pelo logou da aplicação\n     * @public\n     * @returns void\n     */\n    abstract logout();\n\n    /**\n     * Metodo responsável por obter os dados do usuário logado\n     * @public\n     * @return User\n     */\n    abstract getUser(): U;\n\n    abstract redirect();\n\n    abstract getLoginNotifications(): Observable<User>;\n\n}\n","import { Directive, HostListener } from \"@angular/core\";\nimport { Authentication } from \"./authentication\";\nimport { User } from \"./user\";\n\n@Directive({ selector: '[logout]' })\nexport class LogoutDirective {\n\n    constructor(private authenticationService: Authentication<User>) { }\n\n    @HostListener('click')\n    click(): void {\n        this.authenticationService.logout();\n    }\n\n}\n","import { Directive, ElementRef, Input, OnInit } from \"@angular/core\";\nimport { User } from \"./user\";\nimport { Authentication } from \"./authentication\";\n\n@Directive({ selector: '[user]' })\nexport class UserDirective implements OnInit {\n\n    @Input()\n    user: string;\n\n    constructor(private el: ElementRef, private authenticationService: Authentication<User>) { }\n\n    ngOnInit(): void {\n        if (this.authenticationService.isAuthenticated()) {\n            let user = this.authenticationService.getUser();\n            this.el.nativeElement.innerHTML += this.user ? user[this.user] : user.name;\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Componente de login que será chamado quando a aplicação for logada com sucesso. \n * Deverá ser criada uma rota para esse componente.\n * @class\n */\n@Component({\n    selector: 'app-login-success',\n    template: ''\n})\nexport class LoginSuccessComponent implements OnInit {\n\n  constructor(private authenticationService: Authentication<User>) { }\n\n  ngOnInit(): void {\n    this.authenticationService.login();\n  }\n\n}\n","\n/**\n * Classe abstrata para serviço de autorização\n * @class\n */\nexport abstract class Authorization {\n\n    /**\n     * Métodos responsável por identificar as regras de acesso\n     * @public\n     * @abstract\n     * @param {any} role\n     * @returns boolean\n     */\n    abstract hasRole(role: any): boolean;\n\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Authorization } from './authorization';\nimport { Authentication } from '../authentication';\nimport { User } from '../user';\nimport { Subscription } from 'rxjs';\n\n/**\n * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.\n * @class\n */\n@Directive( {\n    selector: '[hasRole]'\n})\nexport class HasRoleDirective implements OnDestroy {\n\n    private loginNotifications: Subscription;\n\n    /**\n     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança\n     * @param {TemplateRef<any>} templateRef\n     * @param {ViewContainerRef} viewContainer\n     * @param {Authorization} authorization\n     * @param {Authentication<User>} authentication\n     */\n    constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef,\n        private authorization: Authorization,\n        private authentication: Authentication<User>) { }\n\n    /**\n     * Propriedade para identificar regras de acesso aos itens\n     * @type {string}\n     */\n    @Input() set hasRole(hasRole: string | string[]) {\n        this.viewContainer.clear();\n        if (hasRole) {\n            if (this.loginNotifications) this.loginNotifications.unsubscribe();\n            this.loginNotifications = this.authentication.getLoginNotifications().subscribe(() => {\n                if (this.authorization.hasRole(hasRole)) {\n                    this.viewContainer.clear();\n                    this.viewContainer.createEmbeddedView(this.templateRef);\n                }\n            });\n        } else {\n            this.viewContainer.createEmbeddedView(this.templateRef);\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.loginNotifications) {\n            this.loginNotifications.unsubscribe();\n        }\n    }\n\n}\n","import { Component, ElementRef, OnDestroy, OnInit, Input, AfterViewInit, AfterContentInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Authentication } from './authentication';\nimport { User } from './user';\nimport { BlockUiService } from '../../block-ui/block-ui.service';\n\n/**\n * \n * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.\n * \n * @class\n */\n@Component({\n    selector: '[hide-while-login]',\n    templateUrl: './hide-while-login.component.html'\n})\nexport class HideWhileLoginComponent implements OnInit, AfterViewInit, AfterContentInit, OnDestroy {\n\n    /**\n     * Carrega conteúdo\n     * @type {loadingString}\n     */\n    @Input()\n    public loadingContent: string = \"\";\n\n    private loginNotifications: Subscription;\n\n    public waitingLogin: boolean = false;\n\n    /**\n     * constructor method\n     * @param {ElementRef} hostComponent\n     * @param {AbstractAuthentication} auth\n     * @param {BlockUiService} blockUiService\n     * @constructor\n     */\n    constructor(\n        private hostComponent: ElementRef,\n        private auth: Authentication<User>,\n        private blockUiService: BlockUiService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.waitingLogin = !this.auth.isAuthenticated();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.auth.isAuthenticated()) {\n            this.blockUiService.show();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (!this.auth.isAuthenticated()) {\n            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {\n                this.hostComponent.nativeElement.children[i].style.display = 'none';\n            }\n        }\n        \n        this.loginNotifications = this.auth.getLoginNotifications().subscribe(() => {\n            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {\n                this.hostComponent.nativeElement.children[i].style.display = 'inherit';\n            }\n            this.waitingLogin = false;\n            this.blockUiService.hide();\n        });\n    }\n\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.loginNotifications.unsubscribe();\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Interface para dados de configuração AuthConfig\n * @interface\n */\nexport interface AuthConfig {\n\n    /**\n     * Propriedade para URL base\n     * @type {sring}\n     */\n    baseUrl: string;\n\n    /**\n     * Propriedade para URL de login\n     * @type {sring}\n     */\n    loginUrl: string;\n\n    /**\n     * Rota de navegação quando o usuário for logado com sucesso na aplicação.\n     * @type {sring}\n     */\n    loginSuccessRoute: string;\n\n    /**\n     * Propriedade para URL de logOut\n     * @type {string}\n     */\n    logoutUrl: string;\n\n    /**\n     * Propriedade para URL de dados do usuário\n     * @type {string}\n     */\n    detailsUrl: string;\n\n    /**\n     * Propriedade para definião de storage\n     * @type {Storage}\n     */\n    storage: Storage;\n\n    /**\n     * Propriedade para identificar o idice do usuário no storage\n     * @type {string}\n     */\n    userStorageIndex: string;\n\n    /**\n     * Propriedade para identificar o idice do token no storage\n     * @type {string}\n     */\n    tokenStorageIndex?: string;\n\n}\n\n/**\n * Constante de configuração\n * @const\n */\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('auth.config');\n","\nimport { Injectable } from '@angular/core';\nimport { Authorization } from './authorization';\nimport { Authentication } from '../authentication';\nimport { User } from '../user';\n\n/**\n * Serviço de autorização \n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthorizationService extends Authorization {\n\n    /**\n     * Método construtor para a injeção do serviço de configuração AuthConfig\n     * @constructor\n     * @param {AuthConfig} config\n     */\n    constructor(private authenticationService: Authentication<User>) {\n        super();\n    }\n\n    /**\n     * Método responsável por identificar as regras de acesso\n     * @public\n     * @param {any} role\n     * @returns boolean\n     */\n    hasRole(role: any): boolean {\n        if (role) {\n            const user = this.authenticationService.getUser();\n            if (role instanceof Array) {\n                return user.roles.some((userRole: string) => role.some((checkRole: string) => userRole === checkRole));\n            }\n            return user.roles.some((userRole: string) => userRole === role);\n        }\n        return true;\n    }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { AuthConfig, AUTH_CONFIG } from '../config/auth-config';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport { User } from './user';\nimport { Authentication } from './authentication';\nimport { HttpClient } from '@angular/common/http';\nimport { tap, filter } from 'rxjs/operators';\n\nexport function isAuthenticated(config: AuthConfig): boolean {\n    return null !== config.storage.getItem(config.userStorageIndex);\n};\n\nexport function redirect(config: AuthConfig): void {\n    window.location.href = config.loginUrl;;\n};\n\n/**\n * Serviço de autenticação\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthenticationService<U extends User> extends Authentication<U> {\n\n    loginNotifications: BehaviorSubject<User> = new BehaviorSubject<User>(this.getUser());\n\n    constructor(@Inject(AUTH_CONFIG) private config: AuthConfig, private http: HttpClient) {\n        super();\n    }\n\n    /**\n     * Método para verificar se o usuário esta autenticado na aplicação\n     * @returns boolean\n     * @public\n     */\n    isAuthenticated(): boolean {\n        return isAuthenticated(this.config);\n    }\n\n    /**\n     * Método responsável por realizar redirecionamentos\n     * @returns void\n     * @public\n     */\n    redirect() {\n        redirect(this.config);\n    }\n\n    /**\n     * Método responsável pelo login da aplicação\n     * @public\n     * @param {User} user\n     * @returns Observable<any>\n     */\n    login() {\n        this.getUserDetails()\n            .subscribe((user) => {\n                this.setUser(user);\n                this.loginNotifications.next(user)\n            });\n    }\n\n    /**\n     * Método responsável pelo logou da aplicação\n     * @public\n     * @returns void\n     */\n    logout() {\n        this.loginNotifications.next(null);\n        this.config.storage.removeItem(this.config.userStorageIndex);\n        window.location.href = this.config.logoutUrl;\n    }\n\n    /**\n     * Método responsável por obter os dados do usuário logado\n     * @public\n     * @returns Observable<any>\n     */\n    public getUserDetails(): Observable<U> {\n        return this.http.get<U>(this.config.baseUrl + this.config.detailsUrl);\n    }\n\n    private setUser(user: U) {\n        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));\n    }\n\n    getUser(): U {\n        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));\n    }\n\n    getLoginNotifications(): Observable<User> {\n        return this.loginNotifications.pipe(filter((value) => value != null));\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorProvider } from '../../error/providers/error.provider';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Provedor de error para criação de erros de notificação.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NotAuthenticatedErrorProvider implements ErrorProvider {\n\n    constructor(private authenticationService: Authentication<User>) { }\n\n    /**\n     * Método para identificar se o usuário está logado\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && error.status == 401;\n    }\n\n    /**\n     * Método para redirecionar caso o usuário não esteja\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        this.authenticationService.redirect();\n    }\n\n}\n","/**\n * Anstract class ErrorProvider\n * @class\n * @abstract\n */\nexport abstract class ErrorProvider {\n    /**\n     * Metodo responsável pela identificação de erros\n     * @param {Error} error\n     * @returns Boolean\n     */\n    abstract shouldHandle(error: Error): Boolean;\n\n    /**\n     * Metodo pela adição de erros\n     * @param {Error} error\n     * @returns void\n     */\n    abstract handle(error: Error): void;\n}\n","import { HttpRequest, HttpHeaders } from \"@angular/common/http\";\n\n/**\n * Classe abstrata para gerencia de tokens\n * @class\n */\nexport abstract class Token {\n\n    /**\n     * Metodo responsável pela extração de tokes do heaedrs das requisições\n     * @public\n     * @param {HttpHeaders} headers\n     * @returns strng\n     */\n    abstract extractTokenFromHeaders(headers: HttpHeaders): String;\n\n    /**\n     * Metodo responsável pela adição dos tokens no storage\n     * @public\n     * @param {String} token\n     * @returns void\n     */\n    abstract storeToken(token: String);\n\n    /**\n     * Metodo responsável por injetar token no header das requisições\n     * @public\n     * @param {HttpRequest<any>} request\n     * @returns HttpRequest<any>\n     */\n    abstract setTokenInHeader(request: HttpRequest<any>): HttpRequest<any>;\n\n    /**\n     * Metodo responsável por verificar a existencia de um token de autenticação\n     * @returns boolean\n     * @public\n     */\n    abstract hasToken(): boolean;\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { tap } from 'rxjs/operators';\nimport { Token } from \"./token\";\n\n/**\n * Implementação de classe para interceptar e tratar requisições http/https\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class JWTAuthInterceptor implements HttpInterceptor {\n\n    /**\n     * Metodo construtor responsável por injetar serviço de autenticação\n     * @constructor\n     * @param {AbstractAuthentication} auth\n     */\n    constructor(private token: Token) {}\n\n    /**\n     * Metodo responsável por interceptar requisições HTTP/HTTPS\n     * @public\n     * @param {HttpRequest<any>} request\n     * @param {HttpHandler} next\n     * @returns Observable<HttpEvent<any>>\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.token.hasToken()) {\n            request = this.token.setTokenInHeader(request);\n        }\n        return next.handle(request)\n            .pipe(\n                tap((event: HttpEvent<any>) => {\n                    if (event instanceof HttpResponse) {\n                        const token: String = this.token.extractTokenFromHeaders(event.headers);\n                        if (null !== token) this.token.storeToken(token);\n                    }\n                    return event;\n                })\n            );\n    }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpRequest, HttpHeaders } from \"@angular/common/http\";\nimport { Token } from './token';\nimport { AuthConfig, AUTH_CONFIG } from '../config/auth-config';\n\n/**\n * Inplementação de serviço JWTTokenService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class JWTTokenService extends Token {\n\n    /**\n     * TOKEN_PREFIX  property\n     * @type {string}\n     */\n    public static readonly TOKEN_PREFIX = \"Bearer\";\n\n    /**\n     * HEADER_STRING property\n     * @type {string}\n     */\n    public static readonly HEADER_STRING = \"Authorization\";\n\n    /**\n     * Metodo construtor responsável por injetar as configurações de autenticação\n     * @constructor\n     * @param {AuthConfig} config\n     */\n    constructor(@Inject(AUTH_CONFIG) private config: AuthConfig) {\n        super();\n    }\n    /**\n     * Metodo responsável pela extração de tokes do heaedrs das requisições\n     * @public\n     * @param {HttpHeaders} headers\n     * @returns string\n     */\n    extractTokenFromHeaders(headers: HttpHeaders): String {\n        return headers.get(JWTTokenService.HEADER_STRING);\n    }\n\n    /**\n     * Metodo responsável pela adição dos tokens no storage\n     * @public\n     * @param {String} token\n     * @returns void\n     */\n    storeToken(token: String) {\n        this.config.storage.setItem(\n            this.config.tokenStorageIndex,\n            token.toString()\n        );\n    }\n\n    /**\n     * Metodo responsável por injetar token no header das requisições\n     * @public\n     * @param {HttpRequest<any>} request\n     * @returns HttpRequest<any>\n     */\n    setTokenInHeader(request: HttpRequest<any>): HttpRequest<any> {\n        const req: HttpRequest<any> = request.clone({\n            headers: new HttpHeaders({\n                [JWTTokenService.HEADER_STRING]: this.config.storage.getItem(this.config.tokenStorageIndex)\n            })\n        });\n        return req;\n    }\n\n    /**\n     * Metodo responsável por verificar a existencia de um token de autenticação\n     * @returns boolean\n     * @public\n     */\n    hasToken(): boolean {\n        return null !== this.config.storage.getItem(this.config.tokenStorageIndex);\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LogoutDirective } from './authentication/logout.directive';\nimport { UserDirective } from './authentication/user.directive';\nimport { LoginSuccessComponent } from './authentication/login-success.component';\nimport { HasRoleDirective } from './authentication/authorization/has-role.directive';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HideWhileLoginComponent } from './authentication/hide-while-login.component';\nimport { AUTH_CONFIG, AuthConfig } from './config/auth-config';\nimport { AuthorizationService } from './authentication/authorization/authorization.service';\nimport { AuthenticationService } from './authentication/authentication.service';\nimport { Authorization } from './authentication/authorization/authorization';\nimport { Authentication } from './authentication/authentication';\nimport { NotAuthenticatedErrorProvider } from './authentication/not-authenticated-error-provider.service';\nimport { ErrorProvider } from '../error/providers/error.provider';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { JWTAuthInterceptor } from './token/jwt-auth.interceptor';\nimport { Token } from './token/token';\nimport { JWTTokenService } from './token/jwt-token.service';\n\n/**\n * O modulo de segurança contem funcionalidades para autenticação, autorização, redirecionamento \n * para login, gerenciamento de tokens JWT e obtenção e armazenamento de dados de usuário.\n * @class\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        HttpClientModule\n    ],\n    declarations: [\n        LogoutDirective,\n        UserDirective,\n        LoginSuccessComponent,\n        HasRoleDirective,\n        HideWhileLoginComponent\n    ],\n    providers: [\n        AuthorizationService,\n        AuthenticationService,\n        { provide: ErrorProvider, useClass: NotAuthenticatedErrorProvider, multi: true },\n        { provide: Authorization, useClass: AuthorizationService },\n        { provide: Authentication, useClass: AuthenticationService }\n    ],\n    exports: [\n        LogoutDirective,\n        UserDirective,\n        LoginSuccessComponent,\n        HasRoleDirective,\n        HideWhileLoginComponent\n    ]\n})\nexport class SecurityModule {\n\n    /**\n     * forRoot method\n     * @public\n     * @static\n     * @returns ModuleWithProviders\n     */\n    static forRoot(config: AuthConfig): ModuleWithProviders<SecurityModule> {\n        return { \n            ngModule: SecurityModule, \n            providers: [\n                { provide: AUTH_CONFIG, useValue: config },\n                config.tokenStorageIndex ? \n                  [ \n                    { provide: Token, useClass: JWTTokenService },\n                    { provide: HTTP_INTERCEPTORS, useClass: JWTAuthInterceptor, multi: true }\n                  ] : []\n            ]\n        };\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Guard que verifica se usuário está autenticado antes do usuário acessar uma rota. \n * Se for verificar que o usuário não está autenticado, é feito um redirecionamento para o login.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n    /**\n     * Método construtor responsável pela injeção do serviço de autenticação\n     * @constructor\n     * @param {Authentication} auth\n     */\n    constructor(private authenticationService: Authentication<User>) {}\n\n    /**\n     * Método responsável por identificar se o usuário está autenticado\n     * @public\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns boolean\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        if (this.authenticationService.isAuthenticated()) {\n            return true;\n        }\n        this.authenticationService.redirect();\n        return false;\n    }\n\n    /**\n     * Método responsável por atuar somente em rotas filhas de modo independente\n     * @public\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns boolean\n     */\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(route, state);\n    }\n\n}\n","import { AuthConfig } from \"../config/auth-config\";\nimport { isAuthenticated as ia, redirect } from \"./authentication.service\";\n\nexport function bootstrapSecurity(\n    config: AuthConfig, authenticated: () => void, isAuthenticated = ia, notAuthenticated = redirect) {\n    if (window.location.href.includes(config.loginSuccessRoute) || isAuthenticated(config)) {\n        authenticated();\n    } else {\n        notAuthenticated(config);\n    }\n}\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\n/**\n * AccessbilityService Serviço de acessibilidade, este serviço prove recursos de contraste\n * de tela e controle do tamanho da fonte apresentadas na tela.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AccessbilityService {\n\n    private renderer: Renderer2\n\n    constructor(rendererFactory: RendererFactory2) {\n        this.renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    /**\n     * Propriedade que define tamanho da fonte\n     * @type {number}\n     */\n    private fontSize: number = 1.0;\n\n    /**\n     * Medoto para habilitar contraste\n     * @public\n     * @returns void\n     */\n    enableHighContrast() {\n        this.renderer.addClass(document.body, 'contraste');\n    }\n\n    /**\n     * Metodo para desabilitar contraste\n     * @public\n     * @returns void\n     */\n    disableHighContrast() {\n        this.renderer.removeClass(document.body, 'contraste');\n    }\n\n    /**\n     * Metodo utilizado para aumentar o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n    increaseFontSize() {\n        this.fontSize += 0.1;\n        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n\n    /**\n     * Metodo utilizado para diminuir o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n    decreaseFontSize() {\n        this.fontSize -= 0.1;\n        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n\n    addAccessibilityIcons() {\n        const elements = document.querySelector('.p-button-icon-left, p-button-icon-righ');\n\n        if (elements) {\n            this.renderer.setStyle(elements, 'aria-hidden', true);\n        }\n    }\n\n    addAccessibilityMessages(msg: {severity: string}) {\n        let type = 'polite';\n        if (msg.severity.toLowerCase() !== 'custom' && msg.severity.toLowerCase() !== 'success') {\n            type = 'assertive';\n        }\n\n        this.renderer.setStyle(document.querySelector('p-toast, p-growl'), 'aria-live', type);\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from  '@angular/core';\nimport { CommonModule } from  '@angular/common';\nimport { AccessbilityService } from './accessibility.service';\n\n/**\n * AccessbilityModule expõe o serviço AccessbilityService para o uso de outras aplicações\n * @module\n */\n@NgModule({\n    imports: [CommonModule],\n    providers: [AccessbilityService],\n    exports: []\n})\nexport class AccessbilityModule {\n}\n","import { Injectable } from '@angular/core';\n\n/**\n *\n * Class CommonMaskService serviço para inserção de mascara de data em campos input\n * @class \n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommonMaskService {\n\n    /**\n     * DATE_SEPARATOR property\n     * @type {string}\n     */\n    private readonly DATE_SEPARATOR = '/';\n\n    /**\n     * Metodo para formatar valor digitado no padrão dd/mm/yyyy\n     * @param $event\n     * @returns void\n     */\n    dateMask($event) {\n        if ($event.target.value) {\n            let date = $event.target.value.replace(/[^0-9]/g, '').substr(0, 8);\n            \n            if (date.length >= 3) {\n              date = date.replace(/^(\\d{2})(\\d{1,2})/, '$1' + this.DATE_SEPARATOR + '$2');\n            }\n            \n            if (date.length >= 6) {\n              date = date.replace(/^(\\S{5})(\\d{1,4})/, '$1' + this.DATE_SEPARATOR + '$2');\n            }\n\n            $event.target.value = date;\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonMaskService } from './common-mask.service';\n/**\n * CommonMaskModule expõe o servico CommonMaskService para o uso de outras aplicações\n * @class\n */\n@NgModule({\n    imports: [],\n    declarations: [],\n    providers: [\n        CommonMaskService\n    ],\n    exports: []\n})\nexport class CommonMaskModule {\n}\n","import { ErrorHandler, Inject, Injectable } from '@angular/core';\nimport { ErrorProvider } from './providers/error.provider';\n\n/**\n * Class ErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorService extends ErrorHandler {\n\n    /**\n     * Metodo construtor responável por injetar o serviço ErrorProvider\n     * @param {ErrorProvider} providers\n     */\n    constructor(@Inject(ErrorProvider) private providers: ErrorProvider[]) {\n        super();\n    }\n\n    /**\n     * Metodo responsável por idetificar e obter os erros lançados de requisições http/https\n     * @param {Error} error\n     * @returns void\n     */\n    handleError(error: Error) {\n        try {\n            this.providers.forEach(p => {\n                if (p.shouldHandle(error)) {\n                    p.handle(error);\n                }\n            });\n        } catch (e) {\n        }\n        super.handleError(error);\n    }\n}\n","import { ApplicationProblemType } from '../types/application-problem.type';\n\n/**\n * Abstract provider NotificationProvider\n * @abstract\n * @class\n */\nexport abstract class NotificationProvider {\n\n    /**\n     * Metodo para adicionar menssagem de erro\n     * @param {string} message\n     * @param {string} title\n     * @returns void\n     */\n    abstract addErrorMessage(message: string, title?: string): void;\n\n    /**\n     * Metodo para adição de erros\n     * @param {ApplicationProblemType} problem\n     * @returns void\n     */\n    abstract addErrorProblem(problem: ApplicationProblemType): void;\n\n}\n","/**\n * Classe modelo ApplicationProblemType\n * @class\n */\nexport class ApplicationProblemType {\n\n    /**\n     * constructor method\n     * @param {string} type\n     * @param {string} title\n     * @param {string} detail\n     * @param {Number} status\n     * @param {string} instance\n     * @param {Array<string>} stacktrace\n     * @param {ApplicationProblemType} cause\n     * @constructor\n     */\n    constructor(\n        public type: string | 'about:blank',\n        public title: string,\n        public detail?: string,\n        public status?: Number,\n        public instance?: string,\n        public stacktrace?: Array<string>,\n        public cause?: ApplicationProblemType) {\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NotificationProvider } from '../providers/notification.provider';\nimport { ApplicationProblemType } from '../types/application-problem.type';\nimport { ErrorProvider } from '../providers/error.provider';\n\n/**\n * Serviço HttpApplicationProblemErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class HttpApplicationProblemErrorService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsável por injetar serviço NotificationProvider\n     * @param {NotificationProvider} notification\n     * @constructor\n     */\n    constructor(private notification: NotificationProvider, private ngZone: NgZone) { }\n\n    /**\n     * Metodo responsável pela identificação de erros\n     * @public \n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && \n            error.headers.get('Content-Type') === 'application/problem+json' && \n            error.error;\n    }\n\n    /**\n     * Metodo pela adição de erros\n     * @public \n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        this.ngZone.run(() => { \n            this.notification.addErrorProblem(\n                new ApplicationProblemType(\n                    error.error.type,\n                    error.error.title,\n                    error.error.detail,\n                    error.error.status,\n                    error.error.instance));\n        });\n    }\n}","\n/**\n * Classe modelo HttpGenericErrorType\n * @class\n */\nexport class HttpGenericErrorType {\n\n    /**\n     * constructor method\n     * @param {Number} code\n     * @param {string} title\n     * @param {string} detail\n     * @constructor\n     */\n    constructor(\n        public code: Number,\n        public title: string,\n        public detail: string) {\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NotificationProvider } from '../providers/notification.provider';\nimport { HttpGenericErrorType } from '../types/http-generic-error.type';\nimport { ErrorProvider } from '../providers/error.provider';\n\n/**\n * Serviço HttpGenericErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class HttpGenericErrorService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsávelpor injetar o serviço NotificationProvider\n     * @param {NotificationProvider} notification\n     * @constructor\n     */\n    constructor(private notification: NotificationProvider, private ngZone: NgZone) { }\n\n    /**\n     * Metodo responsável pela identificação de erros\n     * @public\n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && \n            !(error.headers.get('Content-Type') === 'application/problem+json' && \n            error.error);\n    }\n\n    /**\n     * Metodo pela adição de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        const generic = this.getErrorByCode(error);\n        this.ngZone.run(() => { \n            this.notification.addErrorMessage(generic.detail, generic.title);\n        });\n    }\n\n    /**\n     * Metodo para obter erros a partir de um código\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns HttpGenericErrorType\n     */\n    public getErrorByCode(error: HttpErrorResponse): HttpGenericErrorType {\n        const generic = GENERIC_ERRORS[error.status];\n\n        if (generic === undefined) {\n            return new HttpGenericErrorType(\n                error.status,\n                error.statusText,\n                error.message\n            );\n        }\n\n        return generic;\n    }\n\n}\n/**\n * Constante que define tipos de erros básicos\n * @const GENERIC_ERRORS\n */\nexport const GENERIC_ERRORS = {\n    401: new HttpGenericErrorType(401,\n        'Não Autenticado',\n        'Essa requisição requer um usuário autenticado.'),\n\n    403: new HttpGenericErrorType(403,\n        'Proibido',\n        'Essa requisição requer uma permissão no servidor da aplicação que o usuário não possui.'),\n\n    404: new HttpGenericErrorType(404,\n        'Não encontrado',\n        'Essa requisição não pode ser encontrada.'),\n\n    500: new HttpGenericErrorType(500,\n        'Erro desconhecido',\n        'O servidor encontrou uma condição inesperada.'),\n\n    502: new HttpGenericErrorType(502,\n        'Bad Gateway',\n        'O servidor recebeu uma resposta inválida de um serviço que utilizou para cumprir a requisição'),\n\n    503: new HttpGenericErrorType(503,\n        'Serviço Indisponível',\n        'O servidor não pode atender a requisição nesse momento. Esta é uma condição temporária, tente novamente mais tarde'),\n\n    504: new HttpGenericErrorType(504,\n        'Gateway Timeout',\n        'O servidor não conseguiu receber uma resposta a tempo esperado por um serviço que utilizou para cumprir a requisição')\n};\n","import { ErrorHandler, NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ErrorService } from './error.service';\nimport { ErrorProvider } from './providers/error.provider';\nimport { HttpApplicationProblemErrorService } from './services/http-application-problem-error.service';\nimport { HttpGenericErrorService } from './services/http-generic-error.service';\n\n/**\n * O modulo ErrorModule contem funcionalidades para a captura e apresentação dos erros que possam ocorrer na aplicação.\n * @module\n */\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        {\n            provide: ErrorProvider,\n            useClass: HttpGenericErrorService,\n            multi: true\n        },\n        {\n            provide: ErrorProvider,\n            useClass: HttpApplicationProblemErrorService,\n            multi: true\n        },\n        {\n            provide: ErrorHandler,\n            useClass: ErrorService,\n        },\n    ]\n})\nexport class ErrorModule {\n}\n","import { ApplicationProblemType } from '../types/application-problem.type';\nimport { NotificationProvider}  from '../providers/notification.provider';\nimport { Injectable } from '@angular/core';\n\n/**\n * Class NotificationService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NotificationService extends NotificationProvider {\n\n    /**\n     * Metodo responsável po adicionar mensagem de erro\n     * @param {string} message\n     * @param {string} title\n     * @returns void\n     */\n    addErrorMessage(message: string, title?: string): void {\n        console.error(title + ' ' + message);\n    }\n\n    /**\n     * Metodo responsável por adicionar o detalhamento do erro no console\n     * @param {ApplicationProblemType} problem\n     * @returns void\n     */\n    addErrorProblem(problem: ApplicationProblemType): void {\n        console.error(problem.title + ' ' + problem.detail);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { NamedErrorType } from '../types/named-error.type';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpGenericErrorService } from '../services/http-generic-error.service';\n\n/**\n * Serviço de erros ErrorStackService\n * @class \n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorStackService {\n\n    /**\n     * Propriedade errors\n     * @type {ReplaySubject<NamedErrorType>}\n     */\n    errors: ReplaySubject<NamedErrorType> = new ReplaySubject<NamedErrorType>();\n\n    /**\n     * metodo construtor injeta serviço generico de erros\n     * @param {HttpGenericErrorService} genericErrorService\n     * @constructor\n     */\n    constructor(private genericErrorService: HttpGenericErrorService) {\n        if (null === localStorage.getItem('errorStack')) {\n            localStorage.setItem('errorStack', JSON.stringify([]));\n        }\n\n        this.getErrorsSubjects().forEach((error: NamedErrorType) => {\n            this.errors.next(error);\n        });\n    }\n\n    /**\n     * Metodo responsável por criar erro do tipo HttpResponse\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    create(error: HttpErrorResponse) {\n        const namedError = this.createNamedError(error);\n\n        const persistedErrors: NamedErrorType[] = this.getErrorsSubjects();\n\n        if (persistedErrors.length >= 15) {\n            persistedErrors.shift();\n        }\n\n        persistedErrors.push(namedError);\n\n        localStorage.setItem('errorStack', JSON.stringify(persistedErrors));\n\n        this.errors.next(namedError);\n    }\n\n    /**\n     * Metodo responsável por obter o conteúdo dos erros emitidos\n     * @private\n     * @returns NamedErrorType[]\n     */\n    private getErrorsSubjects(): NamedErrorType[] {\n        return JSON.parse(localStorage.getItem('errorStack'));\n    }\n\n    /**\n     * Metodo responsável por itentifica o tipo de erro lançado\n     * @private\n     * @param {HttpErrorResponse} error\n     * @returns NamedErrorType\n     */\n    private createNamedError(error: HttpErrorResponse): NamedErrorType {\n        let fullMessage: string;\n        let namedError: NamedErrorType;\n        let createdAt: Date = new Date();\n        let errorId = this.getErrorId(error);\n        let title: string | null;\n\n        if (error.headers.get('Content-Type') === 'application/problem+json') {\n            fullMessage = `X-Correlation-ID: ${errorId}\n                           createdAt: ${createdAt}\n                           status: ${error.status}\n                           url: ${error.url}\n                           body: ${error.error.detail}\n                           stacktrace: ${error.error.stacktrace}\n                           cause: ${error.error.cause}`;\n\n            title = error.error.title;\n\n        } else {\n            const genericError = this.genericErrorService.getErrorByCode(error);\n\n            fullMessage = `X-Correlation-ID: ${errorId}\n                           createdAt: ${createdAt}\n                           status: ${error.status}\n                           url: ${error.url}\n                           body: ${genericError.detail}`;\n\n            title = genericError.title;\n        }\n\n        namedError = {\n            message: title,\n            createdAt: createdAt,\n            correlationId: errorId,\n            fullMessage: fullMessage\n        };\n\n        return namedError;\n    }\n\n    /**\n     * Metodo responsável por obter o identificador do erro\n     * @private \n     * @param {HttpErrorResponse} error\n     * @returns string\n     */\n    private getErrorId(error: HttpErrorResponse): string {\n        let errorKey: string | null;\n\n        error.headers.keys().every(key => {\n            if (key.toUpperCase() === 'X-CORRELATION-ID') {\n                errorKey = key;\n                return false;\n            }\n            return true;\n        });\n\n        return errorKey ? error.headers.get(errorKey) : null;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ErrorProvider } from '../providers/error.provider';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorStackService } from './error-stack.service';\n\n/**\n * Class ErrorStackProviderService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorStackProviderService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsável por injetar o serviso de erros\n     * @param {ErrorStackService} errorStackService\n     */\n    constructor(private errorStackService: ErrorStackService) {}\n\n    /**\n     * Metodo responsável pela identificação de erros\n     * @param {Error} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error): Boolean {\n        return error instanceof HttpErrorResponse;\n    }\n\n    /**\n     * Metodo pela adição de erros\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse) {\n        this.errorStackService.create(error);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CEP para valores.\n * \n * Usage:\n * {{ value | cep }}\n*/\n\n@Pipe({\n  name: 'cep'\n})\n\nexport class CepPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if ( value === null) {\n      return '-';\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 5) + '-' + value.substring(5, 8);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CPF para valores.\n * \n * Usage:\n * {{ value | cpf }}\n*/\n\n@Pipe({\n  name: 'cpf'\n})\n\nexport class CpfPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (value === null || value.length !== 11) {\n      return value;\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 3) + '.' +\n      value.substring(3, 6) + '.' +\n      value.substring(6, 9) + '-' +\n      value.substring(9, 11);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CNPJ para valores.\n * \n * Usage:\n * {{ value | cnpj }}\n*/\n\n@Pipe({\n  name: 'cnpj'\n})\n\nexport class CnpjPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (value === null || value.length !== 14) {\n      return value;\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 2) + '.' +\n      value.substring(2, 5) + '.' +\n      value.substring(5, 8) + '/' +\n      value.substring(8, 12) + '-' +\n      value.substring(12, 14);\n    }\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n *\n * Cria PIPE de valores com regra definida em expressão regex\n * Usage:\n * {{ value | regex:arg1:arg2 }}\n*/\n\n@Pipe({\n    name: 'regex'\n})\n\nexport class RegexPipe implements PipeTransform {\n\n    transform(value: any, regex: any, regexPrint: any): any {\n        return value.replace(regex, regexPrint);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE para valores com restrição de valores a serem apresentados.\n * \n * Usage:\n * {{ value | limit:20 }}\n * {{ value | limit:20:\"...\" }}\n*/\n\n@Pipe({\n    name: 'limit'\n})\n\nexport class LimitPipe implements PipeTransform {\n\n    transform(value: string, limit = 25, ellipsis = '...') {\n        return value.length > limit\n            ? `${value.substr(0, limit)}${ellipsis}`\n            : value;\n    }\n}\n","\nimport { NgModule } from '@angular/core';\nimport { CpfPipe } from './cpf.pipe';\nimport { CepPipe } from './cep.pipe';\nimport { CnpjPipe } from './cnpj.pipe';\nimport { RegexPipe } from './pipe.regex';\nimport { LimitPipe } from './pipe.limit';\n\n/**\n *\n *  Export do módulo\n */\n@NgModule({\n    imports: [],\n    declarations: [\n        CepPipe,\n        CpfPipe,\n        CnpjPipe,\n        RegexPipe,\n        LimitPipe,\n    ],\n    exports: [\n        CepPipe,\n        CpfPipe,\n        CnpjPipe,\n        RegexPipe,\n        LimitPipe,\n    ]\n})\nexport class PipeModule {}\n","import { Injectable } from '@angular/core';\n\n/**\n * Fornece metodo para copia de textos\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClipboardService {\n\n    /**\n     * Inspirado no clipboard.js, copia texto selecionado para área de trasferência\n     * @param {string} text\n     * @returns void\n     * @public\n     */\n    copy(text: string) {\n        const isRTL: boolean = document.documentElement.getAttribute('dir') === 'rtl';\n\n        // cria um elemento temporário, seta o foco, copia e remove em seguida\n        let fake: HTMLTextAreaElement = document.createElement('textarea');\n        fake.style.fontSize = '12pt';\n        fake.style.border = '0';\n        fake.style.padding = '0';\n        fake.style.margin = '0';\n        fake.style.position = 'absolute';\n        fake.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        let yPosition: number = window.pageYOffset || document.documentElement.scrollTop;\n\n        fake.style.top = `${yPosition}px`;\n        fake.setAttribute('readonly', '');\n        fake.value = text;\n\n        document.body.appendChild(fake);\n\n        fake.select();\n\n        document.execCommand('copy');\n        document.body.removeChild(fake);\n    }\n}\n","import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\nimport { ClipboardService } from './clipboard.service';\n\n@Directive({\n    selector: '[clipboard]'\n})\n/**\n * Diretiva que expõe seletor para o uso do clipbord\n * @class\n */\nexport class ClipboardDirective {\n\n    /**\n     * clipboard variable\n     * @type {string}\n     */\n    @Input()\n    clipboard: string;\n\n    /**\n     * onClipboard variable\n     * @type {EventEmitter<boolean>}\n     */\n    @Output()\n    onClipboard: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     * constructor method\n     * @param {ClipboardService} service\n     * @constructor\n     */\n    constructor(private service: ClipboardService) {}\n\n    @HostListener('click')\n    /**\n     * copy method\n     * @event click\n     * @returns void\n     */\n    copy() {\n        try {\n            this.service.copy(this.clipboard);\n            this.onClipboard.emit(true);\n        } catch (e) {\n            this.onClipboard.emit(false);\n            throw e;\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ClipboardDirective } from './clipboard.directive';\nimport { ClipboardService } from './clipboard.service';\n\n/**\n * ClipboardModule expõe o servico ClipboardService para o uso de outras aplicações\n * @module\n */\n@NgModule({\n  imports: [],\n  declarations: [\n    ClipboardDirective,\n  ],\n  providers: [\n    ClipboardService\n  ],\n  exports: [\n    ClipboardDirective,\n  ]\n})\nexport class ClipboardModule {\n}\n","import { Directive, ElementRef, OnInit, Input, OnDestroy } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n/**\n *\n * UnmaskDirective diretiva para remoção de mascaras de valores numericos\n * @class\n */\n@Directive({\n    selector: '[unmask]'\n})\nexport class UnmaskDirective implements OnInit, OnDestroy {\n\n    /**\n     * Propriedade a para realizar a formatação expressão regular\n     * @type {string} appUnmask\n     */\n    @Input() appUnmask: string;\n\n    /**\n     * Cria canal de escuta para a diretiva\n     * @type {Subscription} subscriber\n     */\n    private subscriber;\n\n    /**\n     * constructor method\n     * @param {ElementRef} elementRef\n     * @param {NgControl} model\n     * @constructor\n     */\n    constructor(private elementRef: ElementRef, private model: NgControl) { }\n\n    /**\n     * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular\n     * @returns void\n     */\n    ngOnInit(): void {\n        this.subscriber = this.model.control.valueChanges.subscribe(\n            () => {\n                const newValue = this.elementRef.nativeElement.value.replace(new RegExp(this.appUnmask), '');\n                this.model.control.setValue(\n                    newValue,\n                    {\n                        emitEvent: false,\n                        emitModelToViewChange: false,\n                        emitViewToModelChange: false\n                    }\n                );\n            }\n        );\n    }\n\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.subscriber.unsubscribe();\n    }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n/**\n * OnlyNumbersDirective diretiva para que sejam permitidos somente números\n * @class\n */\n@Directive({\n    selector: 'input[onlyNumbers]'\n})\nexport class OnlyNumbersDirective {\n\n    /**\n     * Propriedade que carrega expressão regular para numeros\n     * @type {RegExp}\n     */\n    private regex: RegExp = new RegExp(/[^0-9]$/g);\n\n    /**\n     * Propriedade que lista opções aceitas além de núsmeros\n     * @type {Array<string>}\n     */\n    private specialKeys: Array<string> = [\n        'Backspace',\n        'Delete',\n        'Tab',\n        'End',\n        'Home',\n        'ArrowLeft',\n        'ArrowRight'\n    ];\n\n    /**\n     * @param {ElementRef} el\n     * @constructor\n     */\n    constructor(private el: ElementRef) { }\n\n    /**\n     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado\n     * @param {KeyboardEvent} event\n     * @returns void\n     */\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n\n        const current: string = this.el.nativeElement.value;\n        const next: string = current.concat(event.key);\n\n        if (this.specialKeys.indexOf(event.key) !== -1) {\n            return;\n        }\n\n        if (next && String(next).match(this.regex)) {\n            event.preventDefault();\n        }\n    }\n\n}\n","import { UnmaskDirective } from './unmask.directive';\nimport { OnlyNumbersDirective } from './only-numbers.directive';\nimport { NgModule } from '@angular/core';\n\n/**\n * DIRECTIVES constant\n * @constant\n */\nconst DIRECTIVES = [\n    OnlyNumbersDirective,\n    UnmaskDirective\n];\n\n/**\n * Expõe directivas para reuso em outras palicações\n * @module\n */\n@NgModule({\n    declarations: DIRECTIVES,\n    exports: DIRECTIVES\n})\nexport class DirectivesModule {}\n","\nenum FormNotificationType { CLEAN, FIELD }\n\n/**\n * Class modelo para validação de formulários\n * @class\n */\nclass FormNotification {\n\n    /**\n     * Metodo construtor para validação de formulários\n     * @param {string} form\n     * @param {FormNotificationType} type\n     */\n    constructor(\n        public form: string, \n        public type: FormNotificationType) {\n    }\n\n}\n\nexport { FormNotificationType, FormNotification }\n","import { FormNotification, FormNotificationType } from \"./form-notification.type\";\n\n/**\n * Class modelo para validação de campos de formulários\n * @class\n */\nexport class FieldFormNotification extends FormNotification {\n\n    /**\n     * Método construtor para validação de campos de formulários\n     * @param {string} form\n     * @param {string} field\n     * @param {string} message\n     */\n    constructor(\n        form: string,\n        public field: string,\n        public message: string) {\n        super(form, FormNotificationType.FIELD);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { FormNotification, FormNotificationType } from '../types/form-notification.type';\nimport { filter } from 'rxjs/operators';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n/**\n * Serviço ṕara tratar notificações em formulários\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationService {\n\n    /**\n     * @type {Subject<FormNotification>()}\n     */\n    formNotifications: Subject<FormNotification> =\n        new Subject<FormNotification>();\n\n    /**\n     * Método para criação de inscrição de campos presentes nos formulários\n     * @param {string} field\n     * @returns Observable<ResponseHandle>\n     */\n    notifications(form: String, field: String): Observable<FormNotification> {\n        return this.formNotifications.pipe(filter(\n            (violation: FormNotification) => {\n                return (!form || violation.form === form) && (violation.type === FormNotificationType.CLEAN || (\n                    violation instanceof FieldFormNotification &&\n                    violation.field === field))\n            }\n        ));\n    }\n\n    notify(notification: FormNotification) {\n        this.formNotifications.next(notification);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormNotificationService } from './form-notification.service';\nimport { ErrorProvider } from '../../error/providers/error.provider';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n/**\n * Provedor de error para criação de erros de notificação.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationErrorProvider implements ErrorProvider {\n\n    /**\n     * Método construtor\n     * @param {FormtNotificationService} formNotificationService\n     * @constructor\n     */\n    constructor(private formNotificationService: FormNotificationService) { }\n\n    /**\n     * Método responsável pela identificação de erros\n     * @public\n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse &&\n            error.headers.get('Content-Type') === 'application/problem+json' &&\n            error.error && (error.error.violations || error.error.fieldErrors);\n    }\n\n    /**\n     * Método para emissão de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        if (error.error.violations) {\n            this.violation(error.url, error.error.violations);\n        }\n        if (error.error.fieldErrors) {\n            this.violation(error.url, error.error.fieldErrors);\n        }\n    }\n\n    /**\n     * Método iteração de violações e emissão de erros\n     * @param values\n     */\n    violation(form: string, values: ({ field: string, message: string })[]) {\n        values.forEach(violation =>\n            this.formNotificationService.notify(\n                new FieldFormNotification(\n                    form, violation.field, violation.message)));\n    }\n\n}\n","import { FormNotification, FormNotificationType } from \"./form-notification.type\";\n\n/**\n * Class modelo para limpeza de validação de formulários\n * @class\n */\nexport class CleanFormNotification extends FormNotification {\n\n    /**\n     * Método construtor para limpeza de validação de formulários\n     * @param {string} form\n     */\n    constructor(form: string) {\n        super(form, FormNotificationType.CLEAN);\n    }\n\n}\n","import {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest\n} from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\n\nimport { FormNotificationService } from \"../services/form-notification.service\";\nimport { CleanFormNotification } from \"../types/clean-form-notification.type\";\n\n/**\n * Implementação de classe para interceptar e tratar requisições http/https\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationInterceptor implements HttpInterceptor {\n\n    /**\n     * Método construtor\n     * @constructor\n     * @param {AbstractAuthentication} auth\n     */\n    constructor(private formNotificationService: FormNotificationService) {}\n\n    /**\n     * Método responsável por interceptar requisições HTTP/HTTPS\n     * @public\n     * @param {HttpRequest<any>} request\n     * @param {HttpHandler} next\n     * @returns Observable<HttpEvent<any>>\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        this.formNotificationService\n            .notify(new CleanFormNotification(request.url));\n        return next.handle(request);\n    }\n\n}\n","import { FormNotificationService } from '../services/form-notification.service';\nimport { Directive, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { FormNotification } from '../types/form-notification.type';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n@Directive({\n    selector: 'form-notification-component-superclass'\n})\nexport class FormNotificationComponentSuperclass implements OnInit, OnDestroy {\n\n    private subscription: Subscription;\n\n    @Input() name: String;\n\n    @Input() form: String;\n\n    message: String;\n\n    /**\n     * Método construtor responsável por carregar o serviço de validação\n     * @param formNotificationService\n     */\n    constructor(protected formNotificationService: FormNotificationService) {}\n\n    /**\n     * Método Inicial para subscrição no endpoint responsável por validar o formulário\n     */\n    ngOnInit(): void {\n        this.subscription = this.formNotificationService\n            .notifications(this.form, this.name)\n            .subscribe((notification: FormNotification) => {\n                if (notification instanceof FieldFormNotification) {\n                    this.message = notification.message;\n                } else {\n                    this.message = null;\n                }\n            });\n    }\n\n    /**\n     * Método responsável por realizar a saida das subscrições do endpont de validação\n     */\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FormNotificationErrorProvider } from './services/form-notification-error-provider.service';\nimport { FormNotificationService } from './services/form-notification.service';\nimport { ErrorProvider } from '../error/providers/error.provider';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormNotificationInterceptor } from './interceptor/form-notification.interceptor';\nimport { FormNotificationComponentSuperclass } from './components/form-notification-superclass.component';\n\n/**\n * Módulo para adicionar funcionalidade de notificação de erros de formulários.\n * @module\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [ FormNotificationComponentSuperclass ],\n    exports: [ FormNotificationComponentSuperclass],\n    providers: [\n        FormNotificationService,\n        {\n            provide: ErrorProvider,\n            useClass: FormNotificationErrorProvider,\n            multi: true,\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: FormNotificationInterceptor,\n            multi: true,\n        },\n    ],\n})\nexport class FormNotificationBaseModule { }\n","import { ApplicationProblemType } from \"../../error/types/application-problem.type\";\nimport { FormNotification } from \"../types/form-notification.type\";\n\n/**\n * Class provider para definição básica de tratamento de erros de formulários\n * @class\n */\nexport class FormNotificationProvider extends ApplicationProblemType {\n\n    /**\n     * Metodo construtor para validação de formulários\n     * @param {string} type\n     * @param {string} title\n     * @param {string} detail\n     * @param {Number} status\n     * @param {string} instance\n     * @param {Array<string>} stacktrace\n     * @param {ApplicationProblemType} cause\n     * @param {FormViolation} violations\n     */\n    constructor(\n        type: string | 'about:blank',\n        title: string,\n        detail?: string,\n        status?: Number,\n        instance?: string,\n        stacktrace?: Array<string>,\n        cause?: ApplicationProblemType,\n        public violations?: FormNotification[]) {\n        super(type, title, detail, status, instance, stacktrace, cause);\n    }\n\n}\n","import { Injectable, OnDestroy } from \"@angular/core\";\nimport { Observable, Subject, Subscription, Unsubscribable } from \"rxjs\";\n\n/**\n * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.\n *\n * ```ts\n * @Injectable()\n * // or @Component() (also consider DirectiveSuperclass)\n * // or @Directive() (also consider DirectiveSuperclass)\n * // or @Pipe()\n * class MyThing extends InjectableSuperclass {\n *   constructor(somethingObservable: Observable) {\n *     super();\n *     this.subscribeTo(somethingObservable);\n *   }\n *\n *   ngOnDestroy() {\n *     // if you override ngOnDestroy, be sure to call this too\n *     super.ngOnDestroy();\n *   }\n * }\n * ```\n */\n@Injectable()\nexport abstract class InjectableSuperclass implements Unsubscribable, OnDestroy {\n\n    private subscriptions = new Subscription();\n\n    destruction$: Observable<undefined>;\n\n    private destructionSubject = new Subject<undefined>();\n\n    constructor() {\n        this.destruction$ = this.destructionSubject.asObservable();\n    }\n\n    subscribeTo<T>(\n        observable: Observable<T>,\n        next?: (value: T) => void,\n        error?: (error: any) => void,\n        complete?: () => void,\n    ) {\n        this.subscriptions.add(\n            observable.subscribe(\n                this.bind(next),\n                this.bind(error),\n                this.bind(complete),\n            ),\n        );\n    }\n\n    unsubscribe() {\n        this.subscriptions.unsubscribe();\n        this.subscriptions = new Subscription();\n    }\n\n    private bind(fn?: (val?: any) => void) {\n        return fn?.bind(this);\n    }\n\n    ngOnDestroy() {\n        this.unsubscribe();\n        this.destructionSubject.next();\n        this.destructionSubject.complete();\n    }\n}\n","import { ChangeDetectorRef, Injector, SimpleChanges, Directive } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { filter, map, startWith } from \"rxjs/operators\";\nimport { InjectableSuperclass } from \"./injectable-superclass\";\n\n/**\n * Extend this when creating a directive (including a component, which is a kind of directive) to gain access to the helpers demonstrated below. **Warning:** You _must_ include a constructor in your subclass.\n *\n * ```ts\n * @Component({\n *   selector: \"s-color-text\",\n *   template: `\n *     <span [style.background]=\"color\">{{ color }}</span>\n *   `,\n *   // note that `bindToInstance()` works even with OnPush change detection\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n *  class ColorTextComponent extends DirectiveSuperclass {\n *   @Input() prefix?: string;\n *   @Input() prefix2?: string;\n *   color!: string;\n *\n *   // Even if you don't need extra arguments injector, you must still include a constructor. It is required for angular to provide `Injector`.\n *   constructor(\n *     @Inject(\"color$\") color$: Observable<string>,\n *     injector: Injector,\n *   ) {\n *     super(injector);\n *\n *     // combine everything to calculate `color` and keep it up to date\n *     this.bindToInstance(\n *       \"color\",\n *       combineLatest(\n *         this.getInput$(\"prefix\"),\n *         this.getInput$(\"prefix2\"),\n *         color$,\n *       ).pipe(map((parts) => parts.filter((p) => p).join(\"\"))),\n *     );\n *   }\n * }\n * ```\n */\n@Directive()\nexport abstract class DirectiveSuperclass extends InjectableSuperclass {\n\n    /**\n     *  Emits the set of `@Input()` property names that change during each call to `ngOnChanges()`.\n     */\n    inputChanges$ = new Subject<any>();\n\n    protected changeDetectorRef: ChangeDetectorRef;\n\n    constructor(injector: Injector) {\n        super();\n        this.changeDetectorRef = injector.get(ChangeDetectorRef);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.inputChanges$.next(\n            new Set(Object.getOwnPropertyNames(changes) as Array<keyof this>),\n        );\n    }\n\n    /**\n     * @return an observable of the values for one of this directive's `@Input()` properties\n     */\n    getInput$<K extends keyof this>(key: K): Observable<this[K]> {\n        return this.inputChanges$.pipe(\n            filter((keys) => keys.has(key)),\n            startWith(undefined),\n            map(() => this[key]),\n        );\n    }\n\n    /**\n     * Binds an observable to one of this directive's instance variables. When the observable emits the instance variable will be updated, and change detection will be triggered to propagate any changes. Use this an an alternative to repeating `| async` multiple times in your template.\n     */\n    bindToInstance<K extends keyof this>(key: K, value$: Observable<this[K]>) {\n        this.subscribeTo(value$, (value) => {\n            this[key] = value;\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n}\n","import { Type, Directive } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { DirectiveSuperclass } from \"./directive-superclass\";\n\nexport function noop() { };\n\n/**\n * Use in the `providers` of a component that implements `ControlValueAccessor` to reduce some boilerplate.\n *\n * ```ts\n * @Component({ providers: [provideValueAccessor(MyFormControl)] }\n * class MyFormControl extends BaseFormControl {\n *   // ...\n * }\n * ```\n */\nexport function provideValueAccessor(type: Type<any>) {\n    return {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: type,\n        multi: true,\n    };\n}\n\n/**\n * Extend this when creating a form control to reduce some boilerplate. **Warning:** You _must_ include a constructor in your subclass.\n *\n * This example allows 2-way binding to a number via `[(ngModel)]`, `[formControl]`, or any other technique that leverages the `ControlValueAccessor` interface.\n * ```ts\n * @Component({\n *   template: `\n *     <button (click)=\"increment()\" [disabled]=\"isDisabled\">{{ counter }}</button>\n *   `,\n *   providers: [provideValueAccessor(CounterComponent)],\n * })\n * class CounterComponent extends FormControlSuperclass<number> {\n *   counter = 0;\n *\n *   // This looks unnecessary, but is required for Angular to provide `Injector`\n *   constructor(injector: Injector) {\n *     super(injector);\n *   }\n *\n *   handleIncomingValue(value: number) {\n *     this.counter = value;\n *   }\n *\n *   increment() {\n *     this.emitOutgoingValue(++this.counter);\n *     this.onTouched();\n *   }\n * }\n * ```\n */\n@Directive()\nexport abstract class FormControlSuperclass<T> extends DirectiveSuperclass\n    implements ControlValueAccessor {\n    /** Call this to emit a new value when it changes. */\n    emitOutgoingValue: (value: T) => void = noop;\n\n    /** Call this to \"commit\" a change, traditionally done e.g. on blur. */\n    onTouched = noop;\n\n    /** You can bind to this in your template as needed. */\n    isDisabled = false;\n\n    /** Implement this to handle a new value coming in from outside. */\n    abstract handleIncomingValue(value: T): void;\n\n    /** Called as angular propagates value changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    writeValue(value: T) {\n        this.handleIncomingValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n    registerOnChange(fn: (value: T) => void) {\n        this.emitOutgoingValue = fn;\n    }\n\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n    registerOnTouched(fn: VoidFunction) {\n        this.onTouched = fn;\n    }\n\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    setDisabledState(isDisabled: boolean) {\n        this.isDisabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { Injector, Directive } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { FormControlSuperclass } from \"./form-control-superclass\";\n\n@Directive()\nexport abstract class WrappedFormControlSuperclass<OuterType, InnerType = OuterType> extends FormControlSuperclass<OuterType> {\n\n    formControl = new FormControl();\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.subscribeTo(this.formControl.valueChanges, (value) => {\n            this.emitOutgoingValue(this.innerToOuter(value));\n        });\n        this.formControl.markAsTouched = () => {\n            this.onTouched();\n        };\n    }\n\n    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    handleIncomingValue(value: OuterType) {\n        this.formControl.setValue(this.outerToInner(value), { emitEvent: false });\n    }\n\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    setDisabledState(isDisabled: boolean) {\n        if (isDisabled) {\n            this.formControl.disable({ emitEvent: false });\n        } else {\n            this.formControl.enable({ emitEvent: false });\n        }\n        super.setDisabledState(this.isDisabled);\n    }\n\n    /** Override this to modify a value coming from the outside to the format needed within this component. */\n    protected outerToInner(value: OuterType): InnerType {\n        return (value as any) as InnerType;\n    }\n\n    /** Override this to modify a value coming from within this component to the format expected on the outside. */\n    protected innerToOuter(value: InnerType): OuterType {\n        return (value as any) as OuterType;\n    }\n}\n","/*\n * Public API Surface of angular-base\n */\n\nexport * from './lib/block-ui/block-ui.interceptor';\nexport * from './lib/block-ui/block-ui.service';\nexport * from './lib/block-ui/block-ui.status';\n\nexport * from './lib/version-tag/version-tag.component';\nexport * from './lib/version-tag/version-tag.module';\n\nexport * from './lib/security/security.module';\nexport * from './lib/security/config/auth-config';\nexport * from './lib/security/authentication/authorization/authorization.service';\nexport * from './lib/security/authentication/authorization/authorization';\nexport * from './lib/security/authentication/authorization/has-role.directive';\nexport * from './lib/security/authentication/auth.guard';\nexport * from './lib/security/authentication/authentication.service';\nexport * from './lib/security/authentication/authentication';\nexport * from './lib/security/authentication/login-success.component';\nexport * from './lib/security/authentication/logout.directive';\nexport * from './lib/security/authentication/not-authenticated-error-provider.service';\nexport * from './lib/security/authentication/user.directive';\nexport * from './lib/security/authentication/user';\nexport * from './lib/security/authentication/hide-while-login.component';\nexport * from './lib/security/authentication/security.bootstrap';\nexport * from './lib/security/token/jwt-auth.interceptor';\nexport * from './lib/security/token/jwt-token.service';\nexport * from './lib/security/token/token';\n\nexport * from './lib/accessibility/accessibility.module';\nexport * from './lib/accessibility/accessibility.service';\n\nexport * from './lib/common-mask/common-mask.module';\nexport * from './lib/common-mask/common-mask.service';\n\nexport * from './lib/error/error.module';\nexport * from './lib/error/error.service';\n\nexport * from './lib/error/providers/error.provider';\nexport * from './lib/error/providers/notification.provider';\n\nexport * from './lib/error/services/notification.service';\nexport * from './lib/error/services/http-generic-error.service';\nexport * from './lib/error/services/http-application-problem-error.service';\nexport * from './lib/error/services/error-stack.service';\nexport * from './lib/error/services/error-stack-provider.service';\n\nexport * from './lib/error/types/http-generic-error.type';\nexport * from './lib/error/types/application-problem.type';\nexport * from './lib/error/types/named-error.type';\n\nexport * from './lib/pipes/cep.pipe';\nexport * from './lib/pipes/cpf.pipe';\nexport * from './lib/pipes/cnpj.pipe';\nexport * from './lib/pipes/pipe.regex';\nexport * from './lib/pipes/pipe.limit';\nexport * from './lib/pipes/pipe.module';\n\nexport * from './lib/clipboard/clipboard.directive';\nexport * from './lib/clipboard/clipboard.service';\nexport * from './lib/clipboard/clipboard.module';\n\nexport * from './lib/directives/directives.module';\nexport * from './lib/directives/only-numbers.directive';\nexport * from './lib/directives/unmask.directive';\n\nexport * from './lib/form-notification/form-notification.module';\nexport * from './lib/form-notification/components/form-notification-superclass.component';\nexport * from './lib/form-notification/providers/form-notification.provider';\nexport * from './lib/form-notification/services/form-notification-error-provider.service';\nexport * from './lib/form-notification/services/form-notification.service';\nexport * from './lib/form-notification/types/field-form-notification.type';\nexport * from './lib/form-notification/types/clean-form-notification.type';\nexport * from './lib/form-notification/types/form-notification.type';\n\nexport * from './lib/form-utils/wrapped-form-control-superclass';\nexport * from \"./lib/form-utils/form-control-superclass\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {FormNotificationInterceptor as ɵc} from './lib/form-notification/interceptor/form-notification.interceptor';\nexport {DirectiveSuperclass as ɵd} from './lib/form-utils/directive-superclass';\nexport {InjectableSuperclass as ɵe} from './lib/form-utils/injectable-superclass';\nexport {VERSIONTAG_CONFIG as ɵb,VersionTagConfig as ɵa} from './lib/version-tag/version-tag.config';"]},"metadata":{},"sourceType":"module"}