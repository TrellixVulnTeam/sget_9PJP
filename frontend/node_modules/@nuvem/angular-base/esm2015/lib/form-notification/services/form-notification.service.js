import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { FormNotificationType } from '../types/form-notification.type';
import { filter } from 'rxjs/operators';
import { FieldFormNotification } from '../types/field-form-notification.type';
import * as i0 from "@angular/core";
/**
 * Serviço ṕara tratar notificações em formulários
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export class FormNotificationService {
    constructor() {
        /**
         * @type {Subject<FormNotification>()}
         */
        this.formNotifications = new Subject();
    }
    /**
     * Método para criação de inscrição de campos presentes nos formulários
     * @param {string} field
     * @returns Observable<ResponseHandle>
     */
    notifications(form, field) {
        return this.formNotifications.pipe(filter((violation) => {
            return (!form || violation.form === form) && (violation.type === FormNotificationType.CLEAN || (violation instanceof FieldFormNotification &&
                violation.field === field));
        }));
    }
    notify(notification) {
        this.formNotifications.next(notification);
    }
}
FormNotificationService.ɵfac = function FormNotificationService_Factory(t) { return new (t || FormNotificationService)(); };
FormNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormNotificationService_Factory() { return new FormNotificationService(); }, token: FormNotificationService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvZm9ybS1ub3RpZmljYXRpb24vc2VydmljZXMvZm9ybS1ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFvQixvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsTUFBTSxPQUFPLHVCQUF1QjtBQUNwQyxJQUpBO0FBQ0UsUUFJRTtBQUNKO0FBQ0ksV0FBRztBQUNQLFFBQUksc0JBQWlCLEdBQ2IsSUFBSSxPQUFPLEVBQW9CLENBQUM7QUFDeEMsS0FvQkM7QUFDRCxJQXBCSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLGFBQWEsQ0FBQyxJQUFZLEVBQUUsS0FBYTtBQUFJLFFBQ3pDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQ3JDLENBQUMsU0FBMkIsRUFBRSxFQUFFO0FBQzVDLFlBQWdCLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxvQkFBb0IsQ0FBQyxLQUFLLElBQUksQ0FDM0YsU0FBUyxZQUFZLHFCQUFxQjtBQUM5RCxnQkFBb0IsU0FBUyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQy9DLFFBQVksQ0FBQyxDQUNKLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0ksTUFBTSxDQUFDLFlBQThCO0FBQ3pDLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNsRCxJQUFJLENBQUM7QUFDTDs0SEFDQTtBQUFDO21EQTlCQSxVQUFVLFNBQUMsa0JBQ1IsVUFBVSxFQUFFLE1BQU07RUFDckI7Ozs7Z0RBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZvcm1Ob3RpZmljYXRpb24sIEZvcm1Ob3RpZmljYXRpb25UeXBlIH0gZnJvbSAnLi4vdHlwZXMvZm9ybS1ub3RpZmljYXRpb24udHlwZSc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGaWVsZEZvcm1Ob3RpZmljYXRpb24gfSBmcm9tICcuLi90eXBlcy9maWVsZC1mb3JtLW5vdGlmaWNhdGlvbi50eXBlJztcblxuLyoqXG4gKiBTZXJ2acOnbyDhuZVhcmEgdHJhdGFyIG5vdGlmaWNhw6fDtWVzIGVtIGZvcm11bMOhcmlvc1xuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtTdWJqZWN0PEZvcm1Ob3RpZmljYXRpb24+KCl9XG4gICAgICovXG4gICAgZm9ybU5vdGlmaWNhdGlvbnM6IFN1YmplY3Q8Rm9ybU5vdGlmaWNhdGlvbj4gPVxuICAgICAgICBuZXcgU3ViamVjdDxGb3JtTm90aWZpY2F0aW9uPigpO1xuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBwYXJhIGNyaWHDp8OjbyBkZSBpbnNjcmnDp8OjbyBkZSBjYW1wb3MgcHJlc2VudGVzIG5vcyBmb3JtdWzDoXJpb3NcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGRcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPFJlc3BvbnNlSGFuZGxlPlxuICAgICAqL1xuICAgIG5vdGlmaWNhdGlvbnMoZm9ybTogU3RyaW5nLCBmaWVsZDogU3RyaW5nKTogT2JzZXJ2YWJsZTxGb3JtTm90aWZpY2F0aW9uPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1Ob3RpZmljYXRpb25zLnBpcGUoZmlsdGVyKFxuICAgICAgICAgICAgKHZpb2xhdGlvbjogRm9ybU5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoIWZvcm0gfHwgdmlvbGF0aW9uLmZvcm0gPT09IGZvcm0pICYmICh2aW9sYXRpb24udHlwZSA9PT0gRm9ybU5vdGlmaWNhdGlvblR5cGUuQ0xFQU4gfHwgKFxuICAgICAgICAgICAgICAgICAgICB2aW9sYXRpb24gaW5zdGFuY2VvZiBGaWVsZEZvcm1Ob3RpZmljYXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgdmlvbGF0aW9uLmZpZWxkID09PSBmaWVsZCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIG5vdGlmeShub3RpZmljYXRpb246IEZvcm1Ob3RpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy5mb3JtTm90aWZpY2F0aW9ucy5uZXh0KG5vdGlmaWNhdGlvbik7XG4gICAgfVxuXG59XG4iXX0=