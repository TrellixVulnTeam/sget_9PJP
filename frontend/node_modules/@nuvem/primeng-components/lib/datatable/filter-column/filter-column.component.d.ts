import { EventEmitter, OnChanges, SimpleChange, OnInit } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class FilterColumn implements OnChanges, OnInit {
    listaOriginal: any[];
    lista: any[];
    field: string;
    header: string;
    labelDefaultImplementation: boolean;
    labelDefaultName: string;
    updateFiltro: boolean;
    filterType: string;
    tableType: string;
    customFilterOptions: Object;
    template: string;
    outputEvent: EventEmitter<any>;
    private debouncer;
    filtro: any;
    resultado: any[];
    private listaFields;
    constructor();
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    checkChanges(changes: {
        [propName: string]: SimpleChange;
    }, property: any): boolean;
    /**
     * Método para propagar o evento de filtragem
     * @param event filtro
     */
    filtrar(event: any): void;
    /**
     * Preenche os itens que serão exibidos no multiselect, removendo duplicidades
     */
    preencherFields(): void;
    /**
     *
     * @param field Verifica duplicidade de fields nas opções de seleção
     */
    verificarSeExisteField(field: any): boolean;
    /**
     * Caso o usuaŕio não forneça uma lista para o options, será criada uma lista com
     * os valores presentes na tabela
     */
    getCustomFilterOptions(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FilterColumn, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FilterColumn, "basis-filter-column", never, { "listaOriginal": "listaOriginal"; "lista": "lista"; "labelDefaultImplementation": "labelDefaultImplementation"; "updateFiltro": "updateFiltro"; "customFilterOptions": "customFilterOptions"; "template": "template"; "field": "field"; "header": "header"; "labelDefaultName": "labelDefaultName"; "filterType": "filterType"; "tableType": "tableType"; }, { "outputEvent": "outputEvent"; }, never, never>;
}

//# sourceMappingURL=filter-column.component.d.ts.map