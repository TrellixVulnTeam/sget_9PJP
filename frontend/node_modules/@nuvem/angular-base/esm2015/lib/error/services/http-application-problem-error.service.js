import { Injectable, NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { ApplicationProblemType } from '../types/application-problem.type';
import * as i0 from "@angular/core";
import * as i1 from "../providers/notification.provider";
/**
 * Serviço HttpApplicationProblemErrorService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../providers/notification.provider';
export class HttpApplicationProblemErrorService {
    /**
     * Metodo construtor responsável por injetar serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    constructor(notification, ngZone) {
        this.notification = notification;
        this.ngZone = ngZone;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    shouldHandle(error) {
        return error instanceof HttpErrorResponse &&
            error.headers.get('Content-Type') === 'application/problem+json' &&
            error.error;
    }
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error) {
        this.ngZone.run(() => {
            this.notification.addErrorProblem(new ApplicationProblemType(error.error.type, error.error.title, error.error.detail, error.error.status, error.error.instance));
        });
    }
}
HttpApplicationProblemErrorService.ɵfac = function HttpApplicationProblemErrorService_Factory(t) { return new (t || HttpApplicationProblemErrorService)(ɵngcc0.ɵɵinject(ɵngcc1.NotificationProvider), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
HttpApplicationProblemErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpApplicationProblemErrorService_Factory() { return new HttpApplicationProblemErrorService(i0.ɵɵinject(i1.NotificationProvider), i0.ɵɵinject(i0.NgZone)); }, token: HttpApplicationProblemErrorService, providedIn: "root" });
HttpApplicationProblemErrorService.ctorParameters = () => [
    { type: NotificationProvider },
    { type: NgZone }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpApplicationProblemErrorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NotificationProvider }, { type: ɵngcc0.NgZone }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1hcHBsaWNhdGlvbi1wcm9ibGVtLWVycm9yLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2Vycm9yL3NlcnZpY2VzL2h0dHAtYXBwbGljYXRpb24tcHJvYmxlbS1lcnJvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNFO0FBQXFDO0FBRXJDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUlILE1BQU0sT0FBTyxrQ0FBa0M7QUFBRyxJQUU5QztBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFlBQW9CLFlBQWtDLEVBQVUsTUFBYztBQUFJLFFBQTlELGlCQUFZLEdBQVosWUFBWSxDQUFzQjtBQUFDLFFBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLElBQUcsQ0FBQztBQUN2RixJQUNJO0FBQ0o7QUFDQTtBQUFlO0FBQ2dDO0FBQ3hCLE9BQ2hCO0FBQ1AsSUFBSSxZQUFZLENBQUMsS0FBZ0M7QUFBSSxRQUM3QyxPQUFPLEtBQUssWUFBWSxpQkFBaUI7QUFBSSxZQUN6QyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSywwQkFBMEI7QUFBSSxZQUNwRSxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQ3hCLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQWU7QUFDd0I7QUFDbkIsT0FDYjtBQUNQLElBQUksTUFBTSxDQUFDLEtBQXdCO0FBQUksUUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO0FBQUcsWUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQzdCLElBQUksc0JBQXNCLENBQ3RCLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUNoQixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFDakIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ2xCLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDM0MsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMO3lPQUFDO0FBQUMscVRBdENHO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBR3NELFlBWHpELG9CQUFvQjtHQVN6QixVQUFVLEVBQUUsZkFUaUIsWUFGWixNQUFNO0FBV0wsQUFYUTtZQVk3Qjs7Ozs7OEdBWitCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvbm90aWZpY2F0aW9uLnByb3ZpZGVyJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUgfSBmcm9tICcuLi90eXBlcy9hcHBsaWNhdGlvbi1wcm9ibGVtLnR5cGUnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5cbi8qKlxuICogU2VydmnDp28gSHR0cEFwcGxpY2F0aW9uUHJvYmxlbUVycm9yU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEh0dHBBcHBsaWNhdGlvblByb2JsZW1FcnJvclNlcnZpY2UgaW1wbGVtZW50cyBFcnJvclByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciBzZXJ2acOnbyBOb3RpZmljYXRpb25Qcm92aWRlclxuICAgICAqIEBwYXJhbSB7Tm90aWZpY2F0aW9uUHJvdmlkZXJ9IG5vdGlmaWNhdGlvblxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25Qcm92aWRlciwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgaWRlbnRpZmljYcOnw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpYyBcbiAgICAgKiBAcGFyYW0ge0Vycm9yIHwgSHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIHNob3VsZEhhbmRsZShlcnJvcjogRXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZSk6IEJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSAmJiBcbiAgICAgICAgICAgIGVycm9yLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSA9PT0gJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbicgJiYgXG4gICAgICAgICAgICBlcnJvci5lcnJvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGVsYSBhZGnDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwdWJsaWMgXG4gICAgICogQHBhcmFtIHtIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgaGFuZGxlKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IHZvaWQge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4geyBcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uLmFkZEVycm9yUHJvYmxlbShcbiAgICAgICAgICAgICAgICBuZXcgQXBwbGljYXRpb25Qcm9ibGVtVHlwZShcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmVycm9yLmRldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3Iuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBlcnJvci5lcnJvci5pbnN0YW5jZSkpO1xuICAgICAgICB9KTtcbiAgICB9XG59Il19