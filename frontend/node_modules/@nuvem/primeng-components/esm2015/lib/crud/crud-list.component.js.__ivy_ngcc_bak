import { Component, Inject, Input, Output, EventEmitter, ViewChild, ContentChildren } from "@angular/core";
import { CRUD_SERVICE } from "./crud-service.service";
import { Router, ActivatedRoute } from "@angular/router";
import { Column } from '../datatable/p-column.directive';
import { ConfirmationService } from 'primeng/api';
export class CrudListComponent {
    constructor(crudService, confirmationService, route, router) {
        this.crudService = crudService;
        this.confirmationService = confirmationService;
        this.route = route;
        this.router = router;
        this.action = "findAll";
        this.findLabel = "Pesquisar";
        this.disableSave = false;
        this.disableEdit = false;
        this.disableView = false;
        this.disableDelete = false;
        this.find = new EventEmitter();
    }
    ngOnInit() {
        if (this.service) {
            this.crudService = this.service;
        }
        if (!this.url) {
            this.url = this.crudService.uri;
        }
    }
    datatableClick(event) {
        if (event.selection) {
            switch (event.button) {
                case "edit":
                case "view":
                    this.router.navigate([`../${event.button}`, event.selection.id], { relativeTo: this.route });
                    break;
                case "delete":
                    this.confirmationService.confirm({
                        message: 'VocÃª tem certeza que deseja excluir o registro?',
                        accept: () => this.crudService.delete(event.selection.id)
                            .subscribe(() => this.datatable.filter())
                    });
                    break;
            }
        }
    }
    findAll(event) {
        if (this.find.observers.length) {
            this.find.emit(this.form.value);
        }
        else {
            this.datatable.filterParams = {};
            Object.keys(this.form.value).forEach(element => {
                let value = this.form.value[element];
                if (value) {
                    this.datatable.filterParams[element] =
                        value instanceof Date ? JSON.stringify(value).replace(/"/g, "") : value;
                }
            });
            this.datatable.filter();
        }
    }
    ngAfterContentInit() {
        const datatableNgAfterContentInit = this.datatable.pDatatableComponent.ngAfterContentInit;
        this.datatable.pDatatableComponent.ngAfterContentInit = () => {
            this.datatable.pDatatableComponent.columns = this.columns.toArray();
            datatableNgAfterContentInit.call(this.datatable.pDatatableComponent);
        };
    }
    ngAfterViewInit() {
        for (let i in this.datatableExtraParams) {
            this.datatable[i] = this.datatableExtraParams[i];
        }
    }
}
CrudListComponent.decorators = [
    { type: Component, args: [{
                selector: 'nCrudList',
                template: "<nForm [form]=\"form\" (save)=\"findAll($event)\" [saveLabel]=\"findLabel\">\n    <ng-content select=\"[nForm]\"></ng-content>\n    <button nButton pButton type=\"button\" [routerLink]=\"['../save']\" label=\"Novo\" *ngIf=\"!disableSave\" class=\"p-mr-2 p-mb-2\"></button>\n</nForm>\n<basis-datatable #datatable \n    [value]=\"result\" \n    (buttonClick)=\"datatableClick($event)\" \n    [url]=\"url\"\n    [disableEdit]=\"disableEdit\" \n    [disableView]=\"disableView\"     \n    [disableDelete]=\"disableDelete\">\n    <ng-content select=\"p-column\"></ng-content>\n</basis-datatable>\n\n<p-confirmDialog header=\"Confirmar Exclus\u00E3o\" acceptLabel=\"Sim\" rejectLabel=\"N\u00E3o\" icon=\"pi pi-exclamation-triangle\"></p-confirmDialog>\n"
            },] }
];
CrudListComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CRUD_SERVICE,] }] },
    { type: ConfirmationService },
    { type: ActivatedRoute },
    { type: Router }
];
CrudListComponent.propDecorators = {
    form: [{ type: Input }],
    action: [{ type: Input }],
    findLabel: [{ type: Input }],
    service: [{ type: Input }],
    url: [{ type: Input }],
    disableSave: [{ type: Input }],
    disableEdit: [{ type: Input }],
    disableView: [{ type: Input }],
    disableDelete: [{ type: Input }],
    datatableExtraParams: [{ type: Input }],
    find: [{ type: Output }],
    datatable: [{ type: ViewChild, args: ['datatable', { static: true },] }],
    columns: [{ type: ContentChildren, args: [Column,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J1ZC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3ByaW1lbmctY29tcG9uZW50cy9zcmMvbGliL2NydWQvY3J1ZC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFDdEQsU0FBUyxFQUFFLGVBQWUsRUFDN0IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFlLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBSXpELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQU9sRCxNQUFNLE9BQU8saUJBQWlCO0lBOEIxQixZQUVXLFdBQWtDLEVBQ2pDLG1CQUF3QyxFQUN4QyxLQUFxQixFQUNyQixNQUFjO1FBSGYsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO1FBQ2pDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQS9CakIsV0FBTSxHQUFXLFNBQVMsQ0FBQztRQUUzQixjQUFTLEdBQVcsV0FBVyxDQUFDO1FBTWhDLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXBCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXBCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXBCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBSXJCLFNBQUksR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQWN2RCxDQUFDO0lBRU4sUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZ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U0FDcEQ7SUFDTCxDQUFDOzs7WUFqR0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxXQUFXO2dCQUNyQix1dkJBQXlDO2FBQzVDOzs7NENBZ0NRLE1BQU0sU0FBQyxZQUFZO1lBdENuQixtQkFBbUI7WUFMWCxjQUFjO1lBQXRCLE1BQU07OzttQkFjVixLQUFLO3FCQUVMLEtBQUs7d0JBRUwsS0FBSztzQkFFTCxLQUFLO2tCQUVMLEtBQUs7MEJBRUwsS0FBSzswQkFFTCxLQUFLOzBCQUVMLEtBQUs7NEJBRUwsS0FBSzttQ0FFTCxLQUFLO21CQUVMLE1BQU07d0JBRU4sU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7c0JBRXZDLGVBQWUsU0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsIE9uSW5pdCwgSW5qZWN0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEFmdGVyQ29udGVudEluaXQsXG4gICAgVmlld0NoaWxkLCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCwgQ2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQ3J1ZFNlcnZpY2UsIENSVURfU0VSVklDRSB9IGZyb20gXCIuL2NydWQtc2VydmljZS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnLi4vZGF0YXRhYmxlL3AtY29sdW1uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEYXRhdGFibGVDb21wb25lbnQgfSBmcm9tICcuLi9kYXRhdGFibGUvZGF0YXRhYmxlLmNvbXBvbmVudCdcbmltcG9ydCB7IERhdGF0YWJsZUNsaWNrRXZlbnQgfSBmcm9tICcuLi9kYXRhdGFibGUvZGF0YXRhYmxlLWNsaWNrLWV2ZW50J1xuXG5pbXBvcnQgeyBDb25maXJtYXRpb25TZXJ2aWNlIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgVXJsIH0gZnJvbSAndXJsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduQ3J1ZExpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jcnVkLWxpc3QuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENydWRMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcblxuICAgIEBJbnB1dCgpIGZvcm06IEZvcm1Hcm91cDtcblxuICAgIEBJbnB1dCgpIGFjdGlvbjogc3RyaW5nID0gXCJmaW5kQWxsXCI7XG5cbiAgICBASW5wdXQoKSBmaW5kTGFiZWw6IHN0cmluZyA9IFwiUGVzcXVpc2FyXCI7XG5cbiAgICBASW5wdXQoKSBzZXJ2aWNlOiBDcnVkU2VydmljZTxhbnksIGFueT47XG5cbiAgICBASW5wdXQoKSB1cmw6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIGRpc2FibGVTYXZlID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKSBkaXNhYmxlRWRpdCA9IGZhbHNlO1xuXG4gICAgQElucHV0KCkgZGlzYWJsZVZpZXcgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpIGRpc2FibGVEZWxldGUgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpIGRhdGF0YWJsZUV4dHJhUGFyYW1zOiBhbnk7XG5cbiAgICBAT3V0cHV0KCkgZmluZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIEBWaWV3Q2hpbGQoJ2RhdGF0YWJsZScsIHsgc3RhdGljOiB0cnVlIH0pIGRhdGF0YWJsZTogRGF0YXRhYmxlQ29tcG9uZW50O1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihDb2x1bW4pIGNvbHVtbnM6IFF1ZXJ5TGlzdDxDb2x1bW4+O1xuXG4gICAgcmVzdWx0OiBhbnlbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KENSVURfU0VSVklDRSlcbiAgICAgICAgcHVibGljIGNydWRTZXJ2aWNlOiBDcnVkU2VydmljZTxhbnksIGFueT4sXG4gICAgICAgIHByaXZhdGUgY29uZmlybWF0aW9uU2VydmljZTogQ29uZmlybWF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgICApIHsgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLmNydWRTZXJ2aWNlID0gdGhpcy5zZXJ2aWNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy51cmwpIHtcbiAgICAgICAgICAgIHRoaXMudXJsID0gdGhpcy5jcnVkU2VydmljZS51cmlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRhdGF0YWJsZUNsaWNrKGV2ZW50OiBEYXRhdGFibGVDbGlja0V2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5zZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuYnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImVkaXRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwidmlld1wiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYC4uLyR7ZXZlbnQuYnV0dG9ufWAsIGV2ZW50LnNlbGVjdGlvbi5pZF0sIHsgcmVsYXRpdmVUbzogdGhpcy5yb3V0ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpcm1hdGlvblNlcnZpY2UuY29uZmlybSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVm9jw6ogdGVtIGNlcnRlemEgcXVlIGRlc2VqYSBleGNsdWlyIG8gcmVnaXN0cm8/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdDogKCkgPT4gdGhpcy5jcnVkU2VydmljZS5kZWxldGUoZXZlbnQuc2VsZWN0aW9uLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5kYXRhdGFibGUuZmlsdGVyKCkpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmRBbGwoZXZlbnQ6IGFueSkge1xuICAgICAgICBpZiAodGhpcy5maW5kLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZmluZC5lbWl0KHRoaXMuZm9ybS52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhdGF0YWJsZS5maWx0ZXJQYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZm9ybS52YWx1ZSkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmZvcm0udmFsdWVbZWxlbWVudF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXRhYmxlLmZpbHRlclBhcmFtc1tlbGVtZW50XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXCIvZywgXCJcIikgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YXRhYmxlLmZpbHRlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICBjb25zdCBkYXRhdGFibGVOZ0FmdGVyQ29udGVudEluaXQgPSB0aGlzLmRhdGF0YWJsZS5wRGF0YXRhYmxlQ29tcG9uZW50Lm5nQWZ0ZXJDb250ZW50SW5pdDtcbiAgICAgICAgdGhpcy5kYXRhdGFibGUucERhdGF0YWJsZUNvbXBvbmVudC5uZ0FmdGVyQ29udGVudEluaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGF0YWJsZS5wRGF0YXRhYmxlQ29tcG9uZW50LmNvbHVtbnMgPSB0aGlzLmNvbHVtbnMudG9BcnJheSgpO1xuICAgICAgICAgICAgZGF0YXRhYmxlTmdBZnRlckNvbnRlbnRJbml0LmNhbGwodGhpcy5kYXRhdGFibGUucERhdGF0YWJsZUNvbXBvbmVudCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZGF0YXRhYmxlRXh0cmFQYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YXRhYmxlW2ldID0gdGhpcy5kYXRhdGFibGVFeHRyYVBhcmFtc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19