{"version":3,"file":"ngx-webstorage-service.umd.js","sources":["ngx-webstorage-service/src/proxy-storage.service.ts","ngx-webstorage-service/src/base-storage.service.ts","node_modules/tslib/tslib.es6.js","ngx-webstorage-service/src/storage-transcoders.ts","ngx-webstorage-service/src/in-memory-storage.service.ts","ngx-webstorage-service/src/web-storage.service.ts","ngx-webstorage-service/src/storage-providers.ts","ngx-webstorage-service/src/storage-service.module.ts"],"names":["tslib_1.__extends","InjectionToken","NgModule"],"mappings":"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","sourcesContent":["import { StorageService } from './storage.service';\nimport { StorageTranscoder, StorageDecoder, StorageEncoder } from './storage-transcoder';\n\n/**\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\n * different default transcoder.\n */\nexport class ProxyStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\n     * read and writes are delegated to given storage service.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     * @param subject           Storage service which should handle to actual storage of data.\n     */\n    constructor(\n        private readonly defaultTranscoder: StorageTranscoder<T>,\n        private readonly subject: StorageService\n    ) { }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.subject.has(key);\n    }\n\n    /*\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        return this.subject.get(key, decoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.subject.set(key, value, encoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.subject.remove(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.subject.clear();\n    }\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this.subject);\n    }\n}\n","import { StorageService } from './storage.service';\nimport { StorageDecoder, StorageEncoder, StorageTranscoder } from './storage-transcoder';\nimport { ProxyStorageService } from './proxy-storage.service';\n\n/**\n * Base implementation for storage services.\n */\nexport abstract class BaseStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     */\n    constructor(private readonly defaultTranscoder: StorageTranscoder<T>) {\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public abstract has(key: string): boolean;\n\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        const value = this.getItem(key);\n\n        return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public abstract remove(key: string): void;\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public abstract clear(): void;\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this);\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected abstract getItem(key: string): string | undefined;\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected abstract setItem(key: string, value: string): void;\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { StorageTranscoder } from './storage-transcoder';\n\n/** Transcoder that encodes values as JSON strings. */\nexport class JsonStorageTranscoder implements StorageTranscoder<any> {\n\n    public encode(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    public decode(value: string): any {\n        try {\n            return JSON.parse(value);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n}\n\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nexport class StringStorageTranscoder implements StorageTranscoder<string> {\n    public encode(value: string): string {\n        return value;\n    }\n\n    public decode(value: string): string {\n        return value;\n    }\n}\n\n/** Transcoder that encodes/decodes `boolean` values. */\nexport class BooleanStorageTranscoder implements StorageTranscoder<boolean> {\n    public encode(value: boolean): string {\n        return value.toString();\n    }\n\n    public decode(value: string): boolean | undefined {\n        if (value === 'true') {\n            return true;\n        }\n        if (value === 'false') {\n            return false;\n        }\n\n        return undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `number` values. */\nexport class NumberStorageTranscoder implements StorageTranscoder<number> {\n    public encode(value: number): string {\n        return value.toString();\n    }\n\n    public decode(value: string): number | undefined {\n        const parsedNumber = Number(value);\n\n        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to ISO strings. */\nexport class DateIsoStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.toISOString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = Date.parse(value);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to epoch timestamps. */\nexport class DateEpochStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.valueOf().toString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = parseInt(value, 10);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** A set of storage transcoders. */\nexport const StorageTranscoders = {\n    /** Transcoder that encodes values as JSON strings. */\n    JSON: new JsonStorageTranscoder() as StorageTranscoder<any>,\n\n    /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n    STRING: new StringStorageTranscoder() as StorageTranscoder<string>,\n\n    /** Transcoder that encodes/decodes `boolean` values. */\n    BOOLEAN: new BooleanStorageTranscoder() as StorageTranscoder<boolean>,\n\n    /** Transcoder that encodes/decodes `number` values. */\n    NUMBER: new NumberStorageTranscoder() as StorageTranscoder<number>,\n\n    /** Transcoder that encodes/decodes `Date` values into ISO strings. */\n    DATE_ISO_STRING: new DateIsoStorageTranscoder() as StorageTranscoder<Date>,\n\n    /** Transcoder that encodes/decodes `Date` values into epoch timestamps. */\n    DATE_EPOCH_TIME: new DateEpochStorageTranscoder() as StorageTranscoder<Date>\n};\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nexport class InMemoryStorageService extends BaseStorageService<any> {\n\n    /** A map that serves as the underlying backing storage for this service. */\n    private readonly storage: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Creates a new `InMemoryStorageService` instance.\n     */\n    constructor() {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.delete(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        if (!this.storage.has(key)) {\n            return undefined;\n        }\n\n        return this.storage.get(key)!;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        this.storage.set(key, value);\n    }\n\n}\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nexport class WebStorageService extends BaseStorageService<any> {\n\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    constructor(private readonly storage: Storage) {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.getItem(key) !== null;\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.removeItem(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        const value = this.storage.getItem(key);\n\n        return value !== null ? value : undefined;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        return this.storage.setItem(key, value);\n    }\n\n}\n\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param   storage Storage object which is to be tested for availability.\n * @returns         `true` if the specified storage can be used, `false` if not.\n */\nexport function isStorageAvailable(storage: Storage): boolean {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n\n    // Check if the storage can actually be accessed.\n    try {\n        const now = Date.now();\n        const testItemKey = `storage-test-entry-${now}`;\n        const testItemValue = `storage-test-value-${now}`;\n        storage.setItem(testItemKey, testItemValue);\n        const retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n\n        return retrievedItemValue === testItemValue;\n    } catch (error) {\n        return false;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { InMemoryStorageService } from './in-memory-storage.service';\nimport { StorageService } from './storage.service';\nimport { isStorageAvailable, WebStorageService } from './web-storage.service';\n\nexport function sessionStorageFactory(): StorageService {\n    try {\n        if (typeof sessionStorage as any !== 'undefined' && isStorageAvailable(sessionStorage)) {\n            return new WebStorageService(sessionStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the session storage service. */\nexport const SESSION_STORAGE = new InjectionToken<StorageService>(\n    'SESSION_STORAGE',\n    { providedIn: 'root', factory: sessionStorageFactory }\n);\n\nexport function localStorageFactory(): StorageService {\n    try {\n        if (typeof localStorage as any !== 'undefined' && isStorageAvailable(localStorage)) {\n            return new WebStorageService(localStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the local storage service. */\nexport const LOCAL_STORAGE = new InjectionToken<StorageService>(\n    'LOCAL_STORAGE',\n    { providedIn: 'root', factory: localStorageFactory }\n);\n","import { NgModule } from '@angular/core';\n\n/**\n * @deprecated You no longer need to import the `StorageServiceModule`, since the `SESSION_STORAGE` and `LOCAL_STORAGE` injection tokens are\n * now 'self providing' in the root injector.\n */\n@NgModule()\nexport class StorageServiceModule {\n\n}\n"]}