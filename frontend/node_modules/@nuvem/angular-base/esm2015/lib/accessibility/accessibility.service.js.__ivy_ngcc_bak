import { Injectable, RendererFactory2 } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * AccessbilityService Serviço de acessibilidade, este serviço prove recursos de contraste
 * de tela e controle do tamanho da fonte apresentadas na tela.
 * @class
 */
export class AccessbilityService {
    constructor(rendererFactory) {
        /**
         * Propriedade que define tamanho da fonte
         * @type {number}
         */
        this.fontSize = 1.0;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * Medoto para habilitar contraste
     * @public
     * @returns void
     */
    enableHighContrast() {
        this.renderer.addClass(document.body, 'contraste');
    }
    /**
     * Metodo para desabilitar contraste
     * @public
     * @returns void
     */
    disableHighContrast() {
        this.renderer.removeClass(document.body, 'contraste');
    }
    /**
     * Metodo utilizado para aumentar o tamnho da fonte apresentada no display
     * @public
     * @returns void
     */
    increaseFontSize() {
        this.fontSize += 0.1;
        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');
    }
    /**
     * Metodo utilizado para diminuir o tamnho da fonte apresentada no display
     * @public
     * @returns void
     */
    decreaseFontSize() {
        this.fontSize -= 0.1;
        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');
    }
    addAccessibilityIcons() {
        const elements = document.querySelector('.p-button-icon-left, p-button-icon-righ');
        if (elements) {
            this.renderer.setStyle(elements, 'aria-hidden', true);
        }
    }
    addAccessibilityMessages(msg) {
        let type = 'polite';
        if (msg.severity.toLowerCase() !== 'custom' && msg.severity.toLowerCase() !== 'success') {
            type = 'assertive';
        }
        this.renderer.setStyle(document.querySelector('p-toast, p-growl'), 'aria-live', type);
    }
}
AccessbilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AccessbilityService_Factory() { return new AccessbilityService(i0.ɵɵinject(i0.RendererFactory2)); }, token: AccessbilityService, providedIn: "root" });
AccessbilityService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AccessbilityService.ctorParameters = () => [
    { type: RendererFactory2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzaWJpbGl0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvYWNjZXNzaWJpbGl0eS9hY2Nlc3NpYmlsaXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFeEU7Ozs7R0FJRztBQUlILE1BQU0sT0FBTyxtQkFBbUI7SUFJNUIsWUFBWSxlQUFpQztRQUk3Qzs7O1dBR0c7UUFDSyxhQUFRLEdBQVcsR0FBRyxDQUFDO1FBUDNCLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQVFEOzs7O09BSUc7SUFDSCxrQkFBa0I7UUFDZCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsbUJBQW1CO1FBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGdCQUFnQjtRQUNaLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGdCQUFnQjtRQUNaLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMseUNBQXlDLENBQUMsQ0FBQztRQUVuRixJQUFJLFFBQVEsRUFBRTtZQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekQ7SUFDTCxDQUFDO0lBRUQsd0JBQXdCLENBQUMsR0FBdUI7UUFDNUMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ3BCLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxTQUFTLEVBQUU7WUFDckYsSUFBSSxHQUFHLFdBQVcsQ0FBQztTQUN0QjtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUYsQ0FBQzs7OztZQXRFSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQVQrQixnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIFJlbmRlcmVyRmFjdG9yeTIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBY2Nlc3NiaWxpdHlTZXJ2aWNlIFNlcnZpw6dvIGRlIGFjZXNzaWJpbGlkYWRlLCBlc3RlIHNlcnZpw6dvIHByb3ZlIHJlY3Vyc29zIGRlIGNvbnRyYXN0ZVxuICogZGUgdGVsYSBlIGNvbnRyb2xlIGRvIHRhbWFuaG8gZGEgZm9udGUgYXByZXNlbnRhZGFzIG5hIHRlbGEuXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQWNjZXNzYmlsaXR5U2VydmljZSB7XG5cbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcblxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5Mikge1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIHF1ZSBkZWZpbmUgdGFtYW5obyBkYSBmb250ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgcHJpdmF0ZSBmb250U2l6ZTogbnVtYmVyID0gMS4wO1xuXG4gICAgLyoqXG4gICAgICogTWVkb3RvIHBhcmEgaGFiaWxpdGFyIGNvbnRyYXN0ZVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgZW5hYmxlSGlnaENvbnRyYXN0KCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGRvY3VtZW50LmJvZHksICdjb250cmFzdGUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcGFyYSBkZXNhYmlsaXRhciBjb250cmFzdGVcbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGRpc2FibGVIaWdoQ29udHJhc3QoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ2NvbnRyYXN0ZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyB1dGlsaXphZG8gcGFyYSBhdW1lbnRhciBvIHRhbW5obyBkYSBmb250ZSBhcHJlc2VudGFkYSBubyBkaXNwbGF5XG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBpbmNyZWFzZUZvbnRTaXplKCkge1xuICAgICAgICB0aGlzLmZvbnRTaXplICs9IDAuMTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYubGF5b3V0LXdyYXBwZXInKSwgJ2ZvbnQtc2l6ZScsIHRoaXMuZm9udFNpemUgKyAnZW0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gdXRpbGl6YWRvIHBhcmEgZGltaW51aXIgbyB0YW1uaG8gZGEgZm9udGUgYXByZXNlbnRhZGEgbm8gZGlzcGxheVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgZGVjcmVhc2VGb250U2l6ZSgpIHtcbiAgICAgICAgdGhpcy5mb250U2l6ZSAtPSAwLjE7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmxheW91dC13cmFwcGVyJyksICdmb250LXNpemUnLCB0aGlzLmZvbnRTaXplICsgJ2VtJyk7XG4gICAgfVxuXG4gICAgYWRkQWNjZXNzaWJpbGl0eUljb25zKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wLWJ1dHRvbi1pY29uLWxlZnQsIHAtYnV0dG9uLWljb24tcmlnaCcpO1xuXG4gICAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShlbGVtZW50cywgJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRBY2Nlc3NpYmlsaXR5TWVzc2FnZXMobXNnOiB7c2V2ZXJpdHk6IHN0cmluZ30pIHtcbiAgICAgICAgbGV0IHR5cGUgPSAncG9saXRlJztcbiAgICAgICAgaWYgKG1zZy5zZXZlcml0eS50b0xvd2VyQ2FzZSgpICE9PSAnY3VzdG9tJyAmJiBtc2cuc2V2ZXJpdHkudG9Mb3dlckNhc2UoKSAhPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICB0eXBlID0gJ2Fzc2VydGl2ZSc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3AtdG9hc3QsIHAtZ3Jvd2wnKSwgJ2FyaWEtbGl2ZScsIHR5cGUpO1xuICAgIH1cblxufVxuIl19