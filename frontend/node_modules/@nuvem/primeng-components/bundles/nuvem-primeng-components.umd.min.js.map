{"version":3,"sources":["../../../projects/primeng-components/src/lib/datatable/datatable.service.ts","../../../projects/primeng-components/src/lib/datatable/dataprovider-factory.ts","../../../projects/primeng-components/src/lib/datatable/server-dataprovider.ts","../../../projects/primeng-components/src/lib/datatable/memory-dataprovider.ts","../../../projects/primeng-components/src/lib/datatable/datatable-button.component.ts","../../../projects/primeng-components/src/lib/datatable/datatable-click-event.ts","../../../projects/primeng-components/src/lib/datatable/p-column.directive.ts","../../../projects/primeng-components/src/lib/datatable/datatable.component.ts","../../../projects/primeng-components/src/lib/extra-button/datatable-splitbutton.component.ts","../../../projects/primeng-components/src/lib/extra-button/datatable-splitbutton.module.ts","../../../projects/primeng-components/src/lib/datatable/filter-column/filter-column.component.ts","../../../projects/primeng-components/src/lib/datatable/filter-column/filter-column.module.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/primeng-components/src/lib/page-notification/page-notification.service.ts","../../../projects/primeng-components/src/lib/datatable/show-column/show-column.component.ts","../../../projects/primeng-components/src/lib/datatable/show-column/show-column.module.ts","../../../projects/primeng-components/src/lib/datatable/action-button/action-button.component.ts","../../../projects/primeng-components/src/lib/datatable/datatable.module.ts","../../../projects/primeng-components/src/lib/block-ui/block-ui.component.ts","../../../projects/primeng-components/src/lib/block-ui/block-ui.module.ts","../../../projects/primeng-components/src/lib/page-notification/page-notification.component.ts","../../../projects/primeng-components/src/lib/page-notification/page-notification.module.ts","../../../projects/primeng-components/src/lib/form-notification/form-notification.component.ts","../../../projects/primeng-components/src/lib/form-notification/form-notification.module.ts","../../../projects/primeng-components/src/lib/error-stack/error-stack.component.ts","../../../projects/primeng-components/src/lib/error-stack/error-stack.module.ts","../../../projects/primeng-components/src/lib/crud/crud-form.component.ts","../../../projects/primeng-components/src/lib/crud/crud-service.service.ts","../../../projects/primeng-components/src/lib/crud/crud-list.component.ts","../../../projects/primeng-components/src/lib/crud/crud-resolve.guard.ts","../../../projects/primeng-components/src/lib/crud/success-message-handler.interceptor.ts","../../../projects/primeng-components/src/lib/crud/crud-service-nuvem.service.ts","../../../projects/primeng-components/src/lib/crud/components/field.component.ts","../../../projects/primeng-components/src/lib/crud/components/input-text/input-text.component.ts","../../../projects/primeng-components/src/lib/crud/components/calendar/calendar-locale.ts","../../../projects/primeng-components/src/lib/crud/components/calendar/calendar.component.ts","../../../projects/primeng-components/src/lib/crud/components/text-area/text-area.component.ts","../../../projects/primeng-components/src/lib/crud/components/dropdown/dropdown.component.ts","../../../projects/primeng-components/src/lib/crud/components/input-mask/input-mask.component.ts","../../../projects/primeng-components/src/lib/crud/components/check/check.component.ts","../../../projects/primeng-components/src/lib/crud/form.component.ts","../../../projects/primeng-components/src/lib/crud/components/validation-message/validation-message.component.ts","../../../projects/primeng-components/src/lib/crud/components/auto-complete/auto-complete.component.ts","../../../projects/primeng-components/src/lib/crud/components/auto-complete/auto-complete-custom.component.ts","../../../projects/primeng-components/src/lib/crud/components/auto-complete/auto-complete-item.component.ts","../../../projects/primeng-components/src/lib/crud/components/auto-complete-multiple/auto-complete-multiple.component.ts","../../../projects/primeng-components/src/lib/crud/components/check/check.pipe.ts","../../../projects/primeng-components/src/lib/crud/crud.module.ts","../../../projects/primeng-components/src/lib/breadcrumb/breadcrumb.service.ts","../../../projects/primeng-components/src/lib/breadcrumb/breadcrumb.component.ts","../../../projects/primeng-components/src/lib/menu/menu.service.ts","../../../projects/primeng-components/src/lib/breadcrumb/breadcrumb.module.ts","../../../projects/primeng-components/src/lib/menu/menu.component.ts","../../../projects/primeng-components/src/lib/menu/submenu.component.ts","../../../projects/primeng-components/src/lib/menu/menu.module.ts","../../../projects/primeng-components/src/lib/crud/crud-route-builder.ts"],"names":["DatatableService","http","this","prototype","search","event","url","rows","orderInSort","query","page","undefined","first","Math","floor","order","sortOrder","params","HttpParams","set","toString","sortField","Object","keys","forEach","key","get","observe","Injectable","args","providedIn","HttpClient","DataProviderType","ServerDataProvider","datatableService","component","_this","pDatatableComponent","onLazyLoad","subscribe","lazy","currentLazyLoadEvent","load","retrieveAndSaveQuery","startedLoading","emit","toPromise","then","response","treatLoadResponse","finishedLoading","error","data","body","paginationParameters","treatLoadResponseWithPaginationParameters","treatLoadResponseWithoutPaginationParameters","contentIndex","totalIndex","totalElementsIndex","value","totalRecords","length","headers","has","parseInt","totalElements","content","oldQuery","_query","currentQuery","doRetrieveAndSaveQuery","resetToFirstPageIfQueryChanged","reset","MemoryDataProvider","prop","matchMode","Array","filter","globalFilterFields","_filter","DataProviderFactory","create","type","Server","Memory","DatatableButtonComponent","allowMultipleSelection","disabled","click","EventEmitter","onClick","stopPropagation","Component","selector","template","Input","Output","button","selection","Column","filterType","exportable","resizable","sortFunction","ngAfterContentInit","templates","item","getType","headerTemplate","bodyTemplate","footerTemplate","filterTemplate","editorTemplate","inputTemplate","outputTemplate","Directive","ContentChildren","PrimeTemplate","ContentChild","TemplateRef","DatatableComponent","changeDetectorRef","dataProviderFactory","authorizationService","isShowGlobalFilter","isShowFilterRow","filterParams","footerMsg","showPaginationFooter","disableEdit","disableView","disableDelete","selectionMode","enableButtonsScroll","emptyMessage","verticalButtons","defaultButtons","enableScroll","disableLoadingBlockUI","filterOnColumn","filterSelectOptions","updateFilterColumn","customFilterOptions","buttonClick","onRowSelected","showHorizontalButtonsHeader","blockContent","visibleColumns","showVisibleColumnsControl","dataKey","onRowEditEvent","clonedRowData","errorMessage","editingRow","defineProperty","showGlobalFilter","ShowFilterRow","ngOnInit","dataProvider","subscribeToLoadingEvents","initRowsPerPageOptionsIfPresent","defineIfShouldShowHorizontalButtonsHeader","updateOnValueChange","map","push","originalEmptyMessage","onStartedLoading","onFinishedLoading","rowsPerPageOptions","horizontalButtonsHeader","ngAfterViewInit","setExtraParams","columns","setAllColumnsVisible","detectChanges","i","extraParams","extraButtons","name","DatatableClickEvent","selectedRow","resetSelectedRow","onSelectChange","isArray","updateMultipleButtonsStatus","hasMultipleSelection","refresh","paginationFooterText","msg","registros","currentFirstIndex","currentLastIndex","replace","checkRolesToButton","checkUseButtons","hasRole","Error","getOwnPropertyNames","filterColumn","column","filters","values","val","assign","col","field","visibleColumnCheck","some","updateVisibleColumns","onRowEditInitEvent","rowData","onRowEditSaveEvent","resetEditingMode","onRowEditCancelEvent","index","id","editButtons","srcElement","closest","querySelector","style","opacity","backgroundColor","display","editarLinhaOver","editarLinhaOut","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","Authorization","ViewChild","DataTable","static","DatatableSplitbuttonComponent","NgModule","imports","SplitButtonModule","declarations","providers","exports","schemas","CUSTOM_ELEMENTS_SCHEMA","FilterColumn","listaOriginal","lista","labelDefaultImplementation","updateFiltro","outputEvent","debouncer","Subject","resultado","listaFields","pipe","debounceTime","tableType","ngOnChanges","changes","checkChanges","preencherFields","property","previousValue","currentValue","filtrar","next","filtro","pi","row","label","verificarSeExisteField","getCustomFilterOptions","hasOwnProperty","CommonModule","MultiSelectModule","ButtonModule","CheckboxModule","DropdownModule","FormsModule","ReactiveFormsModule","InputTextModule","extendStatics","d","b","setPrototypeOf","__proto__","p","call","__extends","TypeError","String","__","constructor","__read","o","n","m","Symbol","iterator","r","e","ar","done","__spread","arguments","concat","PageNotificationService","messageService","_super","successSeverity","infoSeverity","warnSeverity","errorSeverity","createMsg","updateMsg","deleteMsg","addCreateMsg","title","addSuccessMessage","message","addMsg","severity","add","summary","detail","addUpdateMsg","addDeleteMsg","addInfoMessage","addWarnMessage","addErrorMessage","addErrorProblem","problem","NotificationProvider","MessageService","ShowColumn","pageNotificationService","options","lastValue","header","mostrarColunas","ActionButtonComponent","action","TooltipModule","TableModule","BlockUIModule","ProgressSpinnerModule","DatatableSplitbuttonModule","HttpClientModule","PaginatorModule","FilterColumnModule","ShowColumnModule","provide","useClass","deps","BlockUiComponent","service","status","subscription","loaderStatus","blockui","ngOnDestroy","unsubscribe","isBlocked","show","hide","BlockUiService","HTTP_INTERCEPTORS","BlockUiInterceptor","multi","duration","ToastModule","PageNotificationComponent","useExisting","FormNotificationComponent","FormNotificationComponentSuperclass","FormNotificationBaseModule","ErrorStackComponent","errorStack","errors","errorSubscription","ErrorStackService","ClipboardModule","ErrorProvider","ErrorStackProviderService","CrudFormComponent","route","disableSave","listRoute","paramMap","form","patchValue","disable","enable","ActivatedRoute","CRUD_SERVICE","InjectionToken","CrudListComponent","crudService","confirmationService","router","findLabel","find","uri","datatableClick","navigate","relativeTo","confirm","accept","delete","datatable","findAll","observers","element","Date","JSON","stringify","datatableNgAfterContentInit","toArray","datatableExtraParams","Inject","ConfirmationService","Router","CrudResolveGuard","resolve","STATUS","CrudServiceNuvem","save","entity","post","edit","put","append","SuccessMessageHandlerInterceptor","notification","intercept","req","handle","tap","HttpResponse","OK","CREATED","method","httpInterceptorProviders","FieldComponent","controlContainer","injector","onBlur","onSelect","onFocus","_name","formControlName","required","_label","setValidators","setRequired","input","ElementRef","nativeElement","setElementRefAttr","attr","setFormControlValidators","validator","control","formControl","onBlurEvent","onSelectEvent","onFocusEvent","WrappedFormControlSuperclass","ControlContainer","Injector","InputTextComponent","apply","min","max","minLength","maxLength","pattern","provideValueAccessor","CALENDAR_LOCALE","firstDayOfWeek","dayNames","dayNamesShort","dayNamesMin","monthNames","monthNamesShort","today","clear","dateFormat","weekHeader","CalendarComponent","maxDate","yearRange","monthNavigator","yearNavigator","locale","outerToInner","TextAreaComponent","autoResize","DropdownComponent","virtualScroll","itemSize","onChange","onChangeEvent","setValue","InputMaskComponent","CheckComponent","formNotificationService","notifications","FieldFormNotification","FormNotificationService","FormComponent","activatedRoute","saveLabel","submit","AutoCompleteComponent","selectItem","option","results","AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","AutoCompleteCustomComponent","el","renderer","cd","differs","AutoCompletePrimeng","Renderer2","IterableDiffers","AutoCompleteItem","highlightOptionChange","originalEvent","AutoCompleteMultipleComponent","obs_1","forkJoin","CheckPipe","transform","_i","Pipe","FormNotificationModule","InputTextareaModule","CalendarModule","AutoCompleteModule","DatatableModule","RouterModule","ConfirmDialogModule","ScrollingModule","InputMaskModule","RadioButtonModule","ValidationMessageComponent","BreadcrumbService","itemsSource","itemsHandler","asObservable","setItems","items","BreadcrumbComponent","breadcrumbService","messages","accessibilityService","highContrastEnabled","home","icon","routerLink","events","NavigationEnd","distinctUntilChanged","buildBreadCrumb","root","enableHighContrast","disableHighContrast","increaseFontSize","decreaseFontSize","messageObserver","addAccessibilityMessages","addAccessibilityIcons","breadcrumbs","routeConfig","breadcrumb","trim","path","split","pop","startsWith","snapshot","join","nextUrl","menuItem","charAt","toUpperCase","slice","newBreadcrumbs","firstChild","AccessbilityService","MenuOrientation","PrimengBreadcrumbModule","MenusService","menuSource","resetSource","menuSource$","resetSource$","layoutMode","STATIC","itens","isOverlay","OVERLAY","isHorizontal","HORIZONTAL","isSlim","SLIM","isStatic","changeToStaticMenu","changeToOverlayMenu","changeToHorizontalMenu","changeToSlimMenu","onMenuStateChange","menuService","SubMenuComponent","active","menuSourceSubscription","indexOf","menuResetSubscription","updateActiveStateFromRoute","isActive","rootMenuToggle","menuHoverActive","activeMenuByIndex","activeIndex","execCommand","command","hideMenu","resetMenu","overlayMenuActive","staticMenuMobileActive","itemClick","preventDefault","removeActiveInk","onMouseEnter","_reset","_parentActive","currentTarget","setTimeout","activeInk","classList","remove","className","RegExp","host","[class.layout-root-menuitem]","[class.active-menuitem]","animations","trigger","state","height","padding","transition","animate","MenuComponent","parent","list","children"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { LazyLoadEvent } from 'primeng/api';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n/**\n * Class DatatableService\n * @class\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DatatableService {\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {HttpClient} http\n     */\n    constructor(private http: HttpClient) {}\n\n    /**\n     * search method\n     * @param {LazyLoadEvent} event\n     * @param {String} url\n     * @param {number} rows\n     * @param {boolean} orderInSort\n     * @param {any} query\n     * @return Observable\n     */\n    search(event: LazyLoadEvent, url: string, rows: number, orderInSort: boolean, query?: any) {\n        let page = 0;\n        if (event !== undefined && event.first > 0) {\n            page = Math.floor(event.first / rows);\n        }\n\n        let order = event.sortOrder === 1 ? 'asc' : 'desc';\n        let params: HttpParams = new HttpParams()\n        .set('page', page.toString())\n        .set('size', rows.toString());\n\n        if (orderInSort) {\n            if (event.sortField !== undefined) {\n                params = params.set('sort', event.sortField + ',' + order);\n            }\n        } else {\n            if (event.sortField !== undefined) {\n                params = params\n                .set('sort', event.sortField)\n                .set('order', order);\n            }\n        }\n\n        if ('string' === typeof query) {\n            params = params.set('query', query);\n        }\n\n        if ('object' === typeof query) {\n            Object.keys(query).forEach(key => params = params.set(key, query[key]));\n        }\n        return this.http.get(`${url}?${params.toString()}`, { observe: 'response' });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { DatatableService } from './datatable.service';\nimport { DatatableComponent } from './datatable.component';\n\nimport { DataProvider } from './dataprovider';\nimport { ServerDataProvider } from './server-dataprovider';\nimport { MemoryDataProvider } from './memory-dataprovider';\n\n/**\n * Enum DataProviderType\n * @enum\n */\nexport enum DataProviderType {\n    Memory = 'memory',\n    Server = 'server'\n}\n/**\n * Class DataProviderFactory\n * @class\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DataProviderFactory {\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {DatatableService} datatableService\n     */\n    constructor(private datatableService: DatatableService) {}\n\n    /**\n     * create method\n     * @param {DataProviderType} type\n     * @param {DatatableComponent} component\n     * @public\n     * @returns DataProvider\n     */\n    public create(type: DataProviderType, component: DatatableComponent): DataProvider {\n        if (DataProviderType.Server === type) {\n            return new ServerDataProvider(this.datatableService, component);\n        }\n\n        if (DataProviderType.Memory === type) {\n            return new MemoryDataProvider(component);\n        }\n    }\n}\n","import { LazyLoadEvent } from 'primeng/api';\nimport { DatatableComponent } from './datatable.component';\nimport { DatatableService } from './datatable.service';\nimport { DataProvider } from './dataprovider';\n\n/**\n * Class ServerDataProvider\n * @class\n */\nexport class ServerDataProvider implements DataProvider {\n\n    /**\n     * currentLazyLoadEvent property\n     * @type {LazyLoadEvent}\n     */\n    currentLazyLoadEvent: LazyLoadEvent;\n\n    /**\n     * _query property\n     * @type {any}\n     */\n    private _query: any;\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {DatatableService} datatableService\n     * @param {DatatableComponent} component\n     */\n    constructor(private datatableService: DatatableService, private component: DatatableComponent) {\n        this.component.pDatatableComponent.onLazyLoad.subscribe((event: LazyLoadEvent) => this.onLazyLoad(event));\n        this.component.pDatatableComponent.lazy = true;\n    }\n\n    /**\n     * onLazyLoad method\n     * @param {LazyLoadEvent} onLazyLoad\n     * @returns void\n     */\n    onLazyLoad(event: LazyLoadEvent) {\n        this.currentLazyLoadEvent = event;\n        this.load();\n    }\n\n    /**\n     * load method\n     * @param {any} query\n     * @returns void\n     */\n    load(query?: any): void {\n        query = this.retrieveAndSaveQuery(query);\n        this.component.startedLoading.emit();\n        this.datatableService.search(\n            this.currentLazyLoadEvent,\n            this.component.url,\n            this.component.pDatatableComponent.rows,\n            this.component.orderInSort,\n            query)\n            .toPromise()\n            .then(\n            (response) => {\n                this.treatLoadResponse(response);\n                this.component.finishedLoading.emit();\n            },\n            (error) => {\n                this.component.finishedLoading.emit(error);\n            }\n        );\n    }\n\n    /**\n     * treatLoadResponse method\n     * @param {any} response\n     * @return void\n     */\n    private treatLoadResponse(response: any) {\n        const data = response.body;\n        if (this.component.paginationParameters) {\n            this.treatLoadResponseWithPaginationParameters(data);\n        } else {\n            this.treatLoadResponseWithoutPaginationParameters(response, data);\n        }\n    }\n\n    /**\n     * treatLoadResponseWithPaginationParameters method\n     * @param {any} data\n     * @returns void\n     */\n    private treatLoadResponseWithPaginationParameters(data) {\n        let contentIndex = this.component.paginationParameters.contentIndex;\n        let totalIndex = this.component.paginationParameters.totalElementsIndex;\n        this.component.value = (data[contentIndex])? data[contentIndex]: data;\n        this.component.pDatatableComponent.totalRecords = (data[totalIndex])? data[totalIndex]: this.component.value.length;\n    }\n\n    /**\n     * treatLoadResponseWithoutPaginationParameters method\n     * @param {any} response\n     * @param {any} data\n     * @returns void\n     */\n    private treatLoadResponseWithoutPaginationParameters(response: any, data) {\n        if (response.headers.has('x-total-count')) {\n            this.component.pDatatableComponent.totalRecords = parseInt(response.headers.get('x-total-count'), 10);\n            this.component.value = data;\n        } else {\n            this.component.pDatatableComponent.totalRecords = data.totalElements;\n            this.component.value = data.content;\n        }\n    }\n\n    /**\n     * retrieveAndSaveQuery method\n     * @param {any} query\n     * @returns any\n     */\n    private retrieveAndSaveQuery(query: any): any {\n        const oldQuery = this._query;\n        const currentQuery = this.doRetrieveAndSaveQuery(query);\n        this.resetToFirstPageIfQueryChanged(oldQuery, currentQuery);\n        return currentQuery;\n    }\n\n    /**\n     * doRetrieveAndSaveQuery method\n     * @param {any} query\n     * @returns any\n     */\n    private doRetrieveAndSaveQuery(query: any): any {\n        if ('object' === typeof query && query.value) {\n            this._query = query.value;\n        } else if (query) {\n            this._query = query;\n        }\n        return this._query;\n    }\n\n    /**\n     * resetToFirstPageIfQueryChanged method\n     * @param {any} oldQuery\n     * @param {any} currentQuery\n     * @returns void\n     */\n    private resetToFirstPageIfQueryChanged(oldQuery, currentQuery) {\n        if (oldQuery !== currentQuery) {\n            this.currentLazyLoadEvent.first = 0;\n            this.component.pDatatableComponent.first = 0;\n        }\n    }\n    /**\n     * reset method\n     * @returns void\n     */\n    reset() {\n        this._query = undefined;\n    }\n}\n","import { DataProvider } from './dataprovider';\nimport { DatatableComponent } from './datatable.component';\n\n/**\n * Class MemoryDataProvider\n * @class\n */\nexport class MemoryDataProvider implements DataProvider {\n\n    /**\n     * constructor method\n     * @param {DatatableComponent} component\n     * @constructor\n     */\n    constructor(private component: DatatableComponent) {}\n\n    /**\n     * load method\n     * @param {any} query\n     * @returns void\n     */\n    load(query ?: any): void {\n        this.component.pDatatableComponent.reset();\n        \n        for (let prop in query) {\n            let matchMode = 'contains';\n            if (query[prop] instanceof Array) {\n                matchMode = 'in';\n            }\n            this.component.pDatatableComponent.filter(\n                query[prop],\n                prop,\n                matchMode\n            );\n        }\n\n        this.component.pDatatableComponent.globalFilterFields = query;\n        this.component.pDatatableComponent._filter();\n    }\n\n    /**\n     * reset method\n     * @returns void\n     */\n    reset() {\n        this.component.pDatatableComponent.globalFilterFields = undefined;\n    }\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter\n} from '@angular/core';\n/**\n * Class DatatableButtonComponent\n * @class\n */\n@Component({\n    selector: 'basis-datatable-button',\n    templateUrl: './datatable-button.component.html'\n})\nexport class DatatableButtonComponent {\n\n    /**\n     * icon property\n     * @type {string}\n     */\n    @Input()\n    icon: string;\n\n    /**\n     * class property\n     * @type {string}\n     */\n    @Input()\n    class: string;\n\n    /**\n     * bTooltip property\n     * @type {string}\n     */\n    @Input()\n    bTooltip: string;\n\n    /**\n     * name property\n     * @type {string}\n     */\n    @Input()\n    name: string;\n\n    /**\n     * allowMultipleSelection property\n     * @type {boolean}\n     */\n    @Input()\n    allowMultipleSelection: boolean = true;\n\n    /**\n     * disabled property\n     * @type boolean\n     */\n    @Input()\n    disabled: boolean = false;\n\n    /**\n     * click property\n     * @type {EventEmitter<any>}\n     */\n    @Output()\n    click: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * onClick method\n     * @param {any} event\n     * @return void\n     */\n    onClick(event: any) {\n        this.click.emit(event);\n        event.stopPropagation();\n    }\n}\n","/**\n * Class DatatableClickEvent\n * @class\n */\nexport class DatatableClickEvent {\n    /**\n     * constructor method\n     * @constructor\n     * @param {string} button\n     * @param {any} selection\n     */\n    constructor(public button: string, public selection: any) {}\n}\n","import { Input, EventEmitter, QueryList, TemplateRef, AfterContentInit, Output, ContentChildren, ContentChild, Directive } from '@angular/core';\nimport { PrimeTemplate } from 'primeng/api';\n\n@Directive({\n    selector: 'p-column'\n})\nexport class Column implements AfterContentInit {\n\n    @Input() field: string;\n\n    @Input() colId: string;\n\n    @Input() sortField: string;\n\n    @Input() filterField: string;\n\n    @Input() header: string;\n\n    @Input() footer: string;\n\n    @Input() sortable: any;\n\n    @Input() editable: boolean;\n\n    @Input() filter: boolean;\n\n    @Input() filterMatchMode: string;\n\n    @Input() filterType: string = 'text';\n\n    @Input() excludeGlobalFilter: boolean;\n\n    @Input() rowspan: number;\n\n    @Input() colspan: number;\n\n    @Input() scope: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() exportable: boolean = true;\n\n    @Input() headerStyle: any;\n\n    @Input() headerStyleClass: string;\n\n    @Input() bodyStyle: any;\n\n    @Input() bodyStyleClass: string;\n\n    @Input() footerStyle: any;\n\n    @Input() footerStyleClass: string;\n\n    @Input() hidden: boolean;\n\n    @Input() expander: boolean;\n\n    @Input() selectionMode: string;\n\n    @Input() filterPlaceholder: string;\n\n    @Input() filterMaxlength: number;\n\n    @Input() frozen: boolean;\n\n    @Input() resizable: boolean = true;\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\n\n    public headerTemplate: TemplateRef<any>;\n\n    public bodyTemplate: TemplateRef<any>;\n\n    public footerTemplate: TemplateRef<any>;\n\n    public filterTemplate: TemplateRef<any>;\n\n    public editorTemplate: TemplateRef<any>;\n\n    public inputTemplate: TemplateRef<any>;\n\n    public outputTemplate: TemplateRef<any>;\n\n    ngAfterContentInit(): void {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                    break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n\n                case 'filter':\n                    this.filterTemplate = item.template;\n                    break;\n\n                case 'editor':\n                    this.editorTemplate = item.template;\n                    break;\n\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n\n                default:\n                    this.bodyTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n","import {\n    Component,\n    ViewChild,\n    Input,\n    Output,\n    ContentChildren,\n    QueryList,\n    ChangeDetectorRef,\n    AfterViewInit,\n    AfterContentInit,\n    OnInit,\n    EventEmitter,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Table as DataTable } from 'primeng/table';\nimport { DataProvider } from './dataprovider';\nimport { DataProviderFactory, DataProviderType } from './dataprovider-factory';\nimport { DatatableButtonComponent } from './datatable-button.component';\nimport { DatatableClickEvent } from './datatable-click-event';\nimport { DatatablePaginationParameters } from './datatable-pagination-parameters';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Authorization } from '@nuvem/angular-base';\nimport { Column } from './p-column.directive';\n\n/**\n * Class DatatableComponent\n * @class\n */\n@Component({\n    selector: 'basis-datatable',\n    templateUrl: './datatable.component.html',\n    styleUrls: ['./datatable.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class DatatableComponent\n    implements AfterViewInit, AfterContentInit, OnInit {\n    isShowGlobalFilter = false;\n    isShowFilterRow = false;\n\n    get showGlobalFilter(): boolean {\n        return this.isShowGlobalFilter;\n    }\n\n    set showGlobalFilter(showGlobalFilter: boolean) {\n        this.isShowGlobalFilter = showGlobalFilter;\n    }\n\n    get showFilterRow(): boolean {\n        return this.isShowFilterRow;\n    }\n\n    set showFilterRow(ShowFilterRow: boolean) {\n        this.isShowFilterRow = ShowFilterRow;\n    }\n\n    /**\n     * selectedRow property\n     * @type {any}\n     */\n    selectedRow: any;\n\n    /**\n     * dataProvider property\n     * @type {DataProvider}\n     */\n    dataProvider: DataProvider;\n\n    /**\n     * filterParams property\n     * @type {any}\n     */\n    filterParams: any = {};\n\n    /**\n     * footerMsg property\n     * @type {string}\n     */\n    footerMsg: string = '';\n\n    /**\n     * orderInSort property\n     * @type {boolean}\n     */\n    orderInSort: boolean = false;\n\n    /**\n     * title property\n     * @type {string}\n     */\n    @Input() title: string;\n\n    /**\n     * splitButton property\n     * @type {any}\n     */\n    @Input() splitButton: any;\n\n    /**\n     * value property\n     * @type {any}\n     */\n    @Input() value: any[] = [];\n\n    /**\n     * type property\n     * @type DataProviderType\n     */\n    @Input() type: DataProviderType = DataProviderType.Server;\n\n    /**\n     * rows property\n     * @type {number}\n     */\n    @Input() rows: number = 5;\n\n    /**\n     * rowsPerPageOptions property\n     * @type {number[]}\n     */\n    @Input() rowsPerPageOptions: number[];\n\n    /**\n     * url property\n     * @type {string}\n     */\n    @Input() url: string;\n\n    /**\n     * extraParams property\n     * @type {any}\n     */\n    @Input() extraParams: any;\n\n    /**\n     * paginationParameters property\n     * @type {DatatablePaginationParameters}\n     */\n    @Input() paginationParameters: DatatablePaginationParameters;\n\n    /**\n     * showPaginationFooter property\n     * @type {boolean}\n     */\n    @Input() showPaginationFooter = false;\n\n    /**\n     * disableEdit property\n     * @type {boolean}\n     */\n    @Input() disableEdit = false;\n\n    /**\n     * disableView property\n     * @type {boolean}\n     */\n    @Input() disableView = false;\n\n    /**\n     * disableDelete property\n     * @type {boolean}\n     */\n    @Input() disableDelete = false;\n\n    /**\n     * selectionMode property\n     * @type {string}\n     */\n    @Input() selectionMode = 'single';\n\n    /**\n     * enableButtonsScroll property\n     * @type {boolean}\n     */\n    @Input() enableButtonsScroll = false;\n\n    /**\n     * emptyMessage property\n     * @type {string}\n     */\n    @Input() emptyMessage = 'Nenhum registro encontrado.';\n\n    /**\n     * verticalButtons property\n     * @type {boolean}\n     */\n    @Input() verticalButtons = true;\n\n    /**\n     * defaultButtons property\n     * @type {boolean}\n     */\n    @Input() defaultButtons = true;\n\n    /**\n     * enableScroll property\n     * @type {boolean}\n     */\n    @Input() enableScroll = false;\n\n    /**\n     * scrollHeight property\n     * @type {string}\n     */\n    @Input() scrollHeight: string;\n\n    /**\n     * scrollWidth property\n     * @type {string}\n     */\n    @Input() scrollWidth: string;\n\n    /**\n     * rulesToHide property\n     * @type {any}\n     */\n    @Input() rulesToHide: any;\n\n    /**\n     * rulesToShowEdit property\n     * @type {any}\n     */\n    @Input() rulesToShowEdit: any;\n\n    /**\n     * rulesToShowDelete property\n     * @type {any}\n     */\n    @Input() rulesToShowDelete: any;\n\n    /**\n     * rulesToHideView property\n     * @type {any}\n     */\n    @Input() rulesToHideView: any;\n\n    /**\n     * rulesToHideEdit property\n     * @type {any}\n     */\n    @Input() rulesToHideEdit: any;\n\n    /**\n     * rulesToHideDelete property\n     * @type {any}\n     */\n    @Input() rulesToHideDelete: any;\n\n    /**\n     * horizontalButtonsHeader property\n     * @type {string}\n     */\n    horizontalButtonsHeader: string;\n\n    /**\n     * disableLoadingBlockUI property\n     * @type {boolean}\n     */\n    @Input() disableLoadingBlockUI = false;\n\n    /**\n     * rowStyleClass property\n     * @type {any}\n     */\n    @Input() rowStyleClass: any;\n\n    /**\n     * filterOnColumn property\n     */\n    @Input() filterOnColumn = false;\n\n    /**\n     * filterSelectOptions property\n     */\n    filterSelectOptions: any[] = [];\n\n    /**\n     * updateFiltroHistorico property\n     */\n    updateFilterColumn: boolean = false;\n\n    /**\n     * customFilterOptions property\n     */\n    @Input() customFilterOptions: Object = {};\n\n    /**\n     * buttonClick property\n     * @type {EventEmitter<any>}\n     */\n    @Output() buttonClick: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * pDatatableComponent property\n     * @type {Table}\n     */\n    @ViewChild(DataTable, { static: true }) pDatatableComponent: DataTable;\n\n    /**\n     * extraButtons property\n     * @type {QueryList<DatatableButtonComponent>}\n     */\n    @ContentChildren(DatatableButtonComponent) extraButtons: QueryList<DatatableButtonComponent>;\n\n    /**\n     * columns property\n     * @type {any[]}\n     */\n    @ContentChildren(Column) columns: Column[];\n\n    /**\n     * startedLoading property\n     * @type {EventEmitter<void>}\n     */\n    @Output() startedLoading: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * finishedLoading property\n     * @type {EventEmitter<HttpErrorResponse>}\n     */\n    @Output() finishedLoading: EventEmitter<HttpErrorResponse> = new EventEmitter<HttpErrorResponse>();\n\n    /**\n     * onRowSelected property\n     * @type {EventEmitter<any>}\n     */\n    @Output() onRowSelected: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * showHorizontalButtonsHeader property\n     * @type {boolean}\n     */\n    showHorizontalButtonsHeader = false;\n\n    /**\n     * blockContent\n     * @type {boolean}\n     */\n    blockContent = false;\n\n    /**\n     * visibleColumns property\n     * @type {Object}\n     */\n    visibleColumns: Object = {};\n\n    /**\n     * showVisibleColumnsControl property\n     * @type {boolean}\n     */\n    @Input() showVisibleColumnsControl: boolean = false;\n\n    /**\n     * editMode property\n     * @type {string}\n     */\n    @Input() editMode: string;\n\n    /**\n     * dataKey property\n     * Identificador único para cada registro da tabela\n     * @type {string}\n     */\n    @Input() dataKey: string = 'id';\n\n    /**\n     * onRowEditEvent property\n     * Evento disparado quando o usuário realiza ações de edição em uma linha da tabela\n     * @type {EventEmitter<void>}\n     */\n    @Output() onRowEditEvent: EventEmitter<any> = new EventEmitter<any>();\n\n    clonedRowData: { [s: string]: any } = {};\n\n    /**\n     * errorMessage property\n     * @type {string}\n     */\n    private errorMessage = 'Ocorreu um erro ao carregar os dados da tabela. Tente novamente.';\n\n    /**\n     * originalEmptyMessage property\n     * @type {string}\n     */\n    private originalEmptyMessage: string;\n\n    editingRow = false;\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {ChangeDetectorRef} changeDetectorRef\n     * @param {DataProviderFactory} dataProviderFactory\n     * @param {Authorization} authorizationService\n     */\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private dataProviderFactory: DataProviderFactory,\n        private authorizationService: Authorization\n    ) {}\n\n    /**\n     * ngOnInit method\n     * @returns void\n     */\n    ngOnInit() {\n        this.dataProvider = this.dataProviderFactory.create(this.type, this);\n        this.pDatatableComponent.rows = this.rows;\n        this.subscribeToLoadingEvents();\n        this.initRowsPerPageOptionsIfPresent();\n        this.defineIfShouldShowHorizontalButtonsHeader();\n        this.updateOnValueChange();\n\n        this.finishedLoading.subscribe(() => {\n            this.updateOnValueChange();\n        });\n    }\n\n    /**\n     * subscribeFromValueChange method\n     * @returns void\n     */\n    private updateOnValueChange() {\n        this.filterSelectOptions = [];\n        if (this.value) {\n            this.value.map((item: any) => {\n                this.filterSelectOptions.push(item);\n            });\n        }\n    }\n\n    /**\n     * subscribeToLoadingEvents method\n     * @returns void\n     */\n    private subscribeToLoadingEvents() {\n        if (!this.disableLoadingBlockUI) {\n            this.originalEmptyMessage = this.emptyMessage;\n            this.startedLoading.subscribe(() => this.onStartedLoading());\n            this.finishedLoading.subscribe(error =>\n                this.onFinishedLoading(error)\n            );\n        }\n    }\n\n    /**\n     * onStartedLoading method\n     * @returns void\n     */\n    private onStartedLoading() {\n        this.blockContent = true;\n        this.emptyMessage = this.originalEmptyMessage;\n    }\n    /**\n     * onFinishedLoading method\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    private onFinishedLoading(error: HttpErrorResponse) {\n        this.blockContent = false;\n        if (error) {\n            this.emptyMessage = this.errorMessage;\n        }\n    }\n\n    /**\n     * initRowsPerPageOptionsIfPresent method\n     * @returns void\n     */\n    private initRowsPerPageOptionsIfPresent() {\n        if (this.rowsPerPageOptions) {\n            this.pDatatableComponent.rowsPerPageOptions = this.rowsPerPageOptions;\n        }\n    }\n\n    /**\n     * defineIfShouldShowHorizontalButtonsHeader method\n     * @returns void\n     */\n    private defineIfShouldShowHorizontalButtonsHeader() {\n        if (this.horizontalButtonsHeader) {\n            this.showHorizontalButtonsHeader = true;\n        }\n    }\n\n    /**\n     * ngAfterViewInit method\n     * @returns void\n     */\n    ngAfterViewInit() {\n        this.setExtraParams();\n        this.pDatatableComponent.columns = this.columns;\n        this.pDatatableComponent.ngAfterContentInit();\n        this.setAllColumnsVisible();\n        this.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * setExtraParams method\n     * @returns void\n     */\n    private setExtraParams() {\n        for (let i in this.extraParams) {\n            this.pDatatableComponent[i] = this.extraParams[i];\n        }\n    }\n    /**\n     * ngAfterContentInit method\n     * @returns void\n     */\n    ngAfterContentInit() {\n        this.extraButtons.forEach(button => {\n            button.click.subscribe(event => {\n                this.onClick(button.name, event);\n            });\n        });\n    }\n\n    /**\n     * onClick method\n     * @param {string} button\n     * @param {any} event\n     * @return void\n     */\n    onClick(button: string, event: any) {\n        this.buttonClick.emit(\n            new DatatableClickEvent(button, this.selectedRow)\n        );\n        event.stopPropagation();\n        this.resetSelectedRow(button);\n    }\n\n    /**\n     * onSelectChange method\n     * @param {any} event\n     * @returns void\n     */\n    onSelectChange(event: any) {\n        this.onRowSelected.emit(this.selectedRow);\n        if (Array.isArray(this.selectedRow) && this.selectedRow.length > 1) {\n            this.updateMultipleButtonsStatus(true);\n        } else {\n            this.updateMultipleButtonsStatus(false);\n        }\n    }\n\n    /**\n     * updateMultipleButtonsStatus method\n     * @param {boolean} hasMultipleSelection\n     * @return void\n     */\n    private updateMultipleButtonsStatus(hasMultipleSelection: boolean) {\n        this.extraButtons.forEach(button => {\n            if (hasMultipleSelection && !button.allowMultipleSelection) {\n                button.disabled = true;\n            } else {\n                button.disabled = false;\n            }\n        });\n    }\n\n    /**\n     * refresh method\n     * @param query\n     * @returns void\n     */\n    refresh(query?: any) {\n        this.dataProvider.load(query);\n    }\n\n    /**\n     * resetSelectedRow method\n     * @param button\n     * @returns void\n     */\n    resetSelectedRow(button: string) {\n        if (button === 'delete') {\n            this.selectedRow = null;\n        }\n    }\n\n    /**\n     * reset method\n     * @returns void\n     */\n    reset() {\n        this.pDatatableComponent.first = 0;\n        this.dataProvider.reset();\n        this.refresh();\n    }\n\n    /**\n     * paginationFooterText method\n     * @param {string} msg\n     * @returns string\n     */\n    paginationFooterText(msg: string): string {\n        const registros = this.totalRecords() === 1 ? 'registro' : 'registros';\n        if (msg === '') {\n            return `Exibindo: ${this.currentFirstIndex()} a ${this.currentLastIndex()} de ${this.totalRecords()} ${registros}`;\n        }\n        msg = msg.replace('{totalRecords}', this.totalRecords().toString());\n        msg = msg.replace(\n            '{currentFirstIndex}',\n            this.currentFirstIndex().toString()\n        );\n        msg = msg.replace(\n            '{currentLastIndex}',\n            this.currentLastIndex().toString()\n        );\n        return msg;\n    }\n\n    /**\n     * currentFirstIndex method\n     * @returns number\n     */\n    currentFirstIndex(): number {\n        return this.pDatatableComponent.first + 1;\n    }\n\n    /**\n     * currentLastIndex method\n     * @returns number\n     */\n    currentLastIndex(): number {\n        const currentLastIndex: number =\n            this.pDatatableComponent.first + this.pDatatableComponent.rows;\n        if (currentLastIndex > this.totalRecords()) {\n            return this.totalRecords();\n        }\n        return currentLastIndex;\n    }\n\n    /**\n     * totalRecords method\n     * @returns number\n     */\n    totalRecords(): number {\n        return this.pDatatableComponent.totalRecords;\n    }\n\n    /**\n     * checkRolesToButton method\n     * @param {string} button\n     * @return boolean\n     */\n    checkRolesToButton(button: string): boolean {\n        if (this[button]) {\n            if (\n                button === 'rulesToHide' ||\n                button === 'rulesToShowEdit' ||\n                button === 'rulesToShowDelete'\n            ) {\n                this.checkUseButtons(button);\n                return this.authorizationService.hasRole(this[button]);\n            }\n            return !this.authorizationService.hasRole(this[button]);\n        }\n        return true;\n    }\n\n    /**\n     * checkUseButtons method\n     * @param {string} button\n     * @returns void\n     */\n    checkUseButtons(button: string): void {\n        if (this[button] && this[button.replace('Show', 'Hide')]) {\n            throw new Error(\n                'Não é possível definir dois valores de roles para os botões padrões.'\n            );\n        }\n    }\n\n    /**\n     * filter method\n     * @returns void\n     */\n    filter() {\n        for (let prop in this.filterParams) {\n            if (\n                this.filterParams[prop] === '' ||\n                this.filterParams[prop].length === 0\n            ) {\n                delete this.filterParams[prop];\n            }\n        }\n        if (Object.getOwnPropertyNames(this.filterParams).length === 0) {\n            this.reset();\n        } else {\n            this.refresh(this.filterParams);\n        }\n    }\n\n    /**\n     * Método para filtrar por colunas\n     * @param column chave da coluna na tabela\n     * @param filters valor do filtro\n     */\n    filterColumn(column: string, filters: any) {\n        const values = [];\n        if (filters instanceof Array) {\n            values[column] = [];\n            for (let item in filters) {\n                let val =\n                    filters[item] instanceof Object\n                        ? filters[item].value\n                        : filters[item];\n                values[column].push(val);\n            }\n        } else {\n            values[column] = filters;\n        }\n        this.filterParams = { ...this.filterParams, ...values };\n\n        return this.filter();\n    }\n\n    /**\n     * Inicia todas as colunas da tabela como visíveis\n     */\n    setAllColumnsVisible() {\n        this.columns.forEach(col => {\n            this.visibleColumns[col.field] = 'table-cell';\n        });\n    }\n\n    /**\n     * Verifica se uma coluna deve estar visível\n     * @param column string\n     * @param visibleColumns Array\n     */\n    visibleColumnCheck(column: string, visibleColumns: []) {\n        return visibleColumns.some((item: any) => {\n            return item.field ? item.field == column : true;\n        });\n    }\n\n    /**\n     * Atualzia os valores da variável 'visibleColuns' para mostrar ou não as colunas\n     * @param columns array\n     */\n    updateVisibleColumns(columns: []) {\n        for (let col in this.visibleColumns) {\n            if (this.visibleColumnCheck(col, columns)) {\n                this.visibleColumns[col] = 'table-cell';\n            } else {\n                this.visibleColumns[col] = 'none';\n            }\n        }\n    }\n\n    onRowEditInitEvent(event, rowData: any) {\n        // const tr = event.srcElement.closest('tr');\n\n        // setTimeout(() => {\n        //     this.editingRow = true;\n        //     const top = tr.offsetTop;\n        //     const height = tr.offsetHeight;\n        //     const editButtons = tr.querySelector('.editar-campos');\n\n        //     editButtons.style.top = (top + height) + 'px';\n        //     editButtons.style.height ='75px';\n        //     editButtons.style.backgroundColor = '#d0d0d0';\n        //     editButtons.style.opacity = 1;\n\n        //     this.clonedRowData[rowData.id] = {...rowData};\n        //     this.onRowEditEvent.emit({event: \"init\", data: rowData});\n        // }, null , tr);\n\n    }\n\n    onRowEditSaveEvent(event, rowData: any) {\n        this.onRowEditEvent.emit({event: \"save\", data: rowData});\n        this.resetEditingMode(event);\n    }\n\n    onRowEditCancelEvent(event, rowData: any, index: number) {\n        this.value[index] = this.clonedRowData[rowData.id];\n\n        delete this.clonedRowData[rowData[this.dataKey]];\n        this.onRowEditEvent.emit({event: \"cancel\", data: rowData});\n\n        this.resetEditingMode(event);\n    }\n\n    resetEditingMode(event) {\n        const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');\n\n        editButtons.style.opacity = 0;\n        editButtons.style.backgroundColor = '#0000006b';\n        editButtons.style.display = 'none';\n\n        this.editingRow = false;\n    }\n\n    editarLinhaOver(event) {\n        // if (!this.editingRow && this.editMode == 'row') {\n        //     const top = event.srcElement.closest('tr').offsetTop;\n        //     const height = event.srcElement.closest('tr').offsetHeight;\n        //     const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');\n\n        //     editButtons.style.display = 'flex';\n        //     editButtons.style.top = top + 'px';\n        //     editButtons.style.height = height + 'px';\n        //     editButtons.style.backgroundColor = '#0000006b';\n        //     editButtons.style.opacity = 1;\n        // }\n    }\n\n    editarLinhaOut(event) {\n        // if (!this.editingRow) {\n        //     const editButtons = event.srcElement.closest('tr').querySelector('.editar-campos');\n        //     editButtons.style.display = 'none';\n        //     editButtons.style.opacity = 0;\n        // }\n    }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\n/**\n * Class DatatableSplitbuttonComponent\n * @class\n */\n@Component( {\n    selector: 'datatable-splitbutton',\n    templateUrl: 'datatable-splitbutton.component.html'\n} )\nexport class DatatableSplitbuttonComponent implements OnInit {\n\n    /**\n     * items property\n     * @type {any[]}\n     */\n    @Input()\n    items: any[];\n\n    /**\n     * label property\n     * @type {string}\n     */\n    @Input()\n    label: string;\n\n    /**\n     * class property\n     * @type {string}\n     */\n    @Input()\n    class: string;\n\n    /**\n     * icon property\n     * @type {string}\n     */\n    @Input()\n    icon: string;\n\n    /**\n     * method propety\n     * @type {any}\n     */\n    @Input()\n    method: any;\n\n    /**\n     * ngOnInit method\n     * @returns void\n     */\n    ngOnInit() {\n    }\n}\n","import { DatatableSplitbuttonComponent } from './datatable-splitbutton.component';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { SplitButtonModule } from 'primeng/splitbutton';\n/**\n * Class DatatableSplitbuttonModule\n * @class\n */\n@NgModule({\n  imports: [\n    SplitButtonModule\n  ],\n  declarations: [\n    DatatableSplitbuttonComponent\n  ],\n  providers: [],\n  exports: [\n    DatatableSplitbuttonComponent,\n    SplitButtonModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DatatableSplitbuttonModule {\n}\n","import { Component, EventEmitter, Output, Input, OnChanges, SimpleChange, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'basis-filter-column',\n    templateUrl: './filter-column.component.html'\n})\nexport class FilterColumn implements OnChanges, OnInit {\n\n    @Input() listaOriginal: any[] = [];\n\n    @Input() lista: any[] = [];\n\n    @Input() field: string;\n\n    @Input() header: string;\n\n    @Input() labelDefaultImplementation: boolean = false;\n\n    @Input() labelDefaultName: string;\n\n    @Input() updateFiltro: boolean = false;\n\n    @Input() filterType: string;\n\n    @Input() tableType: string;\n\n    @Input() customFilterOptions: Object = {};\n\n    @Input() template = 'filter_text';\n\n    @Output() outputEvent = new EventEmitter();\n\n    private debouncer: Subject<any> = new Subject<any>();\n\n    filtro: any;\n\n    resultado: any[] = [];\n\n    private listaFields: any[] = [];\n\n    constructor() { }\n\n    ngOnInit() {\n        this.debouncer\n            .pipe(debounceTime((this.tableType === 'memory')? 300 : 1000))\n            .subscribe((value) => this.outputEvent.emit(value));\n\n        this.template = `filter_${this.filterType}`;\n    }\n\n    ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        if (this.checkChanges(changes, 'listaOriginal')) {\n            this.preencherFields();\n        }\n    }\n\n    checkChanges(changes: { [propName: string]: SimpleChange }, property) {\n        return changes[property] && changes[property].previousValue != changes[property].currentValue;\n    }\n\n    /**\n     * Método para propagar o evento de filtragem\n     * @param event filtro\n     */\n    filtrar(event) {\n        this.debouncer.next(this.filtro);\n    }\n\n    /**\n     * Preenche os itens que serão exibidos no multiselect, removendo duplicidades\n     */\n    preencherFields() {\n        this.listaFields = [];\n        this.listaOriginal.filter(pi => pi[this.field] !== null).forEach(row => {\n            let item = {label: row[this.field], value: row[this.field]};\n            if (!this.verificarSeExisteField(item)) {\n                this.listaFields.push(item);\n            }\n        });\n    }\n\n    /**\n     *\n     * @param field Verifica duplicidade de fields nas opções de seleção\n     */\n    verificarSeExisteField(field) {\n        return this.listaFields.some(item => {\n            return item.value == field.value;\n        });\n    }\n\n    /**\n     * Caso o usuaŕio não forneça uma lista para o options, será criada uma lista com\n     * os valores presentes na tabela\n     */\n    getCustomFilterOptions() {\n        if (this.customFilterOptions.hasOwnProperty(this.field)) {\n            return this.customFilterOptions[this.field];\n        }\n\n        return this.listaFields;\n    }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { FilterColumn } from './filter-column.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MultiSelectModule,\n        ButtonModule,\n        CheckboxModule,\n        DropdownModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule\n    ],\n    declarations: [\n        FilterColumn\n    ],\n    exports: [\n        FilterColumn\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class FilterColumnModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { NotificationProvider, ApplicationProblemType } from '@nuvem/angular-base';\n\n/**\n * Class PageNotificationService\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class PageNotificationService extends NotificationProvider {\n\n    /**\n     * successSeverity property\n     * @type {string}\n     */\n    private readonly successSeverity = 'success';\n\n    /**\n     * infoSeverity property\n     * @type {string}\n     */\n    private readonly infoSeverity = 'info';\n\n    /**\n     * warnSeverity property\n     * @type {string}\n     */\n    private readonly warnSeverity = 'warn';\n\n    /**\n     * errorSeverity property\n     * @type {string}\n     */\n    private readonly errorSeverity = 'error';\n\n    /**\n     * createMsg property\n     * @type {string}\n     */\n    private readonly createMsg = 'Registro incluído com sucesso!';\n\n    /**\n     * updateMsg property\n     * @type {string}\n     */\n    private readonly updateMsg = 'Registro alterado com sucesso!';\n\n    /**\n     * deleteMsg property\n     * @type {string}\n     */\n    private readonly deleteMsg = 'Registro excluído com sucesso!';\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {MessageService} messageService\n     */\n    constructor(private messageService: MessageService) {\n        super();\n    }\n\n    /**\n     * addCreateMsg method\n     * @param {string} title\n     */\n    addCreateMsg(title?: string) {\n        this.addSuccessMessage(this.createMsg, title);\n    }\n\n    /**\n     * addSuccessMessage method\n     * @param {string} message\n     * @param {string} title\n     */\n    addSuccessMessage(message: string, title?: string) {\n        this.addMsg(this.successSeverity, message, title);\n    }\n\n    /**\n     * addMsg method\n     * @param {string} severity\n     * @param {string} msg\n     * @param {string} title\n     */\n    private addMsg(severity: string, msg: string, title?: string) {\n        this.messageService.add({\n          severity: severity,\n          summary: title,\n          detail: msg\n        });\n    }\n\n    /**\n     * addUpdateMsg method\n     * @param {string} title\n     */\n    addUpdateMsg(title?: string) {\n        this.addSuccessMessage(this.updateMsg, title);\n    }\n\n    /**\n     * addDeleteMsg method\n     * @param {string} title\n     */\n    addDeleteMsg(title?: string) {\n        this.addSuccessMessage(this.deleteMsg, title);\n    }\n\n    /**\n     * addInfoMessage method\n     * @param {string} message\n     * @param {string} title\n     */\n    addInfoMessage(message: string, title?: string) {\n        this.addMsg(this.infoSeverity, message, title);\n    }\n\n    /**\n     * addWarnMessage method\n     * @param {string} message\n     * @param {string} title\n     */\n    addWarnMessage(message: string, title?: string) {\n        this.addMsg(this.warnSeverity, message, title);\n    }\n\n    /**\n     * addErrorMessage method\n     * @param {string} message\n     * @param {string} title\n     */\n    addErrorMessage(message: string, title?: string) {\n        this.addMsg(this.errorSeverity, message, title);\n    }\n\n    /**\n     * addErrorProblem method\n     * @param {ApplicationProblemType} problem\n     */\n    addErrorProblem(problem: ApplicationProblemType): void {\n        this.addMsg(this.errorSeverity, problem.detail, problem.title);\n    }\n\n}\n","import { Component, Input, OnInit, QueryList, Output, EventEmitter } from '@angular/core';\nimport { PageNotificationService } from './../../page-notification/page-notification.service';\n\n@Component({\n    selector: 'basis-show-column',\n    templateUrl: './show-column.component.html'\n})\nexport class ShowColumn implements OnInit {\n\n    /**\n     * atributo que representa as colunas da tabela\n     * @type {QueryList}\n     */\n    @Input() columns: QueryList<any>;\n\n    /**\n     * lista de colunas disponívels na tabela\n     * @type {Array}\n     */\n    options: any[] = [];\n\n    /**\n     * Valores do select de colunas\n     * @type {Array}\n     */\n    values: any[] = [];\n\n    /**\n     * Último valor válido para o select.\n     * @type {Array}\n     */\n    private lastValue: any[] = [];\n\n    /**\n     * Evento para atualizar a visibilidade das colunas da tabela\n     * @type {EventEmitter}\n     */\n    @Output() updateVisibleColumns: EventEmitter<any> = new EventEmitter();\n\n    constructor(private pageNotificationService: PageNotificationService) {}\n\n    ngOnInit () {\n        this.columns.forEach((column) => {\n            const col = {field: column.field, filterType: column.filterType, header: column.header};\n            this.options.push(col);\n            this.values.push(col)\n            this.lastValue.push(col);\n        });\n    }\n\n    mostrarColunas(event) {\n        if (this.values.length) {\n            this.lastValue = event.value;\n            this.updateVisibleColumns.emit(this.values);\n\t\t} else {\n            this.lastValue.map((item) => this.values.push(item));\n\t\t\tthis.pageNotificationService.addErrorMessage('Não é possível exibir menos de uma coluna');\n        }\n    }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ShowColumn } from './show-column.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MultiSelectModule,\n        ButtonModule,\n        CheckboxModule,\n        DropdownModule,\n        FormsModule,\n        ReactiveFormsModule,\n        InputTextModule\n    ],\n    declarations: [\n        ShowColumn\n    ],\n    exports: [\n        ShowColumn\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class ShowColumnModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'basis-action-button',\n    templateUrl: './action-button.component.html',\n    styleUrls: ['./action-button.component.scss']\n})\nexport class ActionButtonComponent implements OnInit {\n    \n    action = false;\n\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n","\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonModule } from 'primeng/button';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { BlockUIModule } from 'primeng/blockui';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { SplitButtonModule } from 'primeng/splitbutton';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { TableModule } from 'primeng/table';\n\nimport { DataProviderFactory } from './dataprovider-factory';\nimport { DatatableComponent } from './datatable.component';\nimport { DatatableButtonComponent } from './datatable-button.component';\nimport { DatatableService } from './datatable.service';\nimport { DatatableSplitbuttonModule } from '../extra-button/datatable-splitbutton.module';\nimport { FilterColumnModule } from './filter-column/filter-column.module';\nimport { ShowColumnModule } from './show-column/show-column.module';\nimport { Column } from './p-column.directive';\nimport { ActionButtonComponent } from './action-button/action-button.component';\n\n/**\n * Class DatatableModule\n * @class\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        ButtonModule,\n        SplitButtonModule,\n        TooltipModule,\n        TableModule,\n        BlockUIModule,\n        ProgressSpinnerModule,\n        DatatableSplitbuttonModule,\n        HttpClientModule,\n        PaginatorModule,\n        FilterColumnModule,\n        ShowColumnModule,\n        InputTextModule\n    ],\n    declarations: [\n        DatatableComponent,\n        DatatableButtonComponent,\n        Column,\n        ActionButtonComponent\n    ],\n    providers: [\n        { provide: DatatableService, useClass: DatatableService, deps: [HttpClient] },\n        DataProviderFactory\n    ],\n    exports: [\n        DatatableComponent,\n        DatatableButtonComponent,\n        FilterColumnModule,\n        ShowColumnModule,\n        Column\n    ]\n})\nexport class DatatableModule {\n}\n","import { BlockUiStatus, BlockUiService } from '@nuvem/angular-base';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\n/**\n * Class BlockUiComponent\n * @class\n */\n@Component({\n    selector: 'basis-block-ui',\n    templateUrl: './block-ui.component.html',\n    styleUrls: [ './block-ui.component.css' ],\n})\nexport class BlockUiComponent implements OnInit , OnDestroy {\n    /**\n     * status property\n     * @type {boolean}\n     * @public\n     */\n    status = false;\n\n    /**\n     * subscription property\n     * @private\n     * @type {Subscription}\n     */\n    private subscription: Subscription;\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {BlockUiService} service\n     */\n    constructor(private service: BlockUiService) { }\n\n    /**\n     * ngOnInit method\n     * @returns void\n     */\n    ngOnInit() {\n        this.subscription = this.service.loaderStatus.subscribe((blockui: BlockUiStatus) => {\n            this.status = blockui.status;\n        });\n    }\n\n    /**\n     * ngOnDestroy methods\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n\n    /**\n     * isBlocked method\n     * @returns boolean\n     */\n    isBlocked() {\n        return this.status;\n    }\n\n    /**\n     * show method\n     * @returns false\n     */\n    show() {\n        this.status = true;\n    }\n\n    /**\n     * hide methods\n     * @returns void\n     */\n    hide() {\n        this.status = false;\n    }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUiInterceptor, BlockUiService } from '@nuvem/angular-base';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BlockUIModule } from 'primeng/blockui';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { BlockUiComponent } from './block-ui.component';\n\n/**\n * Class BlockUiModule\n * @class\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        BlockUIModule,\n        ProgressSpinnerModule,\n    ],\n    declarations: [\n        BlockUiComponent\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: BlockUiInterceptor,\n            multi: true\n        },\n        BlockUiService\n    ],\n    exports: [\n        BlockUIModule,\n        BlockUiComponent,\n        ProgressSpinnerModule\n    ]\n})\nexport class BlockUiModule {\n}\n","import { Component, Input } from '@angular/core';\n\n/**\n * Class PageNotificationComponent\n * @class\n */\n@Component({\n  selector: 'basis-page-notification',\n  templateUrl: './page-notification.component.html'\n})\nexport class PageNotificationComponent {\n\n    /**\n     * duration property\n     * @type {number}\n     */\n    @Input() duration: number = 3000;\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToastModule } from 'primeng/toast';\nimport { MessageService } from 'primeng/api';\n\nimport { PageNotificationService } from './page-notification.service';\nimport { PageNotificationComponent } from './page-notification.component';\nimport { NotificationProvider } from '@nuvem/angular-base';\n\n/**\n * Class PageNotificationModule\n * @class\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        ToastModule\n    ],\n    declarations: [\n        PageNotificationComponent\n    ],\n    exports: [\n        PageNotificationComponent\n    ],\n    providers: [\n        MessageService,\n        PageNotificationService,\n        {\n            provide: NotificationProvider,\n            useExisting: PageNotificationService\n        }\n    ]\n})\nexport class PageNotificationModule {\n}\n","import { Component } from \"@angular/core\";\nimport { FormNotificationComponentSuperclass } from '@nuvem/angular-base';\n\n@Component({\n    selector: '[form-notification]',\n    templateUrl: 'form-notification.component.html'\n})\nexport class FormNotificationComponent extends FormNotificationComponentSuperclass {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormNotificationBaseModule, FormNotificationComponentSuperclass } from '@nuvem/angular-base';\nimport { FormNotificationComponent } from './form-notification.component';\n\n/**\n * Módulo para adicionar funcionalidade de notificação de erros de formulários.\n * @module\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        FormNotificationBaseModule\n    ],\n    declarations: [\n        FormNotificationComponent\n    ],\n    exports: [\n        FormNotificationComponent\n    ]\n})\nexport class FormNotificationModule { }\n","import { Component, OnInit, OnDestroy, Input, TemplateRef } from '@angular/core';\n\nimport { ErrorStackService, NamedErrorType } from '@nuvem/angular-base';\n\nimport { Subscription } from 'rxjs';\n\n/**\n * Class ErrorStackComponent\n * @class\n */\n@Component({\n    selector: 'basis-error-stack',\n    templateUrl: './error-stack.component.html'\n})\nexport class ErrorStackComponent implements OnInit, OnDestroy {\n\n    /**\n     * title property\n     * @type {string}\n     */\n    @Input() title: string = 'Error Stack';\n\n    /**\n     * template property\n     * @type {TemplateRef}\n     */\n    @Input() template: TemplateRef<any>;\n\n    /**\n     * errors property\n     * @type {NamedErrorType}\n     */\n    errors: NamedErrorType[] = [];\n\n    /**\n     * errorSubscription property\n     * @type {Subscription}\n     */\n    private errorSubscription: Subscription;\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {ErrorStackService} errorStack\n     */\n    constructor(private errorStack: ErrorStackService) { }\n\n    /**\n     * ngOnInit method\n     * @returns void\n     */\n    ngOnInit() {\n        this.errorSubscription = this.errorStack.errors.subscribe((error: NamedErrorType) => {\n            this.errors = [error, ...this.errors];\n        });\n    }\n\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.errorSubscription.unsubscribe();\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TableModule } from 'primeng/table';\nimport { ButtonModule } from 'primeng/button';\nimport { TooltipModule } from 'primeng/tooltip';\n\nimport { ErrorStackComponent } from './error-stack.component';\nimport {\n    ErrorProvider,\n    ErrorStackService,\n    ErrorStackProviderService,\n    ClipboardModule\n} from '@nuvem/angular-base';\n\n/**\n * Class ErrorStackModule\n * @class\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        TableModule,\n        ButtonModule,\n        TooltipModule,\n        ClipboardModule\n    ],\n    declarations: [\n        ErrorStackComponent\n    ],\n    providers: [\n        ErrorStackService,\n        {\n            provide: ErrorProvider,\n            useClass: ErrorStackProviderService,\n            multi: true\n        }\n    ],\n    exports: [\n        ErrorStackComponent\n    ]\n})\nexport class ErrorStackModule {\n}\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { CrudService } from \"./crud-service.service\";\nimport { ActivatedRoute } from \"@angular/router\";\n\n@Component({\n    selector: 'nCrudForm',\n    templateUrl: './crud-form.component.html',\n})\nexport class CrudFormComponent implements OnInit {\n\n    @Input() form: FormGroup;\n\n    @Input() service: CrudService<any, any>;\n\n    @Input() disableSave = false;\n\n    action: string;\n\n    listRoute: string = \"../../list\";\n\n    constructor(private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        this.route.paramMap.subscribe((params) => {\n            this.action = params.get('action');\n\n            if (params.get('id')) {\n                this.route.data.subscribe((data) => {\n                    if (data.value) {\n                        this.form.patchValue(data.value);\n                    }\n                });\n            } else {\n                this.listRoute = \"../list\";\n            }\n            if (this.action === \"view\") {\n                this.form.disable();\n            } else if (this.form.disabled) {\n                this.form.enable();\n            }\n        });\n    }\n\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\nexport const CRUD_SERVICE = new InjectionToken<CrudService<any, any>>(\"CRUD_SERVICE\");\n\nexport interface CrudService<I, E> {\n\n    uri: string;\n\n    save(entidade: E): Observable<E>;\n\n    edit(entidade: E): Observable<E>;\n\n    find(id: I): Observable<E>;\n\n    delete(id: I): Observable<E>;\n\n    findAll(entidade: E): Observable<E>;\n\n}\n","import {\n    Component, OnInit, Inject, Input, Output, EventEmitter, AfterContentInit,\n    ViewChild, ContentChildren, QueryList, ChangeDetectorRef\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { CrudService, CRUD_SERVICE } from \"./crud-service.service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { Column } from '../datatable/p-column.directive';\nimport { DatatableComponent } from '../datatable/datatable.component'\nimport { DatatableClickEvent } from '../datatable/datatable-click-event'\n\nimport { ConfirmationService } from 'primeng/api';\nimport { Url } from 'url';\n\n@Component({\n    selector: 'nCrudList',\n    templateUrl: './crud-list.component.html'\n})\nexport class CrudListComponent implements OnInit, AfterContentInit {\n\n    @Input() form: FormGroup;\n\n    @Input() action: string = \"findAll\";\n\n    @Input() findLabel: string = \"Pesquisar\";\n\n    @Input() service: CrudService<any, any>;\n\n    @Input() url: string;\n\n    @Input() disableSave = false;\n\n    @Input() disableEdit = false;\n\n    @Input() disableView = false;\n\n    @Input() disableDelete = false;\n\n    @Input() datatableExtraParams: any;\n\n    @Output() find: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('datatable', { static: true }) datatable: DatatableComponent;\n\n    @ContentChildren(Column) columns: QueryList<Column>;\n\n    result: any[];\n\n    constructor(\n        @Inject(CRUD_SERVICE)\n        public crudService: CrudService<any, any>,\n        private confirmationService: ConfirmationService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) {  }\n\n    ngOnInit(): void {\n        if (this.service) {\n            this.crudService = this.service;\n        }\n        if (!this.url) {\n            this.url = this.crudService.uri\n        }\n    }\n\n    datatableClick(event: DatatableClickEvent) {\n        if (event.selection) {\n            switch (event.button) {\n                case \"edit\":\n                case \"view\":\n                    this.router.navigate([`../${event.button}`, event.selection.id], { relativeTo: this.route });\n                    break;\n                case \"delete\":\n                    this.confirmationService.confirm({\n                        message: 'Você tem certeza que deseja excluir o registro?',\n                        accept: () => this.crudService.delete(event.selection.id)\n                            .subscribe(() => this.datatable.filter())\n                    });\n                    break;\n            }\n        }\n    }\n\n    findAll(event: any) {\n        if (this.find.observers.length) {\n            this.find.emit(this.form.value);\n        } else {\n            this.datatable.filterParams = {};\n            Object.keys(this.form.value).forEach(element => {\n                let value = this.form.value[element];\n                if (value) {\n                    this.datatable.filterParams[element] =\n                        value instanceof Date ? JSON.stringify(value).replace(/\"/g, \"\") : value;\n                }\n            });\n            this.datatable.filter();\n        }\n    }\n\n    ngAfterContentInit() {\n        const datatableNgAfterContentInit = this.datatable.pDatatableComponent.ngAfterContentInit;\n        this.datatable.pDatatableComponent.ngAfterContentInit = () => {\n            this.datatable.pDatatableComponent.columns = this.columns.toArray();\n            datatableNgAfterContentInit.call(this.datatable.pDatatableComponent);\n        };\n    }\n\n    ngAfterViewInit() {\n        for (let i in this.datatableExtraParams) {\n            this.datatable[i] = this.datatableExtraParams[i];\n        }\n    }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { CrudService, CRUD_SERVICE } from \"./crud-service.service\";\n\n@Injectable()\nexport class CrudResolveGuard implements Resolve<any> {\n\n  constructor(@Inject(CRUD_SERVICE) private crudService: CrudService<any, any>) {}\n\n  resolve(route: ActivatedRouteSnapshot) {\n    return this.crudService.find(route.paramMap.get('id'));\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HTTP_INTERCEPTORS, HttpResponse\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { PageNotificationService } from '../page-notification/page-notification.service';\n\nenum STATUS { OK=200, CREATED=201  }\n\n@Injectable({ providedIn: 'root' })\nexport class SuccessMessageHandlerInterceptor implements HttpInterceptor {\n\n  constructor(private notification: PageNotificationService) {\n\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n        tap((event) => {\n          if (event instanceof HttpResponse) {\n            if (event.headers.has(\"X-nuvem-alert\")) {\n              this.notification.addSuccessMessage(event.headers.get(\"X-nuvem-alert\"));\n            } else if ((event.status === STATUS.OK || event.status === STATUS.CREATED) && req.method != \"GET\") {\n              this.notification.addSuccessMessage(\"Operação realizada com sucesso!\");\n            }\n          }\n        })\n    );\n  }\n\n}\n\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: SuccessMessageHandlerInterceptor, multi: true },\n];\n","import { CrudService } from \"./crud-service.service\";\nimport { Observable } from \"rxjs\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n\nexport class CrudServiceNuvem<I, E> implements CrudService<I, E> {\n\n    constructor(public uri: string, protected http: HttpClient) {\n    }\n\n    save(entity: E): Observable<E> {\n        return this.http.post<E>(this.uri, entity);\n    }\n\n    edit(entity: E): Observable<E> {\n        return this.http.put<E>(this.uri, entity);\n    }\n\n    find(id: I): Observable<E> {\n        return this.http.get<E>(`${this.uri}/${id}`);\n    }\n\n    delete(id: I): Observable<E> {\n        return this.http.delete<E>(`${this.uri}/${id}`);\n    }\n\n    findAll(entity: E): Observable<E> {\n        let params = new HttpParams();\n\n        for (let field in entity) {\n            params = params.append(field, <any> entity[field]);\n        }\n\n        return this.http.get<E>(`${this.uri}`, { params: params });\n    }\n\n}\n","import { Injector, Input, OnInit, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter, Directive } from \"@angular/core\";\nimport { WrappedFormControlSuperclass } from \"@nuvem/angular-base\";\nimport { ControlContainer } from \"@angular/forms\";\n\n@Directive({\n    selector: \"[nField]\"\n})\nexport class FieldComponent<OuterType, InnerType = OuterType>\n    extends WrappedFormControlSuperclass<OuterType, InnerType>\n    implements OnInit, AfterViewInit {\n\n    @Input() form: string;\n\n    @Input() formControlName: string;\n\n    @Input() extraParams: any;\n\n    @Input() required: boolean;\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() onSelect: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild(\"input\", { static: false }) input: any;\n\n    private _name: string;\n\n    private _label: string;\n\n    get name(): string {\n        return this._name ? this._name : this.formControlName;\n    }\n\n    @Input()\n    set name(value: string) {\n        this._name = value;\n    }\n\n    get label(): string {\n        return this.required ? `${this._label}*` : this._label;\n    }\n\n    @Input()\n    set label(value: string) {\n        this._label = value;\n    }\n\n    constructor(\n        private controlContainer: ControlContainer,\n        private injector: Injector) {\n        super(injector);\n    }\n\n    ngOnInit() {\n        this.setValidators();\n        this.setRequired();\n    }\n\n    setRequired() {\n        if (this.required) {\n            if (this.input instanceof ElementRef) {\n                this.input.nativeElement.required = true;\n            } else {\n                this.input.required = true;\n            }\n        }\n    }\n\n    setElementRefAttr(attr: string, value: any) {\n        if (value && this.input instanceof ElementRef) {\n            this.input.nativeElement[attr] = value;\n        }\n    }\n\n    setFormControlValidators() {\n        if (this.controlContainer && this.formControlName) {\n            let validator = this.controlContainer.control.get(this.formControlName).validator;\n            if (validator) {\n                this.formControl.setValidators(validator);\n            }\n        }\n    }\n\n\n    setValidators() {\n        if (this.controlContainer && this.formControlName) {\n            let validator = this.controlContainer.control.get(this.formControlName).validator;\n            if (validator) {\n                this.formControl.setValidators(validator);\n            }\n        }\n    }\n\n    ngAfterViewInit() {\n        for (let i in this.extraParams) {\n            this.input[i] = this.extraParams[i];\n        }\n    }\n\n    onBlurEvent(event) {\n        this.onBlur.emit(event);\n    }\n\n    onSelectEvent(event) {\n        this.onSelect.emit(event);\n    }\n\n    onFocusEvent(event) {\n        this.onFocus.emit(event);\n    }\n}\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { provideValueAccessor } from \"@nuvem/angular-base\";\nimport { FieldComponent } from \"../field.component\";\n\n@Component({\n    selector: \"[nInputText]\",\n    templateUrl: \"./input-text.component.html\",\n    providers: [ provideValueAccessor(InputTextComponent) ],\n})\nexport class InputTextComponent extends FieldComponent<string> implements OnInit {\n\n    @Input() minLength: number;\n\n    @Input() maxLength: number;\n\n    @Input() min: number;\n\n    @Input() max: number;\n\n    @Input() pattern: string | RegExp;\n\n    @Input() type: string = \"text\";\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.setElementRefAttr(\"min\", this.min);\n        this.setElementRefAttr(\"max\", this.max);\n        this.setElementRefAttr(\"minLength\", this.minLength);\n        this.setElementRefAttr(\"maxLength\", this.maxLength);\n        this.setElementRefAttr(\"pattern\", this.pattern);\n    }\n\n}\n","import { LocaleSettings } from 'primeng/calendar';\n\nexport const CALENDAR_LOCALE: LocaleSettings = {\n    firstDayOfWeek: 0,\n    dayNames: [\"Domingo\", \"Segunda\", \"Terça\", \"Quarta\", \"Quinta\", \"Sexta\", \"Sábado\"],\n    dayNamesShort: [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sab\"],\n    dayNamesMin: [\"D\", \"S\", \"T\", \"Q\", \"Q\", \"S\", \"S\"],\n    monthNames: [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"],\n    monthNamesShort: [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"],\n    today: 'Hoje',\n    clear: 'Limpar',\n    dateFormat: 'dd/mm/yy',\n    weekHeader: 'Semana'\n};\n","import { Component, Input } from \"@angular/core\";\nimport { provideValueAccessor } from \"@nuvem/angular-base\";\nimport { FieldComponent } from \"../field.component\";\nimport { CALENDAR_LOCALE } from './calendar-locale';\n@Component({\n    selector: \"[nCalendar]\",\n    templateUrl: \"./calendar.component.html\",\n    providers: [ provideValueAccessor(CalendarComponent) ],\n})\nexport class CalendarComponent extends FieldComponent<string, Date> {\n\n    @Input()\n    maxDate: Date = null;\n\n    @Input()\n    yearRange: string = null;\n\n    @Input()\n    monthNavigator = false;\n\n    @Input()\n    yearNavigator = false;\n\n    @Input()\n    locale = CALENDAR_LOCALE;\n\n    protected outerToInner(value: string): Date {\n        return value ? new Date(value) : null;\n    }\n\n}\n","import { Component, Input } from \"@angular/core\";\nimport { provideValueAccessor } from \"@nuvem/angular-base\"\nimport { FieldComponent } from \"../field.component\";\n\n@Component({\n    selector: \"[nTextArea]\",\n    templateUrl: \"./text-area.component.html\",\n    providers: [ provideValueAccessor(TextAreaComponent) ],\n})\nexport class TextAreaComponent extends FieldComponent<string> {\n\n    @Input() autoResize: boolean = false;\n\n    @Input() rows: string;\n\n    @Input() cols: string;\n\n    @Input() minLength: number;\n\n    @Input() maxLength: number;\n\n}\n","import { Component, Input, AfterViewInit, Output, EventEmitter, OnInit } from \"@angular/core\";\nimport { provideValueAccessor } from \"@nuvem/angular-base\";\nimport { FieldComponent } from \"../field.component\";\nimport { CrudService } from \"../../crud-service.service\";\n\n@Component({\n    selector: \"[nDropdown]\",\n    templateUrl: \"./dropdown.component.html\",\n    providers: [provideValueAccessor(DropdownComponent)],\n})\nexport class DropdownComponent extends FieldComponent<any> implements AfterViewInit, OnInit {\n\n    @Input() optionLabel: string;\n\n    @Input() virtualScroll = false;\n\n    @Input() filter = false;\n\n    @Input() itemSize = 30;\n\n    @Input() service: CrudService<any, any>;\n\n    @Input() options: any[] = [];\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter<any>();\n\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        if (this.service) {\n            this.service.findAll(null).subscribe(data => {\n                this.options = data;\n            });\n        }\n    }\n\n    onChangeEvent(event): void {\n        this.onChange.emit(event);\n    }\n\n    protected outerToInner(value: any): any {\n        if (value && value.id) {\n            this.service.find(value.id).subscribe((data) => {\n                this.formControl.setValue(data);\n            });\n        }\n        return value;\n    }\n\n}\n","import { Component, Input } from \"@angular/core\";\nimport { provideValueAccessor } from \"@nuvem/angular-base\";\nimport { FieldComponent } from \"../field.component\";\n\n@Component({\n    selector: \"[nInputMask]\",\n    templateUrl: \"./input-mask.component.html\",\n    providers: [ provideValueAccessor(InputMaskComponent) ],\n})\nexport class InputMaskComponent extends FieldComponent<string> {\n\n    @Input()\n    mask: string;\n\n    @Input()\n    placeholder: string;\n\n}\n","import { Component, Injector } from \"@angular/core\";\n\nimport { Subscription } from \"rxjs\";\n\nimport { provideValueAccessor, FormNotificationService, FormNotification, FieldFormNotification } from \"@nuvem/angular-base\";\nimport { FieldComponent } from \"../field.component\";\nimport { ControlContainer } from '@angular/forms';\n\n@Component({\n    selector: \"[nCheck]\",\n    templateUrl: \"./check.component.html\",\n    providers: [ provideValueAccessor(CheckComponent) ],\n})\nexport class CheckComponent extends FieldComponent<string> {\n\n    private subscription: Subscription;\n\n    message: String;\n\n    /**\n     * Método construtor responsável por carregar o serviço de validação\n     * @param formNotificationService\n     */\n    constructor(\n        controlContainer: ControlContainer,\n        injector: Injector,\n        protected formNotificationService: FormNotificationService) {\n        super(controlContainer, injector);\n    }\n\n    /**\n     * Método Inicial para subscrição no endpoint responsável por validar o formulário\n     */\n    ngOnInit(): void {\n        super.ngOnInit()\n        this.subscription = this.formNotificationService\n            .notifications(this.form, this.name)\n            .subscribe((notification: FormNotification) => {\n                if (notification instanceof FieldFormNotification) {\n                    this.message = notification.message;\n                } else {\n                    this.message = null;\n                }\n            });\n    }\n\n    /**\n     * Método responsável por realizar a saida das subscrições do endpont de validação\n     */\n    ngOnDestroy(): void {\n        super.ngOnDestroy()\n        this.subscription.unsubscribe();\n    }\n\n\n}\n","import { Component, OnInit, Inject, Input, Output, EventEmitter } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { CrudService, CRUD_SERVICE } from \"./crud-service.service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\n\n@Component({\n    selector: 'nForm',\n    templateUrl: './form.component.html'\n})\nexport class FormComponent implements OnInit {\n\n    @Input() form: FormGroup;\n\n    @Input() route: [];\n\n    @Input() action: string = \"save\";\n\n    @Input() saveLabel: string = \"Salvar\";\n\n    @Input() service: CrudService<any, any>;\n\n    @Input() disableSave: boolean = false;\n\n    @Output() save: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() reset: EventEmitter<any> = new EventEmitter<any>();\n    constructor(\n        @Inject(CRUD_SERVICE)\n        private crudService: CrudService<any, any>,\n        private activatedRoute: ActivatedRoute,\n        private router: Router\n    ) {}\n\n    ngOnInit(): void {\n        if (this.service) {\n            this.crudService = this.service;\n        }\n    }\n\n    submit() {\n        if (this.save.observers.length) {\n            this.save.emit(this.form.value);\n        } else {\n            this.crudService[this.action](this.form.value)\n            .subscribe(() => {\n                if (this.route) {\n                    this.router.navigate(this.route, { relativeTo: this.activatedRoute });\n                } else if (this.reset.observers.length) {\n                    this.reset.emit(this.form);\n                } else {\n                    this.form.reset();\n                }\n            });\n        }\n    }\n\n}\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n    selector: 'nValidationMessage',\n    templateUrl: './validation-message.component.html'\n})\nexport class ValidationMessageComponent {\n\n    @Input() control: any;\n\n}\n","import { Component, Input, TemplateRef } from \"@angular/core\";\nimport { provideValueAccessor } from \"@nuvem/angular-base\";\nimport { FieldComponent } from \"../field.component\";\nimport { CrudService } from \"../../crud-service.service\";\n\n@Component({\n    selector: \"[nAutoComplete]\",\n    templateUrl: \"./auto-complete.component.html\",\n    providers: [provideValueAccessor(AutoCompleteComponent)],\n})\nexport class AutoCompleteComponent extends FieldComponent<any> {\n\n    @Input() field: string;\n\n    @Input() virtualScroll: boolean = false;\n\n    @Input() itemSize: number = 30;\n\n    @Input() service: CrudService<any, any>;\n\n    results: any[];\n\n    selectItem(option) {\n        this.formControl.setValue(option);\n    }\n\n    findAll(event: any) {\n        let query = {};\n        query[this.field] = event.query;\n        this.service.findAll(query).subscribe(data => {\n            this.results = data;\n        });\n    }\n\n    protected outerToInner(value: any): any {\n        if (value && value.id && !value[this.field]) {\n            this.service.find(value.id).subscribe((data) => {\n                this.formControl.setValue(data);\n            });\n        }\n        return value;\n    }\n\n}\n","import { Component, ElementRef, Renderer2, ChangeDetectorRef, IterableDiffers, Input, forwardRef } from '@angular/core';\nimport { AutoComplete as AutoCompletePrimeng } from 'primeng/autocomplete';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => AutoCompleteCustomComponent),\n    multi: true\n  };\n\n@Component({\n    selector: 'p-autoCompleteCustom',\n    templateUrl: './auto-complete-custom.component.html',\n    styleUrls: ['./auto-complete-custom.component.scss'],\n    providers: [AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class AutoCompleteCustomComponent extends AutoCompletePrimeng {\n\n    @Input() virtualScroll: boolean;\n\n    @Input() itemSize: number;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef, public differs: IterableDiffers) {\n        super(el, renderer, cd, differs)\n    }\n\n}\n","import { Component, Input, Output, TemplateRef, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: 'p-autoCompleteItem',\n    template: `\n        <li role=\"option\" [ngClass]=\"{'p-autocomplete-list-item p-corner-all':true,'p-highlight':(highlightOption==option)}\"\n            (mouseenter)=\"highlightOptionChange.emit(option)\" (mouseleave)=\"highlightOptionChange.emit(null)\"\n            [id]=\"highlightOption == option ? 'p-highlighted-option':''\" (click)=\"selectItem($event)\"\n            [ngStyle]=\"{'height': itemSize + 'px', 'display': 'table', 'width': '100%'}\">\n            <span *ngIf=\"!template\">{{resolvedFieldData}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option, index: index}\"></ng-container>\n        </li>\n    `\n})\nexport class AutoCompleteItem {\n\n    @Input() option: any;\n\n    @Input() resolvedFieldData: any;\n\n    @Input() highlightOption: any;\n\n    @Output() highlightOptionChange = new EventEmitter<any>();\n\n    @Input() index: number;\n\n    @Input() itemSize: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Output() onClick = new EventEmitter();\n\n    selectItem(event: Event): void {\n        this.onClick.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { provideValueAccessor } from \"@nuvem/angular-base\";\nimport { FieldComponent } from \"../field.component\";\nimport { CrudService } from \"../../crud-service.service\";\nimport { forkJoin } from 'rxjs';\n\n@Component({\n    selector: \"[nAutoCompleteMultiple]\",\n    templateUrl: \"./auto-complete-multiple.component.html\",\n    providers: [provideValueAccessor(AutoCompleteMultipleComponent)],\n})\nexport class AutoCompleteMultipleComponent extends FieldComponent<any[]> {\n\n    @Input() field: string;\n\n    @Input() service: CrudService<any, any>;\n\n    @Input() virtualScroll: boolean = false;\n\n    @Input() itemSize: number = 30;\n\n    results: any[];\n\n    findAll(event: any) {\n        let query = {};\n        query[this.field] = event.query;\n        this.service.findAll(query).subscribe(data => {\n            this.results = data;\n        });\n    }\n\n    protected outerToInner(value: any[]): any[] {\n        if (value && value.length > 0 && !value[0][this.field]) {\n            let obs: any[] = [];\n            value.forEach(element => {\n                if (element && element.id) {\n                    obs.push(this.service.find(element.id));\n                }\n            });\n            forkJoin(obs).subscribe((data) => {\n                this.formControl.setValue(data);\n            });\n        }\n        return value;\n    }\n\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"check\"\n})\nexport class CheckPipe implements PipeTransform {\n\n    transform(value: any, ...args: any[]): any {\n        return value ? \"Sim\" : \"Não\";\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { httpInterceptorProviders } from './success-message-handler.interceptor';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputTextComponent } from './components/input-text/input-text.component';\n\nimport { CalendarModule } from 'primeng/calendar';\nimport { CalendarComponent } from './components/calendar/calendar.component';\n\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { TextAreaComponent } from './components/text-area/text-area.component';\n\nimport { DropdownModule } from 'primeng/dropdown';\nimport { DropdownComponent } from './components/dropdown/dropdown.component';\n\nimport { InputMaskModule } from 'primeng/inputmask';\nimport { InputMaskComponent } from './components/input-mask/input-mask.component';\n\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { CheckComponent } from './components/check/check.component';\n\nimport { FormNotificationModule } from '../form-notification/form-notification.module';\nimport { ButtonModule } from 'primeng/button';\nimport { FormComponent } from './form.component';\n\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { ConfirmationService } from 'primeng/api';\nimport { CrudListComponent } from './crud-list.component';\n\nimport { ValidationMessageComponent } from './components/validation-message/validation-message.component';\n\nimport { CrudFormComponent } from './crud-form.component';\n\nimport { FieldComponent } from './components/field.component';\n\nimport { DatatableModule } from '../datatable/datatable.module';\n\nimport { RouterModule } from '@angular/router';\n\nimport { AutoCompleteComponent } from './components/auto-complete/auto-complete.component';\nimport { AutoCompleteCustomComponent } from './components/auto-complete/auto-complete-custom.component';\nimport { AutoCompleteItem } from './components/auto-complete/auto-complete-item.component';\nimport { AutoCompleteMultipleComponent } from './components/auto-complete-multiple/auto-complete-multiple.component';\n\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { CheckPipe } from './components/check/check.pipe';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FormNotificationModule,\n        InputTextModule,\n        InputTextareaModule,\n        CalendarModule,\n        AutoCompleteModule,\n        ButtonModule,\n        DatatableModule,\n        HttpClientModule,\n        RouterModule,\n        ConfirmDialogModule,\n        DropdownModule,\n        ScrollingModule,\n        InputMaskModule,\n        RadioButtonModule,\n    ],\n    declarations: [\n        CalendarComponent,\n        InputTextComponent,\n        TextAreaComponent,\n        FormComponent,\n        AutoCompleteComponent,\n        AutoCompleteMultipleComponent,\n        CrudListComponent,\n        CrudFormComponent,\n        FieldComponent,\n        ValidationMessageComponent,\n        DropdownComponent,\n        AutoCompleteItem,\n        AutoCompleteCustomComponent,\n        CheckComponent,\n        InputMaskComponent,\n        CheckPipe,\n    ],\n    exports: [\n        CalendarComponent,\n        InputTextComponent,\n        TextAreaComponent,\n        FormComponent,\n        AutoCompleteComponent,\n        AutoCompleteMultipleComponent,\n        CrudListComponent,\n        CrudFormComponent,\n        FieldComponent,\n        ValidationMessageComponent,\n        DropdownComponent,\n        CheckComponent,\n        InputMaskComponent,\n        CheckPipe,\n    ],\n    providers: [\n        httpInterceptorProviders,\n        ConfirmationService,\n    ]\n})\nexport class CrudModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MenuItem } from 'primeng/api';\n\n@Injectable()\nexport class BreadcrumbService {\n\n    private readonly itemsSource = new Subject<MenuItem[]>();\n\n    itemsHandler = this.itemsSource.asObservable();\n\n    setItems(items: MenuItem[]) {\n        this.itemsSource.next(items);\n    }\n\n    reset() {\n        this.itemsSource.next([]);\n    }\n}\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { MessageService, Message, MenuItem } from 'primeng/api';\nimport { BreadcrumbService } from './breadcrumb.service';\nimport { AccessbilityService } from '@nuvem/angular-base';\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\nimport { filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n    selector: 'breadcrumb',\n    templateUrl: './breadcrumb.component.html',\n    styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit, AfterViewInit {\n\n    subscription: Subscription;\n\n    items: MenuItem[];\n\n    highContrastEnabled = false;\n\n    home: MenuItem;\n\n    constructor(\n        private readonly router: Router,\n        private readonly activatedRoute: ActivatedRoute,\n        private readonly breadcrumbService: BreadcrumbService,\n        private readonly messages: MessageService,\n        private readonly accessibilityService: AccessbilityService\n    ) {\n        this.subscription = breadcrumbService.itemsHandler.subscribe(response => {\n            this.items = response;\n        });\n\n        this.home = { icon: 'pi pi-home', routerLink: '/' };\n    }\n\n    ngOnInit() {\n        this.router.events.pipe(filter(\n            (event: any) => event instanceof NavigationEnd),\n            distinctUntilChanged(),\n        ).subscribe((event) => {\n            this.items = this.buildBreadCrumb(this.activatedRoute.root);\n        })\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    enableHighContrast() {\n        this.highContrastEnabled = true;\n        this.accessibilityService.enableHighContrast();\n    }\n\n    disableHighContrast() {\n        this.highContrastEnabled = false;\n        this.accessibilityService.disableHighContrast();\n    }\n\n    increaseFontSize() {\n        this.accessibilityService.increaseFontSize();\n    }\n\n    decreaseFontSize() {\n        this.accessibilityService.decreaseFontSize();\n    }\n\n    ngAfterViewInit() {\n        this.messages.messageObserver.subscribe(\n            (msg: Message) => {\n                this.accessibilityService.addAccessibilityMessages({ severity: msg.severity });\n            }\n        );\n        this.accessibilityService.addAccessibilityIcons();\n    }\n\n    buildBreadCrumb(route: ActivatedRoute, url: string = '', breadcrumbs: MenuItem[] = []): MenuItem[] {\n\n        let label = (route.routeConfig && route.routeConfig.data ? route.routeConfig.data.breadcrumb : '').trim();\n        let path = route.routeConfig && route.routeConfig.data ? route.routeConfig.path : '';\n\n        const lastRoutePart = path.split('/').pop();\n        const isDynamicRoute = lastRoutePart.startsWith(':');\n\n        if (isDynamicRoute && !!route.snapshot) {\n            for (let key in route.snapshot.params) {\n                path = path.replace(`:${key}`, route.snapshot.params[key]);\n            }\n\n            label = (`${(label != ':action')? label : ''} ${Object.values(route.snapshot.params).join(' ')}`).trim();\n        }\n\n        const nextUrl = path ? `${url}/${path}` : url;\n\n        const menuItem: MenuItem = {\n            \"label\": label.charAt(0).toUpperCase() + label.slice(1),\n            \"routerLink\": nextUrl\n        }\n\n        const newBreadcrumbs = menuItem.label ? [...breadcrumbs, menuItem] : [...breadcrumbs];\n\n        if (route.firstChild) {\n            return this.buildBreadCrumb(route.firstChild, nextUrl, newBreadcrumbs);\n        }\n\n        return newBreadcrumbs;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { MenuItem } from 'primeng/api';\nimport { Subject } from 'rxjs';\n\nexport enum MenuOrientation {\n    STATIC,\n    OVERLAY,\n    SLIM,\n    HORIZONTAL\n}\n\n/**\n * Class MenuService\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenusService {\n\n    private menuSource = new Subject<string>();\n\n    private resetSource = new Subject();\n\n    menuSource$ = this.menuSource.asObservable();\n    \n    resetSource$ = this.resetSource.asObservable();\n\n    layoutMode: MenuOrientation = MenuOrientation.STATIC;\n\n    menuHoverActive: boolean;\n\n    itens: MenuItem[] = [];\n\n    resetMenu: boolean;\n\n    isMobile: boolean;\n\n    isTablet: boolean;\n\n    isDesktop: boolean;\n\n    overlayMenuActive: boolean;\n\n    staticMenuMobileActive: boolean;\n\n    staticMenuDesktopInactive: boolean;\n\n    isOverlay() {\n        return this.layoutMode === MenuOrientation.OVERLAY;\n    }\n\n    isHorizontal() {\n        return this.layoutMode === MenuOrientation.HORIZONTAL;\n    }\n\n    isSlim() {\n        return this.layoutMode === MenuOrientation.SLIM;\n    }\n\n    isStatic() {\n        return this.layoutMode === MenuOrientation.STATIC;\n    }\n\n    changeToStaticMenu() {\n        this.layoutMode = MenuOrientation.STATIC;\n    }\n\n    changeToOverlayMenu() {\n        this.layoutMode = MenuOrientation.OVERLAY;\n    }\n\n    changeToHorizontalMenu() {\n        this.layoutMode = MenuOrientation.HORIZONTAL;\n    }\n\n    changeToSlimMenu() {\n        this.layoutMode = MenuOrientation.SLIM;\n    }\n\n    onMenuStateChange(key: string) {\n        this.menuSource.next(key);\n    }\n\n    reset() {\n        this.resetSource.next();\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { BreadcrumbService } from './breadcrumb.service';\nimport { RouterModule } from '@angular/router';\nimport { BreadcrumbModule as PrimengBreadcrumbModule } from 'primeng/breadcrumb';\nimport { ButtonModule } from 'primeng/button';\n\n\n@NgModule({\n    declarations: [BreadcrumbComponent],\n    imports: [\n        CommonModule,\n        RouterModule,\n        PrimengBreadcrumbModule,\n        ButtonModule\n    ],\n    exports: [\n        BreadcrumbComponent\n    ],\n    providers: [\n        BreadcrumbService\n    ]\n})\nexport class BreadcrumbModule { }\n","import { Component } from '@angular/core';\nimport { MenusService } from './menu.service';\n\n@Component({\n    selector: 'app-menu',\n    templateUrl: './menu.component.html',\n})\nexport class MenuComponent {\n\n    constructor(public menuService: MenusService) {}\n\n}\n\n","import { Component, Input } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { MenuItem } from 'primeng/api';\nimport { MenusService } from './menu.service';\nimport { Subscription } from 'rxjs';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n    selector: '[submenu]',\n    templateUrl: './submenu.component.html',\n    host: {\n        '[class.layout-root-menuitem]': 'root || active',\n        '[class.active-menuitem]': '(active)'\n    },\n    animations: [\n        trigger('children', [\n            state('void', style({\n                height: '0px',\n                padding: '0px'\n            })),\n            state('hiddenAnimated', style({\n                height: '0px',\n                padding: '0px'\n            })),\n            state('visibleAnimated', style({\n                height: '*'\n            })),\n            state('visible', style({\n                height: '*'\n            })),\n            state('hidden', style({\n                height: '0px',\n                padding: '0px'\n            })),\n            transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),\n            transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),\n            transition('void => visibleAnimated, visibleAnimated => void',\n                animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\n        ])\n    ]\n})\nexport class SubMenuComponent {\n\n    @Input() item: any;\n\n    @Input() root: boolean;\n\n    @Input() visible: boolean;\n\n    @Input() parentKey: string;\n\n    @Input() index: number;\n\n    active = false;\n\n    _reset: boolean;\n\n    _parentActive: boolean;\n\n    activeIndex: number;\n\n    key: string;\n\n    menuSourceSubscription: Subscription;\n\n    menuResetSubscription: Subscription;\n\n    constructor(public menuService: MenusService, public router: Router) { \n\n        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(key => {\n            // deactivate current active menu\n            if (this.active && this.key !== key && key.indexOf(this.key) !== 0) {\n                this.active = false;\n            }\n        });\n\n        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {\n            this.active = false;\n        });\n\n        this.router.events.pipe(filter(event => event instanceof NavigationEnd))\n            .subscribe(params => {\n                if (this.menuService.isHorizontal() || this.menuService.isSlim()) {\n                    this.active = false;\n                } else {\n                    if (this.item.routerLink) {\n                        this.updateActiveStateFromRoute();\n                    } else {\n                        this.active = false;\n                    }\n                }\n            });\n\n    }\n\n    updateActiveStateFromRoute() {\n        this.active = this.router.isActive(this.item.routerLink[0], this.item.items ? false : true);\n    }\n\n    /**\n     * Alterar o menu root entre aberto e fechado\n     */\n    private rootMenuToggle() {\n        if (this.root) {\n            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;\n        }\n    }\n\n    /**\n     * Activa o menu por index e desativa o item ativo\n     * @param index\n     */\n    private activeMenuByIndex(index: number) {\n        this.activeIndex = (this.activeIndex === index) ? null : index;\n        return this.activeIndex;\n    }\n\n    /**\n     * Verifica se foi informado um comando para o item de menu e executa caso necessário\n     * @param item menu\n     */\n    private execCommand(event: Event, item: MenuItem) {\n        if (item.command) {\n            item.command({ 'originalEvent': event, 'item': item });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Esconte o menu caso este não possua itens\n     * @param item menu\n     */\n    private hideMenu(item: MenuItem) {\n        if (!item.items) {\n            if (this.menuService.isHorizontal() || this.menuService.isSlim()) {\n                this.menuService.resetMenu = true;\n            } else {\n                this.menuService.resetMenu = false;\n            }\n\n            this.menuService.overlayMenuActive = false;\n            this.menuService.staticMenuMobileActive = false;\n            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    itemClick(event: Event) {\n        // avoid processing disabled items\n        if (this.item.disabled) {\n            event.preventDefault();\n            return true;\n        }\n\n        // navigate with hover in horizontal mode\n        if (this.root) {\n            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;\n        }\n\n        // notify other items\n        this.menuService.onMenuStateChange(this.key);\n\n        // execute command\n        if (this.item.command) {\n            this.item.command({originalEvent: event, item: this.item});\n        }\n\n        // toggle active state\n        if (this.item.items) {\n            this.active = !this.active;\n        } else {\n            // activate item\n            this.active = true;\n\n            // reset horizontal and slim menu\n            if (this.menuService.isHorizontal() || this.menuService.isSlim()) {\n                this.menuService.reset();\n                this.menuService.menuHoverActive = false;\n            }\n\n            if (!this.menuService.isStatic()) {\n                this.active = false;\n            }\n        }\n\n        this.removeActiveInk(event);\n    }\n\n    onMouseEnter() {\n        // activate item on hover\n        if (this.root) {\n            this.active = true;\n        }\n    }\n\n    isActive(index: number): boolean {\n        return this.activeIndex === index;\n    }\n\n    @Input() get reset(): boolean {\n        return this._reset;\n    }\n\n    set reset(val: boolean) {\n        this._reset = val;\n\n        if (this._reset && (this.menuService.isHorizontal() || this.menuService.isSlim())) {\n            this.activeIndex = null;\n        }\n    }\n\n    @Input() get parentActive(): boolean {\n        return this._parentActive;\n    }\n\n    set parentActive(val: boolean) {\n        this._parentActive = val;\n\n        if (!this._parentActive) {\n            this.activeIndex = null;\n        }\n    }\n\n    removeActiveInk(event: Event) {\n        let currentTarget = (event.currentTarget as HTMLElement);\n        setTimeout(() => {\n            if (currentTarget) {\n                let activeInk = currentTarget.querySelector('.p-ink-active');\n                if (activeInk) {\n                    if (activeInk.classList)\n                        activeInk.classList.remove('p-ink-active');\n                    else\n                        activeInk.className = activeInk.className.replace(new RegExp('(^|\\\\b)' + 'p-ink-active'.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n                }\n            }\n        }, 401);\n    }\n\n    ngOnDestroy() {\n        if (this.menuSourceSubscription) {\n            this.menuSourceSubscription.unsubscribe();\n        }\n\n        if (this.menuResetSubscription) {\n            this.menuResetSubscription.unsubscribe();\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MenuComponent } from './menu.component';\nimport { SubMenuComponent } from './submenu.component';\nimport { RouterModule } from '@angular/router';\nimport { MenusService } from './menu.service';\nimport { TooltipModule } from 'primeng/tooltip';\n\n@NgModule({\n    declarations: [\n        MenuComponent,\n        SubMenuComponent\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        TooltipModule\n    ],\n    exports: [\n        MenuComponent,\n        SubMenuComponent\n    ],\n    providers: [\n        MenusService\n    ]\n})\nexport class MenuModule { }\n","import { Route } from '@angular/router';\n\nimport { CrudResolveGuard } from './crud-resolve.guard';\n\nexport function crudRouteBuilder(route: string, parent: any, list: any, form: any): Route {\n    return   {\n        path: route,\n        component: parent,\n        data: { breadcrumb: route },\n        children: [\n            {\n                path: 'list',\n                component: list,\n                data: { breadcrumb: 'list' },\n            },\n            {\n                path: ':action',\n                component: form,\n                data: { breadcrumb: ':action' },\n            },\n            {\n                path: ':action/:id',\n                component: form,\n                resolve: {\n                    value: CrudResolveGuard\n                },\n                data: { breadcrumb: ':action' },\n            }\n        ]\n    }\n\n\n}\n"]}