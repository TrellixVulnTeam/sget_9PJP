import { Component, Input } from "@angular/core";
import { provideValueAccessor } from "@nuvem/angular-base";
import { FieldComponent } from "../field.component";
export class InputTextComponent extends FieldComponent {
    constructor() {
        super(...arguments);
        this.type = "text";
    }
    ngOnInit() {
        super.ngOnInit();
        this.setElementRefAttr("min", this.min);
        this.setElementRefAttr("max", this.max);
        this.setElementRefAttr("minLength", this.minLength);
        this.setElementRefAttr("maxLength", this.maxLength);
        this.setElementRefAttr("pattern", this.pattern);
    }
}
InputTextComponent.decorators = [
    { type: Component, args: [{
                selector: "[nInputText]",
                template: "<span #notification form-notification class=\"p-float-label\" [name]=\"name\" [form]=\"form\">\n    <input #input\n        pInputText\n        [ngClass]=\"{ 'ng-invalid ng-dirty': notification.message }\"\n        [type]=\"type\"\n        [name]=\"name\"\n        (blur)=\"onBlurEvent($event)\"\n        (focus)=\"onFocusEvent($event)\"\n        [formControl]=\"formControl\" />\n    <label [for]=\"name\" [innerHTML]=\"label\"></label>\n    <nValidationMessage [control]=\"formControl\" *ngIf=\"!notification.message\"></nValidationMessage>\n    <ng-content></ng-content>\n</span>\n",
                providers: [provideValueAccessor(InputTextComponent)]
            },] }
];
InputTextComponent.propDecorators = {
    minLength: [{ type: Input }],
    maxLength: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    pattern: [{ type: Input }],
    type: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcmltZW5nLWNvbXBvbmVudHMvc3JjL2xpYi9jcnVkL2NvbXBvbmVudHMvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFPcEQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGNBQXNCO0lBTDlEOztRQWlCYSxTQUFJLEdBQVcsTUFBTSxDQUFDO0lBV25DLENBQUM7SUFURyxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELENBQUM7OztZQTFCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLG1sQkFBMEM7Z0JBQzFDLFNBQVMsRUFBRSxDQUFFLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLENBQUU7YUFDMUQ7Ozt3QkFHSSxLQUFLO3dCQUVMLEtBQUs7a0JBRUwsS0FBSztrQkFFTCxLQUFLO3NCQUVMLEtBQUs7bUJBRUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBwcm92aWRlVmFsdWVBY2Nlc3NvciB9IGZyb20gXCJAbnV2ZW0vYW5ndWxhci1iYXNlXCI7XG5pbXBvcnQgeyBGaWVsZENvbXBvbmVudCB9IGZyb20gXCIuLi9maWVsZC5jb21wb25lbnRcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiW25JbnB1dFRleHRdXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9pbnB1dC10ZXh0LmNvbXBvbmVudC5odG1sXCIsXG4gICAgcHJvdmlkZXJzOiBbIHByb3ZpZGVWYWx1ZUFjY2Vzc29yKElucHV0VGV4dENvbXBvbmVudCkgXSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0Q29tcG9uZW50IGV4dGVuZHMgRmllbGRDb21wb25lbnQ8c3RyaW5nPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBASW5wdXQoKSBtaW5MZW5ndGg6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpIG1heExlbmd0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KCkgbWluOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKSBtYXg6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpIHBhdHRlcm46IHN0cmluZyB8IFJlZ0V4cDtcblxuICAgIEBJbnB1dCgpIHR5cGU6IHN0cmluZyA9IFwidGV4dFwiO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudFJlZkF0dHIoXCJtaW5cIiwgdGhpcy5taW4pO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnRSZWZBdHRyKFwibWF4XCIsIHRoaXMubWF4KTtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50UmVmQXR0cihcIm1pbkxlbmd0aFwiLCB0aGlzLm1pbkxlbmd0aCk7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudFJlZkF0dHIoXCJtYXhMZW5ndGhcIiwgdGhpcy5tYXhMZW5ndGgpO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnRSZWZBdHRyKFwicGF0dGVyblwiLCB0aGlzLnBhdHRlcm4pO1xuICAgIH1cblxufVxuIl19