{"ast":null,"code":"import _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directive, ElementRef, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { UniqueComponentId } from 'primeng/utils';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nvar BadgeDirective = /*#__PURE__*/function () {\n  function BadgeDirective(el) {\n    _classCallCheck(this, BadgeDirective);\n\n    this.el = el;\n    this.iconPos = 'left';\n  }\n\n  _createClass(BadgeDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.id = UniqueComponentId() + '_badge';\n      var el = this.el.nativeElement.nodeName.indexOf(\"-\") != -1 ? this.el.nativeElement.firstChild : this.el.nativeElement;\n      var badge = document.createElement('span');\n      badge.id = this.id;\n      badge.className = 'p-badge p-component';\n\n      if (this.severity) {\n        DomHandler.addClass(badge, 'p-badge-' + this.severity);\n      }\n\n      if (this.value != null) {\n        badge.appendChild(document.createTextNode(this.value));\n\n        if (String(this.value).length === 1) {\n          DomHandler.addClass(badge, 'p-badge-no-gutter');\n        }\n      } else {\n        DomHandler.addClass(badge, 'p-badge-dot');\n      }\n\n      DomHandler.addClass(el, 'p-overlay-badge');\n      el.appendChild(badge);\n      this.initialized = true;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(val) {\n      if (val !== this._value) {\n        this._value = val;\n\n        if (this.initialized) {\n          var badge = document.getElementById(this.id);\n\n          if (this._value) {\n            if (DomHandler.hasClass(badge, 'p-badge-dot')) DomHandler.removeClass(badge, 'p-badge-dot');\n\n            if (String(this._value).length === 1) {\n              DomHandler.addClass(badge, 'p-badge-no-gutter');\n            } else {\n              DomHandler.removeClass(badge, 'p-badge-no-gutter');\n            }\n          } else if (!this._value && !DomHandler.hasClass(badge, 'p-badge-dot')) {\n            DomHandler.addClass(badge, 'p-badge-dot');\n          }\n\n          badge.innerHTML = '';\n          badge.appendChild(document.createTextNode(this._value));\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.initialized = false;\n    }\n  }]);\n\n  return BadgeDirective;\n}();\n\nBadgeDirective.ɵfac = function BadgeDirective_Factory(t) {\n  return new (t || BadgeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nBadgeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BadgeDirective,\n  selectors: [[\"\", \"pBadge\", \"\"]],\n  inputs: {\n    iconPos: \"iconPos\",\n    value: \"value\",\n    severity: \"severity\"\n  }\n});\n\nBadgeDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nBadgeDirective.propDecorators = {\n  iconPos: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  severity: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BadgeDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[pBadge]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    iconPos: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    severity: [{\n      type: Input\n    }]\n  });\n})();\n\nvar Badge = /*#__PURE__*/function () {\n  function Badge() {\n    _classCallCheck(this, Badge);\n  }\n\n  _createClass(Badge, [{\n    key: \"containerClass\",\n    value: function containerClass() {\n      return {\n        'p-badge p-component': true,\n        'p-badge-no-gutter': this.value && String(this.value).length === 1,\n        'p-badge-lg': this.size === 'large',\n        'p-badge-xl': this.size === 'xlarge',\n        'p-badge-info': this.severity === 'info',\n        'p-badge-success': this.severity === 'success',\n        'p-badge-warning': this.severity === 'warning',\n        'p-badge-danger': this.severity === 'danger'\n      };\n    }\n  }]);\n\n  return Badge;\n}();\n\nBadge.ɵfac = function Badge_Factory(t) {\n  return new (t || Badge)();\n};\n\nBadge.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: Badge,\n  selectors: [[\"p-badge\"]],\n  inputs: {\n    styleClass: \"styleClass\",\n    style: \"style\",\n    size: \"size\",\n    severity: \"severity\",\n    value: \"value\"\n  },\n  decls: 2,\n  vars: 5,\n  consts: [[3, \"ngClass\", \"ngStyle\"]],\n  template: function Badge_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.containerClass())(\"ngStyle\", ctx.style);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle],\n  styles: [\".p-badge{border-radius:10px;display:inline-block;padding:0 .5rem;text-align:center}.p-overlay-badge{position:relative}.p-overlay-badge .p-badge{margin:0;position:absolute;right:0;top:0;transform:translate(50%,-50%);transform-origin:100% 0}.p-badge-dot{height:.5rem;min-width:.5rem;width:.5rem}.p-badge-dot,.p-badge-no-gutter{border-radius:50%;padding:0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nBadge.propDecorators = {\n  styleClass: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  size: [{\n    type: Input\n  }],\n  severity: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Badge, [{\n    type: Component,\n    args: [{\n      selector: 'p-badge',\n      template: \"\\n        <span [ngClass]=\\\"containerClass()\\\" [class]=\\\"styleClass\\\" [ngStyle]=\\\"style\\\">\\n                {{value}}\\n        </span>\\n    \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".p-badge{border-radius:10px;display:inline-block;padding:0 .5rem;text-align:center}.p-overlay-badge{position:relative}.p-overlay-badge .p-badge{margin:0;position:absolute;right:0;top:0;transform:translate(50%,-50%);transform-origin:100% 0}.p-badge-dot{height:.5rem;min-width:.5rem;width:.5rem}.p-badge-dot,.p-badge-no-gutter{border-radius:50%;padding:0}\"]\n    }]\n  }], null, {\n    styleClass: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    severity: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n\nvar BadgeModule = function BadgeModule() {\n  _classCallCheck(this, BadgeModule);\n};\n\nBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BadgeModule\n});\nBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BadgeModule_Factory(t) {\n    return new (t || BadgeModule)();\n  },\n  imports: [[CommonModule], SharedModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BadgeModule, {\n    declarations: function declarations() {\n      return [Badge, BadgeDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [Badge, BadgeDirective, SharedModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [Badge, BadgeDirective, SharedModule],\n      declarations: [Badge, BadgeDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Badge, BadgeDirective, BadgeModule };","map":{"version":3,"sources":["../../src/app/components/badge/badge.ts","../../src/app/components/badge/primeng-badge.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgModule, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, QueryList, ContentChildren, TemplateRef, Directive, OnDestroy, AfterViewInit, ElementRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { UniqueComponentId } from 'primeng/utils';\n\n@Directive({\n    selector: '[pBadge]'\n})\nexport class BadgeDirective implements AfterViewInit, OnDestroy {\n\n    @Input() iconPos: 'left' | 'right' | 'top' | 'bottom' = 'left';\n            \n    public _value: string;\n            \n    public initialized: boolean;\n\n    private id: string;\n    \n    constructor(public el: ElementRef) {}\n    \n    ngAfterViewInit() {\n        this.id = UniqueComponentId() + '_badge';\n        let el = this.el.nativeElement.nodeName.indexOf(\"-\") != -1 ? this.el.nativeElement.firstChild : this.el.nativeElement; \n\n        let badge = document.createElement('span');\n        badge.id = this.id ;\n        badge.className = 'p-badge p-component';\n\n        if (this.severity) {\n            DomHandler.addClass(badge, 'p-badge-' + this.severity);\n        }\n        \n        if (this.value != null) {\n            badge.appendChild(document.createTextNode(this.value));\n            \n            if (String(this.value).length === 1) {\n                DomHandler.addClass(badge, 'p-badge-no-gutter');\n            }\n        }\n        else {\n            DomHandler.addClass(badge, 'p-badge-dot');\n        }\n\n        DomHandler.addClass(el, 'p-overlay-badge');\n        el.appendChild(badge);\n\n        this.initialized = true;\n    }\n\n    @Input() get value(): string {\n        return this._value;\n    }\n\n    set value(val: string) {\n        if (val !== this._value) {\n            this._value = val;\n\n            if (this.initialized) {\n                let badge = document.getElementById(this.id);\n\n                if (this._value) {\n                    if (DomHandler.hasClass(badge, 'p-badge-dot'))\n                        DomHandler.removeClass(badge, 'p-badge-dot');\n\n                    if (String(this._value).length === 1) {\n                        DomHandler.addClass(badge, 'p-badge-no-gutter');\n                    }\n                    else {\n                        DomHandler.removeClass(badge, 'p-badge-no-gutter');\n                    }\n                }\n                else if (!this._value && !DomHandler.hasClass(badge, 'p-badge-dot')) {\n                    DomHandler.addClass(badge, 'p-badge-dot');\n                }\n\n                badge.innerHTML = '';\n                badge.appendChild(document.createTextNode(this._value));\n            }\n        }\n    }\n\n    @Input() severity: string;\n        \n    ngOnDestroy() {\n        this.initialized = false;\n    }\n}\n\n@Component({\n    selector: 'p-badge',\n    template: `\n        <span [ngClass]=\"containerClass()\" [class]=\"styleClass\" [ngStyle]=\"style\">\n                {{value}}\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./badge.css']\n})\nexport class Badge {\n\n    @Input() styleClass: string;\n\n    @Input() style: any;\n\n    @Input() size: string;\n    \n    @Input() severity: string;\n    \n    @Input() value: string;\n    \n    containerClass() {\n        return {\n            'p-badge p-component': true,\n            'p-badge-no-gutter': this.value && String(this.value).length === 1,\n            'p-badge-lg': this.size === 'large',\n            'p-badge-xl': this.size === 'xlarge',\n            'p-badge-info': this.severity === 'info',\n            'p-badge-success': this.severity === 'success',\n            'p-badge-warning': this.severity === 'warning',\n            'p-badge-danger': this.severity === 'danger'\n        };\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Badge, BadgeDirective, SharedModule],\n    declarations: [Badge, BadgeDirective]\n})\nexport class BadgeModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}