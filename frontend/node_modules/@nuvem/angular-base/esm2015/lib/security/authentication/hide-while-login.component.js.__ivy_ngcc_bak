import { Component, ElementRef, Input } from '@angular/core';
import { Authentication } from './authentication';
import { BlockUiService } from '../../block-ui/block-ui.service';
/**
 *
 * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.
 *
 * @class
 */
export class HideWhileLoginComponent {
    /**
     * constructor method
     * @param {ElementRef} hostComponent
     * @param {AbstractAuthentication} auth
     * @param {BlockUiService} blockUiService
     * @constructor
     */
    constructor(hostComponent, auth, blockUiService) {
        this.hostComponent = hostComponent;
        this.auth = auth;
        this.blockUiService = blockUiService;
        /**
         * Carrega conteúdo
         * @type {loadingString}
         */
        this.loadingContent = "";
        this.waitingLogin = false;
    }
    ngOnInit() {
        this.waitingLogin = !this.auth.isAuthenticated();
    }
    ngAfterContentInit() {
        if (!this.auth.isAuthenticated()) {
            this.blockUiService.show();
        }
    }
    ngAfterViewInit() {
        if (!this.auth.isAuthenticated()) {
            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'none';
            }
        }
        this.loginNotifications = this.auth.getLoginNotifications().subscribe(() => {
            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {
                this.hostComponent.nativeElement.children[i].style.display = 'inherit';
            }
            this.waitingLogin = false;
            this.blockUiService.hide();
        });
    }
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy() {
        this.loginNotifications.unsubscribe();
    }
}
HideWhileLoginComponent.decorators = [
    { type: Component, args: [{
                selector: '[hide-while-login]',
                template: "<span *ngIf=\"waitingLogin\">{{ loadingContent }}</span>\n<ng-content></ng-content>"
            },] }
];
HideWhileLoginComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Authentication },
    { type: BlockUiService }
];
HideWhileLoginComponent.propDecorators = {
    loadingContent: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9zZWN1cml0eS9hdXRoZW50aWNhdGlvbi9oaWRlLXdoaWxlLWxvZ2luLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBcUIsS0FBSyxFQUFtQyxNQUFNLGVBQWUsQ0FBQztBQUVqSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRWpFOzs7OztHQUtHO0FBS0gsTUFBTSxPQUFPLHVCQUF1QjtJQWFoQzs7Ozs7O09BTUc7SUFDSCxZQUNZLGFBQXlCLEVBQ3pCLElBQTBCLEVBQzFCLGNBQThCO1FBRjlCLGtCQUFhLEdBQWIsYUFBYSxDQUFZO1FBQ3pCLFNBQUksR0FBSixJQUFJLENBQXNCO1FBQzFCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQXJCMUM7OztXQUdHO1FBRUksbUJBQWMsR0FBVyxFQUFFLENBQUM7UUFJNUIsaUJBQVksR0FBWSxLQUFLLENBQUM7SUFjckMsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZFLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzthQUN2RTtTQUNKO1FBRUQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3ZFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2RSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7YUFDMUU7WUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7T0FHRztJQUNILFdBQVc7UUFDUCxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7O1lBL0RKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QiwrRkFBZ0Q7YUFDbkQ7OztZQWZtQixVQUFVO1lBRXJCLGNBQWM7WUFFZCxjQUFjOzs7NkJBa0JsQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCwgSW5wdXQsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuaW1wb3J0IHsgQmxvY2tVaVNlcnZpY2UgfSBmcm9tICcuLi8uLi9ibG9jay11aS9ibG9jay11aS5zZXJ2aWNlJztcblxuLyoqXG4gKiBcbiAqIENvbXBvbmVudGUgSGlkZVdoaWxlTG9naW5Db21wb25lbnQsIHV0aWxpemFkbyBwYXJhIG7Do28gYXByZXNlbnRhciBhIHRlbGEgZGEgYXBsaWNhw6fDo28gZW5xdWFudG8gYSBmYXNlIGRlIGxvZ2luIG7Do28gdGVybWlub3UuXG4gKiBcbiAqIEBjbGFzc1xuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1toaWRlLXdoaWxlLWxvZ2luXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2hpZGUtd2hpbGUtbG9naW4uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEhpZGVXaGlsZUxvZ2luQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgLyoqXG4gICAgICogQ2FycmVnYSBjb250ZcO6ZG9cbiAgICAgKiBAdHlwZSB7bG9hZGluZ1N0cmluZ31cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBsb2FkaW5nQ29udGVudDogc3RyaW5nID0gXCJcIjtcblxuICAgIHByaXZhdGUgbG9naW5Ob3RpZmljYXRpb25zOiBTdWJzY3JpcHRpb247XG5cbiAgICBwdWJsaWMgd2FpdGluZ0xvZ2luOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnRSZWZ9IGhvc3RDb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge0Fic3RyYWN0QXV0aGVudGljYXRpb259IGF1dGhcbiAgICAgKiBAcGFyYW0ge0Jsb2NrVWlTZXJ2aWNlfSBibG9ja1VpU2VydmljZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGhvc3RDb21wb25lbnQ6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgYXV0aDogQXV0aGVudGljYXRpb248VXNlcj4sXG4gICAgICAgIHByaXZhdGUgYmxvY2tVaVNlcnZpY2U6IEJsb2NrVWlTZXJ2aWNlXG4gICAgKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMud2FpdGluZ0xvZ2luID0gIXRoaXMuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5hdXRoLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmJsb2NrVWlTZXJ2aWNlLnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmF1dGguaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5ob3N0Q29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3RDb21wb25lbnQubmF0aXZlRWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucyA9IHRoaXMuYXV0aC5nZXRMb2dpbk5vdGlmaWNhdGlvbnMoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmhvc3RDb21wb25lbnQubmF0aXZlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuaG9zdENvbXBvbmVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSAnaW5oZXJpdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLndhaXRpbmdMb2dpbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ibG9ja1VpU2VydmljZS5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5nT25EZXN0cm95IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMudW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbn1cbiJdfQ==