import { Injectable } from "@angular/core";
import { FormNotificationService } from "../services/form-notification.service";
import { CleanFormNotification } from "../types/clean-form-notification.type";
import * as i0 from "@angular/core";
import * as i1 from "../services/form-notification.service";
/**
 * Implementação de classe para interceptar e tratar requisições http/https
 * @class
 */
export class FormNotificationInterceptor {
    /**
     * Método construtor
     * @constructor
     * @param {AbstractAuthentication} auth
     */
    constructor(formNotificationService) {
        this.formNotificationService = formNotificationService;
    }
    /**
     * Método responsável por interceptar requisições HTTP/HTTPS
     * @public
     * @param {HttpRequest<any>} request
     * @param {HttpHandler} next
     * @returns Observable<HttpEvent<any>>
     */
    intercept(request, next) {
        this.formNotificationService
            .notify(new CleanFormNotification(request.url));
        return next.handle(request);
    }
}
FormNotificationInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormNotificationInterceptor_Factory() { return new FormNotificationInterceptor(i0.ɵɵinject(i1.FormNotificationService)); }, token: FormNotificationInterceptor, providedIn: "root" });
FormNotificationInterceptor.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
FormNotificationInterceptor.ctorParameters = () => [
    { type: FormNotificationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24uaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9mb3JtLW5vdGlmaWNhdGlvbi9pbnRlcmNlcHRvci9mb3JtLW5vdGlmaWNhdGlvbi5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDOzs7QUFFOUU7OztHQUdHO0FBSUgsTUFBTSxPQUFPLDJCQUEyQjtJQUVwQzs7OztPQUlHO0lBQ0gsWUFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFBRyxDQUFDO0lBRXhFOzs7Ozs7T0FNRztJQUNILFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCO1FBQ2xELElBQUksQ0FBQyx1QkFBdUI7YUFDdkIsTUFBTSxDQUFDLElBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7WUF2QkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFUUSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEh0dHBFdmVudCxcbiAgICBIdHRwSGFuZGxlcixcbiAgICBIdHRwSW50ZXJjZXB0b3IsXG4gICAgSHR0cFJlcXVlc3Rcbn0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IEZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2Zvcm0tbm90aWZpY2F0aW9uLnNlcnZpY2VcIjtcbmltcG9ydCB7IENsZWFuRm9ybU5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi90eXBlcy9jbGVhbi1mb3JtLW5vdGlmaWNhdGlvbi50eXBlXCI7XG5cbi8qKlxuICogSW1wbGVtZW50YcOnw6NvIGRlIGNsYXNzZSBwYXJhIGludGVyY2VwdGFyIGUgdHJhdGFyIHJlcXVpc2nDp8O1ZXMgaHR0cC9odHRwc1xuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1Ob3RpZmljYXRpb25JbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIGNvbnN0cnV0b3JcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0Fic3RyYWN0QXV0aGVudGljYXRpb259IGF1dGhcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlOiBGb3JtTm90aWZpY2F0aW9uU2VydmljZSkge31cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciBpbnRlcmNlcHRhciByZXF1aXNpw6fDtWVzIEhUVFAvSFRUUFNcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtIdHRwUmVxdWVzdDxhbnk+fSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHtIdHRwSGFuZGxlcn0gbmV4dFxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+XG4gICAgICovXG4gICAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgICAgICB0aGlzLmZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAubm90aWZ5KG5ldyBDbGVhbkZvcm1Ob3RpZmljYXRpb24ocmVxdWVzdC51cmwpKTtcbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICAgIH1cblxufVxuIl19