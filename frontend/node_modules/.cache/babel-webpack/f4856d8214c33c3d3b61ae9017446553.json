{"ast":null,"code":"import _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RippleModule } from 'primeng/ripple';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'primeng/ripple';\nimport * as ɵngcc2 from '@angular/common';\n\nvar _c0 = function _c0(a1, a2) {\n  return {\n    \"p-button-icon\": true,\n    \"p-button-icon-left\": a1,\n    \"p-button-icon-right\": a2\n  };\n};\n\nfunction ToggleButton_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r0.checked ? ctx_r0.onIcon : ctx_r0.offIcon);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r0.iconPos === \"left\", ctx_r0.iconPos === \"right\"));\n  }\n}\n\nvar _c1 = function _c1(a1, a2, a3) {\n  return {\n    \"p-button p-togglebutton p-component\": true,\n    \"p-button-icon-only\": a1,\n    \"p-highlight\": a2,\n    \"p-disabled\": a3\n  };\n};\n\nvar TOGGLEBUTTON_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return ToggleButton;\n  }),\n  multi: true\n};\n\nvar ToggleButton = /*#__PURE__*/function () {\n  function ToggleButton(cd) {\n    _classCallCheck(this, ToggleButton);\n\n    this.cd = cd;\n    this.iconPos = 'left';\n    this.onChange = new EventEmitter();\n    this.checked = false;\n\n    this.onModelChange = function () {};\n\n    this.onModelTouched = function () {};\n  }\n\n  _createClass(ToggleButton, [{\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (!this.disabled) {\n        this.checked = !this.checked;\n        this.onModelChange(this.checked);\n        this.onModelTouched();\n        this.onChange.emit({\n          originalEvent: event,\n          checked: this.checked\n        });\n        this.cd.markForCheck();\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.onModelTouched();\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = value;\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"hasOnLabel\",\n    get: function get() {\n      return this.onLabel && this.onLabel.length > 0;\n    }\n  }, {\n    key: \"hasOffLabel\",\n    get: function get() {\n      return this.onLabel && this.onLabel.length > 0;\n    }\n  }]);\n\n  return ToggleButton;\n}();\n\nToggleButton.ɵfac = function ToggleButton_Factory(t) {\n  return new (t || ToggleButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nToggleButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ToggleButton,\n  selectors: [[\"p-toggleButton\"]],\n  inputs: {\n    iconPos: \"iconPos\",\n    disabled: \"disabled\",\n    onLabel: \"onLabel\",\n    offLabel: \"offLabel\",\n    onIcon: \"onIcon\",\n    offIcon: \"offIcon\",\n    ariaLabelledBy: \"ariaLabelledBy\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    inputId: \"inputId\",\n    tabindex: \"tabindex\"\n  },\n  outputs: {\n    onChange: \"onChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TOGGLEBUTTON_VALUE_ACCESSOR])],\n  decls: 4,\n  vars: 12,\n  consts: [[\"role\", \"checkbox\", \"pRipple\", \"\", 3, \"ngClass\", \"ngStyle\", \"click\", \"keydown.enter\"], [3, \"class\", \"ngClass\", 4, \"ngIf\"], [1, \"p-button-label\"], [3, \"ngClass\"]],\n  template: function ToggleButton_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function ToggleButton_Template_div_click_0_listener($event) {\n        return ctx.toggle($event);\n      })(\"keydown.enter\", function ToggleButton_Template_div_keydown_enter_0_listener($event) {\n        return ctx.toggle($event);\n      });\n      ɵngcc0.ɵɵtemplate(1, ToggleButton_span_1_Template, 1, 6, \"span\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n      ɵngcc0.ɵɵtext(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(8, _c1, ctx.onIcon && ctx.offIcon && !ctx.hasOnLabel && !ctx.hasOffLabel, ctx.checked, ctx.disabled))(\"ngStyle\", ctx.style);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : \"0\")(\"aria-checked\", ctx.checked);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.onIcon || ctx.offIcon);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.checked ? ctx.hasOnLabel ? ctx.onLabel : \"\" : ctx.hasOffLabel ? ctx.offLabel : \"\");\n    }\n  },\n  directives: [ɵngcc1.Ripple, ɵngcc2.NgClass, ɵngcc2.NgStyle, ɵngcc2.NgIf],\n  styles: [\".p-button[_ngcontent-%COMP%]{-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:inline-flex;margin:0;overflow:hidden;position:relative;text-align:center;user-select:none;vertical-align:bottom}.p-button-label[_ngcontent-%COMP%]{flex:1 1 auto}.p-button-icon-right[_ngcontent-%COMP%]{order:1}.p-button[_ngcontent-%COMP%]:disabled{cursor:default}.p-button-icon-only[_ngcontent-%COMP%]{justify-content:center}.p-button-icon-only[_ngcontent-%COMP%]   .p-button-label[_ngcontent-%COMP%]{flex:0 0 auto;visibility:hidden;width:0}.p-button-vertical[_ngcontent-%COMP%]{flex-direction:column}.p-button-icon-bottom[_ngcontent-%COMP%]{order:2}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]{margin:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:not(:last-child){border-right:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:not(:first-of-type):not(:last-of-type){border-radius:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:first-of-type{border-bottom-right-radius:0;border-top-right-radius:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:last-of-type{border-bottom-left-radius:0;border-top-left-radius:0}.p-buttonset[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]:focus{position:relative;z-index:1}\"],\n  changeDetection: 0\n});\n\nToggleButton.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nToggleButton.propDecorators = {\n  onLabel: [{\n    type: Input\n  }],\n  offLabel: [{\n    type: Input\n  }],\n  onIcon: [{\n    type: Input\n  }],\n  offIcon: [{\n    type: Input\n  }],\n  ariaLabelledBy: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  inputId: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  iconPos: [{\n    type: Input\n  }],\n  onChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToggleButton, [{\n    type: Component,\n    args: [{\n      selector: 'p-toggleButton',\n      template: \"\\n        <div [ngClass]=\\\"{'p-button p-togglebutton p-component': true, 'p-button-icon-only': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),'p-highlight': checked,'p-disabled':disabled}\\\" \\n                        [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" (click)=\\\"toggle($event)\\\" (keydown.enter)=\\\"toggle($event)\\\"\\n                        [attr.tabindex]=\\\"disabled ? null : '0'\\\" role=\\\"checkbox\\\" [attr.aria-checked]=\\\"checked\\\" pRipple>\\n            <span *ngIf=\\\"onIcon||offIcon\\\" [class]=\\\"checked ? this.onIcon : this.offIcon\\\" \\n                [ngClass]=\\\"{'p-button-icon': true, 'p-button-icon-left': (iconPos === 'left'), 'p-button-icon-right': (iconPos === 'right')}\\\"></span>\\n            <span class=\\\"p-button-label\\\">{{checked ? hasOnLabel ? onLabel : '' : hasOffLabel ? offLabel : ''}}</span>\\n        </div>\\n    \",\n      providers: [TOGGLEBUTTON_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".p-button{-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:inline-flex;margin:0;overflow:hidden;position:relative;text-align:center;user-select:none;vertical-align:bottom}.p-button-label{flex:1 1 auto}.p-button-icon-right{order:1}.p-button:disabled{cursor:default}.p-button-icon-only{justify-content:center}.p-button-icon-only .p-button-label{flex:0 0 auto;visibility:hidden;width:0}.p-button-vertical{flex-direction:column}.p-button-icon-bottom{order:2}.p-buttonset .p-button{margin:0}.p-buttonset .p-button:not(:last-child){border-right:0}.p-buttonset .p-button:not(:first-of-type):not(:last-of-type){border-radius:0}.p-buttonset .p-button:first-of-type{border-bottom-right-radius:0;border-top-right-radius:0}.p-buttonset .p-button:last-of-type{border-bottom-left-radius:0;border-top-left-radius:0}.p-buttonset .p-button:focus{position:relative;z-index:1}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    iconPos: [{\n      type: Input\n    }],\n    onChange: [{\n      type: Output\n    }],\n    disabled: [{\n      type: Input\n    }],\n    onLabel: [{\n      type: Input\n    }],\n    offLabel: [{\n      type: Input\n    }],\n    onIcon: [{\n      type: Input\n    }],\n    offIcon: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ToggleButtonModule = function ToggleButtonModule() {\n  _classCallCheck(this, ToggleButtonModule);\n};\n\nToggleButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ToggleButtonModule\n});\nToggleButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ToggleButtonModule_Factory(t) {\n    return new (t || ToggleButtonModule)();\n  },\n  imports: [[CommonModule, RippleModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToggleButtonModule, {\n    declarations: function declarations() {\n      return [ToggleButton];\n    },\n    imports: function imports() {\n      return [CommonModule, RippleModule];\n    },\n    exports: function exports() {\n      return [ToggleButton];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToggleButtonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RippleModule],\n      exports: [ToggleButton],\n      declarations: [ToggleButton]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButton, ToggleButtonModule };","map":{"version":3,"sources":["../../src/app/components/togglebutton/togglebutton.ts","../../src/app/components/togglebutton/primeng-togglebutton.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectionStrategy,ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RippleModule} from 'primeng/ripple';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleButton),\n  multi: true\n};\n\n@Component({\n    selector: 'p-toggleButton',\n    template: `\n        <div [ngClass]=\"{'p-button p-togglebutton p-component': true, 'p-button-icon-only': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),'p-highlight': checked,'p-disabled':disabled}\" \n                        [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\"\n                        [attr.tabindex]=\"disabled ? null : '0'\" role=\"checkbox\" [attr.aria-checked]=\"checked\" pRipple>\n            <span *ngIf=\"onIcon||offIcon\" [class]=\"checked ? this.onIcon : this.offIcon\" \n                [ngClass]=\"{'p-button-icon': true, 'p-button-icon-left': (iconPos === 'left'), 'p-button-icon-right': (iconPos === 'right')}\"></span>\n            <span class=\"p-button-label\">{{checked ? hasOnLabel ? onLabel : '' : hasOffLabel ? offLabel : ''}}</span>\n        </div>\n    `,\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['../button/button.css']\n})\nexport class ToggleButton implements ControlValueAccessor {\n\n    @Input() onLabel: string;\n\n    @Input() offLabel: string;\n\n    @Input() onIcon: string;\n\n    @Input() offIcon: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() disabled: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() inputId: string;\n\n    @Input() tabindex: number;\n\n    @Input() iconPos: string = 'left';\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n           \n    checked: boolean = false;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    constructor(public cd: ChangeDetectorRef) { }\n    \n    toggle(event: Event) {\n        if (!this.disabled) {\n            this.checked = !this.checked;\n            this.onModelChange(this.checked);\n            this.onModelTouched();\n            this.onChange.emit({\n                originalEvent: event,\n                checked: this.checked\n            });\n\n            this.cd.markForCheck();\n        }\n    }\n    \n    onBlur() {\n        this.onModelTouched();\n    }\n    \n    writeValue(value: any) : void {\n        this.checked = value;\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n    \n    get hasOnLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n    \n    get hasOffLabel():boolean {\n        return this.onLabel && this.onLabel.length > 0;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [ToggleButton],\n    declarations: [ToggleButton]\n})\nexport class ToggleButtonModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}