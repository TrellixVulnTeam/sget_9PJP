{"version":3,"file":"wrapped-form-control-superclass.d.ts","sources":["wrapped-form-control-superclass.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Injector } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { FormControlSuperclass } from \"./form-control-superclass\";\nexport declare abstract class WrappedFormControlSuperclass<OuterType, InnerType = OuterType> extends FormControlSuperclass<OuterType> {\n    formControl: FormControl;\n    constructor(injector: Injector);\n    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    handleIncomingValue(value: OuterType): void;\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Override this to modify a value coming from the outside to the format needed within this component. */\n    protected outerToInner(value: OuterType): InnerType;\n    /** Override this to modify a value coming from within this component to the format expected on the outside. */\n    protected innerToOuter(value: InnerType): OuterType;\n}\n"]}