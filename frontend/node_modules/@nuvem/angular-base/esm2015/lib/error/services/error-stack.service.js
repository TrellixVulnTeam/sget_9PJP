import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { HttpGenericErrorService } from '../services/http-generic-error.service';
import * as i0 from "@angular/core";
import * as i1 from "./http-generic-error.service";
/**
 * Serviço de erros ErrorStackService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/http-generic-error.service';
export class ErrorStackService {
    /**
     * metodo construtor injeta serviço generico de erros
     * @param {HttpGenericErrorService} genericErrorService
     * @constructor
     */
    constructor(genericErrorService) {
        this.genericErrorService = genericErrorService;
        /**
         * Propriedade errors
         * @type {ReplaySubject<NamedErrorType>}
         */
        this.errors = new ReplaySubject();
        if (null === localStorage.getItem('errorStack')) {
            localStorage.setItem('errorStack', JSON.stringify([]));
        }
        this.getErrorsSubjects().forEach((error) => {
            this.errors.next(error);
        });
    }
    /**
     * Metodo responsável por criar erro do tipo HttpResponse
     * @param {HttpErrorResponse} error
     * @returns void
     */
    create(error) {
        const namedError = this.createNamedError(error);
        const persistedErrors = this.getErrorsSubjects();
        if (persistedErrors.length >= 15) {
            persistedErrors.shift();
        }
        persistedErrors.push(namedError);
        localStorage.setItem('errorStack', JSON.stringify(persistedErrors));
        this.errors.next(namedError);
    }
    /**
     * Metodo responsável por obter o conteúdo dos erros emitidos
     * @private
     * @returns NamedErrorType[]
     */
    getErrorsSubjects() {
        return JSON.parse(localStorage.getItem('errorStack'));
    }
    /**
     * Metodo responsável por itentifica o tipo de erro lançado
     * @private
     * @param {HttpErrorResponse} error
     * @returns NamedErrorType
     */
    createNamedError(error) {
        let fullMessage;
        let namedError;
        let createdAt = new Date();
        let errorId = this.getErrorId(error);
        let title;
        if (error.headers.get('Content-Type') === 'application/problem+json') {
            fullMessage = `X-Correlation-ID: ${errorId}
                           createdAt: ${createdAt}
                           status: ${error.status}
                           url: ${error.url}
                           body: ${error.error.detail}
                           stacktrace: ${error.error.stacktrace}
                           cause: ${error.error.cause}`;
            title = error.error.title;
        }
        else {
            const genericError = this.genericErrorService.getErrorByCode(error);
            fullMessage = `X-Correlation-ID: ${errorId}
                           createdAt: ${createdAt}
                           status: ${error.status}
                           url: ${error.url}
                           body: ${genericError.detail}`;
            title = genericError.title;
        }
        namedError = {
            message: title,
            createdAt: createdAt,
            correlationId: errorId,
            fullMessage: fullMessage
        };
        return namedError;
    }
    /**
     * Metodo responsável por obter o identificador do erro
     * @private
     * @param {HttpErrorResponse} error
     * @returns string
     */
    getErrorId(error) {
        let errorKey;
        error.headers.keys().every(key => {
            if (key.toUpperCase() === 'X-CORRELATION-ID') {
                errorKey = key;
                return false;
            }
            return true;
        });
        return errorKey ? error.headers.get(errorKey) : null;
    }
}
ErrorStackService.ɵfac = function ErrorStackService_Factory(t) { return new (t || ErrorStackService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpGenericErrorService)); };
ErrorStackService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorStackService_Factory() { return new ErrorStackService(i0.ɵɵinject(i1.HttpGenericErrorService)); }, token: ErrorStackService, providedIn: "root" });
ErrorStackService.ctorParameters = () => [
    { type: HttpGenericErrorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorStackService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpGenericErrorService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,