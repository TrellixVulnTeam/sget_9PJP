{"version":3,"file":"ngx-webstorage-service.js","sources":["ngx-webstorage-service/src/proxy-storage.service.ts","ngx-webstorage-service/src/base-storage.service.ts","ngx-webstorage-service/src/storage-transcoders.ts","ngx-webstorage-service/src/in-memory-storage.service.ts","ngx-webstorage-service/src/web-storage.service.ts","ngx-webstorage-service/src/storage-providers.ts","ngx-webstorage-service/src/storage-service.module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["import { StorageService } from './storage.service';\nimport { StorageTranscoder, StorageDecoder, StorageEncoder } from './storage-transcoder';\n\n/**\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\n * different default transcoder.\n */\nexport class ProxyStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\n     * read and writes are delegated to given storage service.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     * @param subject           Storage service which should handle to actual storage of data.\n     */\n    constructor(\n        private readonly defaultTranscoder: StorageTranscoder<T>,\n        private readonly subject: StorageService\n    ) { }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.subject.has(key);\n    }\n\n    /*\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        return this.subject.get(key, decoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.subject.set(key, value, encoder || this.defaultTranscoder);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.subject.remove(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.subject.clear();\n    }\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this.subject);\n    }\n}\n","import { StorageService } from './storage.service';\nimport { StorageDecoder, StorageEncoder, StorageTranscoder } from './storage-transcoder';\nimport { ProxyStorageService } from './proxy-storage.service';\n\n/**\n * Base implementation for storage services.\n */\nexport abstract class BaseStorageService<T> implements StorageService<T> {\n\n    /**\n     * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\n     *\n     * @param defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\n     */\n    constructor(private readonly defaultTranscoder: StorageTranscoder<T>) {\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public abstract has(key: string): boolean;\n\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\n     * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\n     * `undefined` will be returned.\n     *\n     * @param   key     Identifier of the entry whose value is to be retrieved.\n     * @param   decoder Decoder to use for converting the stored value to the desired return type.\n     * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\n     *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\n     */\n    public get(key: string, decoder?: StorageDecoder<any>): any {\n        const value = this.getItem(key);\n\n        return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n    }\n\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\n     * value into a format that can be stored by the storage service's underlying storage.\n     *\n     * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\n     * the value will be the same. It, however, does not necessarily return the same reference.\n     *\n     * @param key     Identifier of the entry which is to be created or updated.\n     * @param value   Value which is to be stored.\n     * @param encoder Encoder used to convert the given value into a format that can be used for storage.\n     */\n    public set(key: string, value: any, encoder?: StorageEncoder<any>): void {\n        this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public abstract remove(key: string): void;\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public abstract clear(): void;\n\n    /**\n     * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\n     * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\n     * the same data.\n     *\n     * The default transcoder will not be changed for the storage service on which this function is invoked.\n     *\n     * @param   transcoder Transcoder that should be used by default for read and write operations by the new storage service.\n     * @returns            A new storage service that uses the specified transcoder by default.\n     */\n    public withDefaultTranscoder<X>(transcoder: StorageTranscoder<X>): StorageService<X> {\n        return new ProxyStorageService(transcoder, this);\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected abstract getItem(key: string): string | undefined;\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected abstract setItem(key: string, value: string): void;\n\n}\n","import { StorageTranscoder } from './storage-transcoder';\n\n/** Transcoder that encodes values as JSON strings. */\nexport class JsonStorageTranscoder implements StorageTranscoder<any> {\n\n    public encode(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    public decode(value: string): any {\n        try {\n            return JSON.parse(value);\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n}\n\n/** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\nexport class StringStorageTranscoder implements StorageTranscoder<string> {\n    public encode(value: string): string {\n        return value;\n    }\n\n    public decode(value: string): string {\n        return value;\n    }\n}\n\n/** Transcoder that encodes/decodes `boolean` values. */\nexport class BooleanStorageTranscoder implements StorageTranscoder<boolean> {\n    public encode(value: boolean): string {\n        return value.toString();\n    }\n\n    public decode(value: string): boolean | undefined {\n        if (value === 'true') {\n            return true;\n        }\n        if (value === 'false') {\n            return false;\n        }\n\n        return undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `number` values. */\nexport class NumberStorageTranscoder implements StorageTranscoder<number> {\n    public encode(value: number): string {\n        return value.toString();\n    }\n\n    public decode(value: string): number | undefined {\n        const parsedNumber = Number(value);\n\n        return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to ISO strings. */\nexport class DateIsoStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.toISOString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = Date.parse(value);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** Transcoder that encodes/decodes `Date` values to epoch timestamps. */\nexport class DateEpochStorageTranscoder implements StorageTranscoder<Date> {\n    public encode(value: Date): string {\n        return value.valueOf().toString();\n    }\n\n    public decode(value: string): Date | undefined {\n        const timestamp = parseInt(value, 10);\n\n        return isNaN(timestamp) ? undefined : new Date(timestamp);\n    }\n}\n\n/** A set of storage transcoders. */\nexport const StorageTranscoders = {\n    /** Transcoder that encodes values as JSON strings. */\n    JSON: new JsonStorageTranscoder() as StorageTranscoder<any>,\n\n    /** Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way. */\n    STRING: new StringStorageTranscoder() as StorageTranscoder<string>,\n\n    /** Transcoder that encodes/decodes `boolean` values. */\n    BOOLEAN: new BooleanStorageTranscoder() as StorageTranscoder<boolean>,\n\n    /** Transcoder that encodes/decodes `number` values. */\n    NUMBER: new NumberStorageTranscoder() as StorageTranscoder<number>,\n\n    /** Transcoder that encodes/decodes `Date` values into ISO strings. */\n    DATE_ISO_STRING: new DateIsoStorageTranscoder() as StorageTranscoder<Date>,\n\n    /** Transcoder that encodes/decodes `Date` values into epoch timestamps. */\n    DATE_EPOCH_TIME: new DateEpochStorageTranscoder() as StorageTranscoder<Date>\n};\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nexport class InMemoryStorageService extends BaseStorageService<any> {\n\n    /** A map that serves as the underlying backing storage for this service. */\n    private readonly storage: Map<string, string> = new Map<string, string>();\n\n    /**\n     * Creates a new `InMemoryStorageService` instance.\n     */\n    constructor() {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.has(key);\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.delete(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        if (!this.storage.has(key)) {\n            return undefined;\n        }\n\n        return this.storage.get(key)!;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        this.storage.set(key, value);\n    }\n\n}\n","import { BaseStorageService } from './base-storage.service';\nimport { StorageTranscoders } from './storage-transcoders';\n\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nexport class WebStorageService extends BaseStorageService<any> {\n\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    constructor(private readonly storage: Storage) {\n        super(StorageTranscoders.JSON);\n    }\n\n    /**\n     * Checks whether an entry with the specified key exists in the storage.\n     *\n     * @param   key Identifier of the entry for which its presence in the storage is to be checked.\n     * @returns     `true` if an entry with the specified key exists in the storage, `false` if not.\n     */\n    public has(key: string): boolean {\n        return this.storage.getItem(key) !== null;\n    }\n\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    public remove(key: string): void {\n        this.storage.removeItem(key);\n    }\n\n    /**\n     * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\n     * for key *x*.\n     */\n    public clear(): void {\n        this.storage.clear();\n    }\n\n    /**\n     * Performs the actual retrieval of a value from storage.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\n     */\n    protected getItem(key: string): string | undefined {\n        const value = this.storage.getItem(key);\n\n        return value !== null ? value : undefined;\n    }\n\n    /**\n     * Stores the provided value using specified key in the storage.\n     *\n     * @param key   Identifier of the entry for which the value is to be stored.\n     * @param value The value that is to be stored.\n     */\n    protected setItem(key: string, value: string): void {\n        return this.storage.setItem(key, value);\n    }\n\n}\n\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param   storage Storage object which is to be tested for availability.\n * @returns         `true` if the specified storage can be used, `false` if not.\n */\nexport function isStorageAvailable(storage: Storage): boolean {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n\n    // Check if the storage can actually be accessed.\n    try {\n        const now = Date.now();\n        const testItemKey = `storage-test-entry-${now}`;\n        const testItemValue = `storage-test-value-${now}`;\n        storage.setItem(testItemKey, testItemValue);\n        const retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n\n        return retrievedItemValue === testItemValue;\n    } catch (error) {\n        return false;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { InMemoryStorageService } from './in-memory-storage.service';\nimport { StorageService } from './storage.service';\nimport { isStorageAvailable, WebStorageService } from './web-storage.service';\n\nexport function sessionStorageFactory(): StorageService {\n    try {\n        if (typeof sessionStorage as any !== 'undefined' && isStorageAvailable(sessionStorage)) {\n            return new WebStorageService(sessionStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the session storage service. */\nexport const SESSION_STORAGE = new InjectionToken<StorageService>(\n    'SESSION_STORAGE',\n    { providedIn: 'root', factory: sessionStorageFactory }\n);\n\nexport function localStorageFactory(): StorageService {\n    try {\n        if (typeof localStorage as any !== 'undefined' && isStorageAvailable(localStorage)) {\n            return new WebStorageService(localStorage);\n        }\n    } catch {}\n\n    return new InMemoryStorageService();\n}\n\n/** Injection token for the local storage service. */\nexport const LOCAL_STORAGE = new InjectionToken<StorageService>(\n    'LOCAL_STORAGE',\n    { providedIn: 'root', factory: localStorageFactory }\n);\n","import { NgModule } from '@angular/core';\n\n/**\n * @deprecated You no longer need to import the `StorageServiceModule`, since the `SESSION_STORAGE` and `LOCAL_STORAGE` injection tokens are\n * now 'self providing' in the root injector.\n */\n@NgModule()\nexport class StorageServiceModule {\n\n}\n"]}