import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export var MenuOrientation;
(function (MenuOrientation) {
    MenuOrientation[MenuOrientation["STATIC"] = 0] = "STATIC";
    MenuOrientation[MenuOrientation["OVERLAY"] = 1] = "OVERLAY";
    MenuOrientation[MenuOrientation["SLIM"] = 2] = "SLIM";
    MenuOrientation[MenuOrientation["HORIZONTAL"] = 3] = "HORIZONTAL";
})(MenuOrientation || (MenuOrientation = {}));
/**
 * Class MenuService
 * @class
 */
export class MenusService {
    constructor() {
        this.menuSource = new Subject();
        this.resetSource = new Subject();
        this.menuSource$ = this.menuSource.asObservable();
        this.resetSource$ = this.resetSource.asObservable();
        this.layoutMode = MenuOrientation.STATIC;
        this.itens = [];
    }
    isOverlay() {
        return this.layoutMode === MenuOrientation.OVERLAY;
    }
    isHorizontal() {
        return this.layoutMode === MenuOrientation.HORIZONTAL;
    }
    isSlim() {
        return this.layoutMode === MenuOrientation.SLIM;
    }
    isStatic() {
        return this.layoutMode === MenuOrientation.STATIC;
    }
    changeToStaticMenu() {
        this.layoutMode = MenuOrientation.STATIC;
    }
    changeToOverlayMenu() {
        this.layoutMode = MenuOrientation.OVERLAY;
    }
    changeToHorizontalMenu() {
        this.layoutMode = MenuOrientation.HORIZONTAL;
    }
    changeToSlimMenu() {
        this.layoutMode = MenuOrientation.SLIM;
    }
    onMenuStateChange(key) {
        this.menuSource.next(key);
    }
    reset() {
        this.resetSource.next();
    }
}
MenusService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MenusService_Factory() { return new MenusService(); }, token: MenusService, providedIn: "root" });
MenusService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJpbWVuZy1jb21wb25lbnRzL3NyYy9saWIvbWVudS9tZW51LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUUvQixNQUFNLENBQU4sSUFBWSxlQUtYO0FBTEQsV0FBWSxlQUFlO0lBQ3ZCLHlEQUFNLENBQUE7SUFDTiwyREFBTyxDQUFBO0lBQ1AscURBQUksQ0FBQTtJQUNKLGlFQUFVLENBQUE7QUFDZCxDQUFDLEVBTFcsZUFBZSxLQUFmLGVBQWUsUUFLMUI7QUFFRDs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sWUFBWTtJQUh6QjtRQUtZLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1FBRW5DLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUVwQyxnQkFBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFN0MsaUJBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRS9DLGVBQVUsR0FBb0IsZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUlyRCxVQUFLLEdBQWUsRUFBRSxDQUFDO0tBd0QxQjtJQXhDRyxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLGVBQWUsQ0FBQyxPQUFPLENBQUM7SUFDdkQsQ0FBQztJQUVELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssZUFBZSxDQUFDLFVBQVUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxlQUFlLENBQUMsSUFBSSxDQUFDO0lBQ3BELENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLGVBQWUsQ0FBQyxNQUFNLENBQUM7SUFDdEQsQ0FBQztJQUVELGtCQUFrQjtRQUNkLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztJQUM3QyxDQUFDO0lBRUQsbUJBQW1CO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO0lBQzlDLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDO0lBQ2pELENBQUM7SUFFRCxnQkFBZ0I7UUFDWixJQUFJLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUM7SUFDM0MsQ0FBQztJQUVELGlCQUFpQixDQUFDLEdBQVc7UUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7WUF2RUosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWVudUl0ZW0gfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBlbnVtIE1lbnVPcmllbnRhdGlvbiB7XG4gICAgU1RBVElDLFxuICAgIE9WRVJMQVksXG4gICAgU0xJTSxcbiAgICBIT1JJWk9OVEFMXG59XG5cbi8qKlxuICogQ2xhc3MgTWVudVNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE1lbnVzU2VydmljZSB7XG5cbiAgICBwcml2YXRlIG1lbnVTb3VyY2UgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG5cbiAgICBwcml2YXRlIHJlc2V0U291cmNlID0gbmV3IFN1YmplY3QoKTtcblxuICAgIG1lbnVTb3VyY2UkID0gdGhpcy5tZW51U291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICAgIFxuICAgIHJlc2V0U291cmNlJCA9IHRoaXMucmVzZXRTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICBsYXlvdXRNb2RlOiBNZW51T3JpZW50YXRpb24gPSBNZW51T3JpZW50YXRpb24uU1RBVElDO1xuXG4gICAgbWVudUhvdmVyQWN0aXZlOiBib29sZWFuO1xuXG4gICAgaXRlbnM6IE1lbnVJdGVtW10gPSBbXTtcblxuICAgIHJlc2V0TWVudTogYm9vbGVhbjtcblxuICAgIGlzTW9iaWxlOiBib29sZWFuO1xuXG4gICAgaXNUYWJsZXQ6IGJvb2xlYW47XG5cbiAgICBpc0Rlc2t0b3A6IGJvb2xlYW47XG5cbiAgICBvdmVybGF5TWVudUFjdGl2ZTogYm9vbGVhbjtcblxuICAgIHN0YXRpY01lbnVNb2JpbGVBY3RpdmU6IGJvb2xlYW47XG5cbiAgICBzdGF0aWNNZW51RGVza3RvcEluYWN0aXZlOiBib29sZWFuO1xuXG4gICAgaXNPdmVybGF5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRNb2RlID09PSBNZW51T3JpZW50YXRpb24uT1ZFUkxBWTtcbiAgICB9XG5cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dE1vZGUgPT09IE1lbnVPcmllbnRhdGlvbi5IT1JJWk9OVEFMO1xuICAgIH1cblxuICAgIGlzU2xpbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0TW9kZSA9PT0gTWVudU9yaWVudGF0aW9uLlNMSU07XG4gICAgfVxuXG4gICAgaXNTdGF0aWMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dE1vZGUgPT09IE1lbnVPcmllbnRhdGlvbi5TVEFUSUM7XG4gICAgfVxuXG4gICAgY2hhbmdlVG9TdGF0aWNNZW51KCkge1xuICAgICAgICB0aGlzLmxheW91dE1vZGUgPSBNZW51T3JpZW50YXRpb24uU1RBVElDO1xuICAgIH1cblxuICAgIGNoYW5nZVRvT3ZlcmxheU1lbnUoKSB7XG4gICAgICAgIHRoaXMubGF5b3V0TW9kZSA9IE1lbnVPcmllbnRhdGlvbi5PVkVSTEFZO1xuICAgIH1cblxuICAgIGNoYW5nZVRvSG9yaXpvbnRhbE1lbnUoKSB7XG4gICAgICAgIHRoaXMubGF5b3V0TW9kZSA9IE1lbnVPcmllbnRhdGlvbi5IT1JJWk9OVEFMO1xuICAgIH1cblxuICAgIGNoYW5nZVRvU2xpbU1lbnUoKSB7XG4gICAgICAgIHRoaXMubGF5b3V0TW9kZSA9IE1lbnVPcmllbnRhdGlvbi5TTElNO1xuICAgIH1cblxuICAgIG9uTWVudVN0YXRlQ2hhbmdlKGtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubWVudVNvdXJjZS5uZXh0KGtleSk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucmVzZXRTb3VyY2UubmV4dCgpO1xuICAgIH1cblxufVxuIl19