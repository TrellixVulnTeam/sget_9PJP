import { Injectable, NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { HttpGenericErrorType } from '../types/http-generic-error.type';
import * as i0 from "@angular/core";
import * as i1 from "../providers/notification.provider";
/**
 * Serviço HttpGenericErrorService
 * @class
 */
export class HttpGenericErrorService {
    /**
     * Metodo construtor responsávelpor injetar o serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    constructor(notification, ngZone) {
        this.notification = notification;
        this.ngZone = ngZone;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    shouldHandle(error) {
        return error instanceof HttpErrorResponse &&
            !(error.headers.get('Content-Type') === 'application/problem+json' &&
                error.error);
    }
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error) {
        const generic = this.getErrorByCode(error);
        this.ngZone.run(() => {
            this.notification.addErrorMessage(generic.detail, generic.title);
        });
    }
    /**
     * Metodo para obter erros a partir de um código
     * @public
     * @param {HttpErrorResponse} error
     * @returns HttpGenericErrorType
     */
    getErrorByCode(error) {
        const generic = GENERIC_ERRORS[error.status];
        if (generic === undefined) {
            return new HttpGenericErrorType(error.status, error.statusText, error.message);
        }
        return generic;
    }
}
HttpGenericErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpGenericErrorService_Factory() { return new HttpGenericErrorService(i0.ɵɵinject(i1.NotificationProvider), i0.ɵɵinject(i0.NgZone)); }, token: HttpGenericErrorService, providedIn: "root" });
HttpGenericErrorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HttpGenericErrorService.ctorParameters = () => [
    { type: NotificationProvider },
    { type: NgZone }
];
/**
 * Constante que define tipos de erros básicos
 * @const GENERIC_ERRORS
 */
export const GENERIC_ERRORS = {
    401: new HttpGenericErrorType(401, 'Não Autenticado', 'Essa requisição requer um usuário autenticado.'),
    403: new HttpGenericErrorType(403, 'Proibido', 'Essa requisição requer uma permissão no servidor da aplicação que o usuário não possui.'),
    404: new HttpGenericErrorType(404, 'Não encontrado', 'Essa requisição não pode ser encontrada.'),
    500: new HttpGenericErrorType(500, 'Erro desconhecido', 'O servidor encontrou uma condição inesperada.'),
    502: new HttpGenericErrorType(502, 'Bad Gateway', 'O servidor recebeu uma resposta inválida de um serviço que utilizou para cumprir a requisição'),
    503: new HttpGenericErrorType(503, 'Serviço Indisponível', 'O servidor não pode atender a requisição nesse momento. Esta é uma condição temporária, tente novamente mais tarde'),
    504: new HttpGenericErrorType(504, 'Gateway Timeout', 'O servidor não conseguiu receber uma resposta a tempo esperado por um serviço que utilizou para cumprir a requisição')
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1nZW5lcmljLWVycm9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9lcnJvci9zZXJ2aWNlcy9odHRwLWdlbmVyaWMtZXJyb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7O0FBR3hFOzs7R0FHRztBQUlILE1BQU0sT0FBTyx1QkFBdUI7SUFFaEM7Ozs7T0FJRztJQUNILFlBQW9CLFlBQWtDLEVBQVUsTUFBYztRQUExRCxpQkFBWSxHQUFaLFlBQVksQ0FBc0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUksQ0FBQztJQUVuRjs7Ozs7T0FLRztJQUNILFlBQVksQ0FBQyxLQUFnQztRQUN6QyxPQUFPLEtBQUssWUFBWSxpQkFBaUI7WUFDckMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLDBCQUEwQjtnQkFDbEUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxLQUF3QjtRQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNqQixJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGNBQWMsQ0FBQyxLQUF3QjtRQUMxQyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLElBQUksb0JBQW9CLENBQzNCLEtBQUssQ0FBQyxNQUFNLEVBQ1osS0FBSyxDQUFDLFVBQVUsRUFDaEIsS0FBSyxDQUFDLE9BQU8sQ0FDaEIsQ0FBQztTQUNMO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQzs7OztZQXZESixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQVZRLG9CQUFvQjtZQUZSLE1BQU07O0FBb0UzQjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUc7SUFDMUIsR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixpQkFBaUIsRUFDakIsZ0RBQWdELENBQUM7SUFFckQsR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixVQUFVLEVBQ1YseUZBQXlGLENBQUM7SUFFOUYsR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixnQkFBZ0IsRUFDaEIsMENBQTBDLENBQUM7SUFFL0MsR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixtQkFBbUIsRUFDbkIsK0NBQStDLENBQUM7SUFFcEQsR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixhQUFhLEVBQ2IsK0ZBQStGLENBQUM7SUFFcEcsR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixzQkFBc0IsRUFDdEIsb0hBQW9ILENBQUM7SUFFekgsR0FBRyxFQUFFLElBQUksb0JBQW9CLENBQUMsR0FBRyxFQUM3QixpQkFBaUIsRUFDakIsc0hBQXNILENBQUM7Q0FDOUgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25Qcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9ub3RpZmljYXRpb24ucHJvdmlkZXInO1xuaW1wb3J0IHsgSHR0cEdlbmVyaWNFcnJvclR5cGUgfSBmcm9tICcuLi90eXBlcy9odHRwLWdlbmVyaWMtZXJyb3IudHlwZSc7XG5pbXBvcnQgeyBFcnJvclByb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2Vycm9yLnByb3ZpZGVyJztcblxuLyoqXG4gKiBTZXJ2acOnbyBIdHRwR2VuZXJpY0Vycm9yU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEh0dHBHZW5lcmljRXJyb3JTZXJ2aWNlIGltcGxlbWVudHMgRXJyb3JQcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWxwb3IgaW5qZXRhciBvIHNlcnZpw6dvIE5vdGlmaWNhdGlvblByb3ZpZGVyXG4gICAgICogQHBhcmFtIHtOb3RpZmljYXRpb25Qcm92aWRlcn0gbm90aWZpY2F0aW9uXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub3RpZmljYXRpb246IE5vdGlmaWNhdGlvblByb3ZpZGVyLCBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7IH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcGVsYSBpZGVudGlmaWNhw6fDo28gZGUgZXJyb3NcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtFcnJvciB8IEh0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIEJvb2xlYW5cbiAgICAgKi9cbiAgICBzaG91bGRIYW5kbGUoZXJyb3I6IEVycm9yIHwgSHR0cEVycm9yUmVzcG9uc2UpOiBCb29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UgJiYgXG4gICAgICAgICAgICAhKGVycm9yLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSA9PT0gJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbicgJiYgXG4gICAgICAgICAgICBlcnJvci5lcnJvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHBlbGEgYWRpw6fDo28gZGUgZXJyb3NcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgaGFuZGxlKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBnZW5lcmljID0gdGhpcy5nZXRFcnJvckJ5Q29kZShlcnJvcik7XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7IFxuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb24uYWRkRXJyb3JNZXNzYWdlKGdlbmVyaWMuZGV0YWlsLCBnZW5lcmljLnRpdGxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHBhcmEgb2J0ZXIgZXJyb3MgYSBwYXJ0aXIgZGUgdW0gY8OzZGlnb1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIEh0dHBHZW5lcmljRXJyb3JUeXBlXG4gICAgICovXG4gICAgcHVibGljIGdldEVycm9yQnlDb2RlKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IEh0dHBHZW5lcmljRXJyb3JUeXBlIHtcbiAgICAgICAgY29uc3QgZ2VuZXJpYyA9IEdFTkVSSUNfRVJST1JTW2Vycm9yLnN0YXR1c107XG5cbiAgICAgICAgaWYgKGdlbmVyaWMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZShcbiAgICAgICAgICAgICAgICBlcnJvci5zdGF0dXMsXG4gICAgICAgICAgICAgICAgZXJyb3Iuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdlbmVyaWM7XG4gICAgfVxuXG59XG4vKipcbiAqIENvbnN0YW50ZSBxdWUgZGVmaW5lIHRpcG9zIGRlIGVycm9zIGLDoXNpY29zXG4gKiBAY29uc3QgR0VORVJJQ19FUlJPUlNcbiAqL1xuZXhwb3J0IGNvbnN0IEdFTkVSSUNfRVJST1JTID0ge1xuICAgIDQwMTogbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKDQwMSxcbiAgICAgICAgJ07Do28gQXV0ZW50aWNhZG8nLFxuICAgICAgICAnRXNzYSByZXF1aXNpw6fDo28gcmVxdWVyIHVtIHVzdcOhcmlvIGF1dGVudGljYWRvLicpLFxuXG4gICAgNDAzOiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoNDAzLFxuICAgICAgICAnUHJvaWJpZG8nLFxuICAgICAgICAnRXNzYSByZXF1aXNpw6fDo28gcmVxdWVyIHVtYSBwZXJtaXNzw6NvIG5vIHNlcnZpZG9yIGRhIGFwbGljYcOnw6NvIHF1ZSBvIHVzdcOhcmlvIG7Do28gcG9zc3VpLicpLFxuXG4gICAgNDA0OiBuZXcgSHR0cEdlbmVyaWNFcnJvclR5cGUoNDA0LFxuICAgICAgICAnTsOjbyBlbmNvbnRyYWRvJyxcbiAgICAgICAgJ0Vzc2EgcmVxdWlzacOnw6NvIG7Do28gcG9kZSBzZXIgZW5jb250cmFkYS4nKSxcblxuICAgIDUwMDogbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKDUwMCxcbiAgICAgICAgJ0Vycm8gZGVzY29uaGVjaWRvJyxcbiAgICAgICAgJ08gc2Vydmlkb3IgZW5jb250cm91IHVtYSBjb25kacOnw6NvIGluZXNwZXJhZGEuJyksXG5cbiAgICA1MDI6IG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZSg1MDIsXG4gICAgICAgICdCYWQgR2F0ZXdheScsXG4gICAgICAgICdPIHNlcnZpZG9yIHJlY2ViZXUgdW1hIHJlc3Bvc3RhIGludsOhbGlkYSBkZSB1bSBzZXJ2acOnbyBxdWUgdXRpbGl6b3UgcGFyYSBjdW1wcmlyIGEgcmVxdWlzacOnw6NvJyksXG5cbiAgICA1MDM6IG5ldyBIdHRwR2VuZXJpY0Vycm9yVHlwZSg1MDMsXG4gICAgICAgICdTZXJ2acOnbyBJbmRpc3BvbsOtdmVsJyxcbiAgICAgICAgJ08gc2Vydmlkb3IgbsOjbyBwb2RlIGF0ZW5kZXIgYSByZXF1aXNpw6fDo28gbmVzc2UgbW9tZW50by4gRXN0YSDDqSB1bWEgY29uZGnDp8OjbyB0ZW1wb3LDoXJpYSwgdGVudGUgbm92YW1lbnRlIG1haXMgdGFyZGUnKSxcblxuICAgIDUwNDogbmV3IEh0dHBHZW5lcmljRXJyb3JUeXBlKDUwNCxcbiAgICAgICAgJ0dhdGV3YXkgVGltZW91dCcsXG4gICAgICAgICdPIHNlcnZpZG9yIG7Do28gY29uc2VndWl1IHJlY2ViZXIgdW1hIHJlc3Bvc3RhIGEgdGVtcG8gZXNwZXJhZG8gcG9yIHVtIHNlcnZpw6dvIHF1ZSB1dGlsaXpvdSBwYXJhIGN1bXByaXIgYSByZXF1aXNpw6fDo28nKVxufTtcbiJdfQ==