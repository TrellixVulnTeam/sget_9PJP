import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export var MenuOrientation;
(function (MenuOrientation) {
    MenuOrientation[MenuOrientation["STATIC"] = 0] = "STATIC";
    MenuOrientation[MenuOrientation["OVERLAY"] = 1] = "OVERLAY";
    MenuOrientation[MenuOrientation["SLIM"] = 2] = "SLIM";
    MenuOrientation[MenuOrientation["HORIZONTAL"] = 3] = "HORIZONTAL";
})(MenuOrientation || (MenuOrientation = {}));
/**
 * Class MenuService
 * @class
 */
export class MenusService {
    constructor() {
        this.menuSource = new Subject();
        this.resetSource = new Subject();
        this.menuSource$ = this.menuSource.asObservable();
        this.resetSource$ = this.resetSource.asObservable();
        this.layoutMode = MenuOrientation.STATIC;
        this.itens = [];
    }
    isOverlay() {
        return this.layoutMode === MenuOrientation.OVERLAY;
    }
    isHorizontal() {
        return this.layoutMode === MenuOrientation.HORIZONTAL;
    }
    isSlim() {
        return this.layoutMode === MenuOrientation.SLIM;
    }
    isStatic() {
        return this.layoutMode === MenuOrientation.STATIC;
    }
    changeToStaticMenu() {
        this.layoutMode = MenuOrientation.STATIC;
    }
    changeToOverlayMenu() {
        this.layoutMode = MenuOrientation.OVERLAY;
    }
    changeToHorizontalMenu() {
        this.layoutMode = MenuOrientation.HORIZONTAL;
    }
    changeToSlimMenu() {
        this.layoutMode = MenuOrientation.SLIM;
    }
    onMenuStateChange(key) {
        this.menuSource.next(key);
    }
    reset() {
        this.resetSource.next();
    }
}
MenusService.ɵfac = function MenusService_Factory(t) { return new (t || MenusService)(); };
MenusService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MenusService_Factory() { return new MenusService(); }, token: MenusService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MenusService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcmltZW5nLWNvbXBvbmVudHMvc3JjL2xpYi9tZW51L21lbnUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0I7O0FBQ0EsTUFBTSxDQUFOLElBQVksZUFLWDtBQUxELFdBQVksZUFBZTtBQUMxQixJQUFHLHlEQUFNLENBQUE7QUFBQyxJQUNQLDJEQUFPLENBQUE7QUFBQyxJQUNSLHFEQUFJLENBQUE7QUFBQyxJQUNMLGlFQUFVLENBQUE7QUFDZCxDQUFDLEVBTFcsZUFBZSxLQUFmLGVBQWUsUUFLMUI7QUFFRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBSUgsTUFBTSxPQUFPLFlBQVk7QUFDekIsSUFKQTtBQUNFLFFBSVUsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7QUFDL0MsUUFDWSxnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDeEMsUUFDSSxnQkFBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDakQsUUFDSSxpQkFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDbkQsUUFDSSxlQUFVLEdBQW9CLGVBQWUsQ0FBQyxNQUFNLENBQUM7QUFDekQsUUFHSSxVQUFLLEdBQWUsRUFBRSxDQUFDO0FBQzNCLEtBdURDO0FBQ0QsSUF6Q0ksU0FBUztBQUNiLFFBQVEsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLGVBQWUsQ0FBQyxPQUFPLENBQUM7QUFDM0QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxZQUFZO0FBQ2hCLFFBQVEsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLGVBQWUsQ0FBQyxVQUFVLENBQUM7QUFDOUQsSUFBSSxDQUFDO0FBQ0wsSUFDSSxNQUFNO0FBQ1YsUUFBUSxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssZUFBZSxDQUFDLElBQUksQ0FBQztBQUN4RCxJQUFJLENBQUM7QUFDTCxJQUNJLFFBQVE7QUFDWixRQUFRLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxlQUFlLENBQUMsTUFBTSxDQUFDO0FBQzFELElBQUksQ0FBQztBQUNMLElBQ0ksa0JBQWtCO0FBQ3RCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO0FBQ2pELElBQUksQ0FBQztBQUNMLElBQ0ksbUJBQW1CO0FBQ3ZCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO0FBQ2xELElBQUksQ0FBQztBQUNMLElBQ0ksc0JBQXNCO0FBQzFCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDO0FBQ3JELElBQUksQ0FBQztBQUNMLElBQ0ksZ0JBQWdCO0FBQ3BCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDO0FBQy9DLElBQUksQ0FBQztBQUNMLElBQ0ksaUJBQWlCLENBQUMsR0FBVztBQUNqQyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLElBQUksQ0FBQztBQUNMLElBQ0ksS0FBSztBQUNULFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNoQyxJQUFJLENBQUM7QUFDTDsyRkFDQTtBQUFDO3dDQXpFQSxVQUFVLFNBQUMsa0JBQ1IsVUFBVSxFQUFFLE1BQU07Q0FDckI7Ozs7Z0RBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lbnVJdGVtIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgZW51bSBNZW51T3JpZW50YXRpb24ge1xuICAgIFNUQVRJQyxcbiAgICBPVkVSTEFZLFxuICAgIFNMSU0sXG4gICAgSE9SSVpPTlRBTFxufVxuXG4vKipcbiAqIENsYXNzIE1lbnVTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNZW51c1NlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBtZW51U291cmNlID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuXG4gICAgcHJpdmF0ZSByZXNldFNvdXJjZSA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgICBtZW51U291cmNlJCA9IHRoaXMubWVudVNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgICBcbiAgICByZXNldFNvdXJjZSQgPSB0aGlzLnJlc2V0U291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgbGF5b3V0TW9kZTogTWVudU9yaWVudGF0aW9uID0gTWVudU9yaWVudGF0aW9uLlNUQVRJQztcblxuICAgIG1lbnVIb3ZlckFjdGl2ZTogYm9vbGVhbjtcblxuICAgIGl0ZW5zOiBNZW51SXRlbVtdID0gW107XG5cbiAgICByZXNldE1lbnU6IGJvb2xlYW47XG5cbiAgICBpc01vYmlsZTogYm9vbGVhbjtcblxuICAgIGlzVGFibGV0OiBib29sZWFuO1xuXG4gICAgaXNEZXNrdG9wOiBib29sZWFuO1xuXG4gICAgb3ZlcmxheU1lbnVBY3RpdmU6IGJvb2xlYW47XG5cbiAgICBzdGF0aWNNZW51TW9iaWxlQWN0aXZlOiBib29sZWFuO1xuXG4gICAgc3RhdGljTWVudURlc2t0b3BJbmFjdGl2ZTogYm9vbGVhbjtcblxuICAgIGlzT3ZlcmxheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0TW9kZSA9PT0gTWVudU9yaWVudGF0aW9uLk9WRVJMQVk7XG4gICAgfVxuXG4gICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRNb2RlID09PSBNZW51T3JpZW50YXRpb24uSE9SSVpPTlRBTDtcbiAgICB9XG5cbiAgICBpc1NsaW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dE1vZGUgPT09IE1lbnVPcmllbnRhdGlvbi5TTElNO1xuICAgIH1cblxuICAgIGlzU3RhdGljKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRNb2RlID09PSBNZW51T3JpZW50YXRpb24uU1RBVElDO1xuICAgIH1cblxuICAgIGNoYW5nZVRvU3RhdGljTWVudSgpIHtcbiAgICAgICAgdGhpcy5sYXlvdXRNb2RlID0gTWVudU9yaWVudGF0aW9uLlNUQVRJQztcbiAgICB9XG5cbiAgICBjaGFuZ2VUb092ZXJsYXlNZW51KCkge1xuICAgICAgICB0aGlzLmxheW91dE1vZGUgPSBNZW51T3JpZW50YXRpb24uT1ZFUkxBWTtcbiAgICB9XG5cbiAgICBjaGFuZ2VUb0hvcml6b250YWxNZW51KCkge1xuICAgICAgICB0aGlzLmxheW91dE1vZGUgPSBNZW51T3JpZW50YXRpb24uSE9SSVpPTlRBTDtcbiAgICB9XG5cbiAgICBjaGFuZ2VUb1NsaW1NZW51KCkge1xuICAgICAgICB0aGlzLmxheW91dE1vZGUgPSBNZW51T3JpZW50YXRpb24uU0xJTTtcbiAgICB9XG5cbiAgICBvbk1lbnVTdGF0ZUNoYW5nZShrZXk6IHN0cmluZykge1xuICAgICAgICB0aGlzLm1lbnVTb3VyY2UubmV4dChrZXkpO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnJlc2V0U291cmNlLm5leHQoKTtcbiAgICB9XG5cbn1cbiJdfQ==