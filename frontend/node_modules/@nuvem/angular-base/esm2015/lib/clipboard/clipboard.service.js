import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Fornece metodo para copia de textos
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export class ClipboardService {
    /**
     * Inspirado no clipboard.js, copia texto selecionado para área de trasferência
     * @param {string} text
     * @returns void
     * @public
     */
    copy(text) {
        const isRTL = document.documentElement.getAttribute('dir') === 'rtl';
        // cria um elemento temporário, seta o foco, copia e remove em seguida
        let fake = document.createElement('textarea');
        fake.style.fontSize = '12pt';
        fake.style.border = '0';
        fake.style.padding = '0';
        fake.style.margin = '0';
        fake.style.position = 'absolute';
        fake.style[isRTL ? 'right' : 'left'] = '-9999px';
        let yPosition = window.pageYOffset || document.documentElement.scrollTop;
        fake.style.top = `${yPosition}px`;
        fake.setAttribute('readonly', '');
        fake.value = text;
        document.body.appendChild(fake);
        fake.select();
        document.execCommand('copy');
        document.body.removeChild(fake);
    }
}
ClipboardService.ɵfac = function ClipboardService_Factory(t) { return new (t || ClipboardService)(); };
ClipboardService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(); }, token: ClipboardService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2NsaXBib2FyZC9jbGlwYm9hcmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFJSCxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQUksQ0FBQyxJQUFZO0FBQ3JCLFFBQVEsTUFBTSxLQUFLLEdBQVksUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDO0FBQ3RGLFFBQ1Esc0VBQXNFO0FBQzlFLFFBQVEsSUFBSSxJQUFJLEdBQXdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDM0UsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDckMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDaEMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7QUFDakMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDaEMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDekMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDekQsUUFDUSxJQUFJLFNBQVMsR0FBVyxNQUFNLENBQUMsV0FBVyxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDO0FBQ3pGLFFBQ1EsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxTQUFTLElBQUksQ0FBQztBQUMxQyxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDMUIsUUFDUSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxRQUNRLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN0QixRQUNRLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckMsUUFBUSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxJQUFJLENBQUM7QUFDTDt1R0FBQztBQUNEOzRDQXJDQyxVQUFVLFNBQUMsa0JBQ1IsVUFBVSxFQUFFLE1BQU07RUFDckI7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBGb3JuZWNlIG1ldG9kbyBwYXJhIGNvcGlhIGRlIHRleHRvc1xuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENsaXBib2FyZFNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogSW5zcGlyYWRvIG5vIGNsaXBib2FyZC5qcywgY29waWEgdGV4dG8gc2VsZWNpb25hZG8gcGFyYSDDoXJlYSBkZSB0cmFzZmVyw6puY2lhXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvcHkodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGlzUlRMOiBib29sZWFuID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJykgPT09ICdydGwnO1xuXG4gICAgICAgIC8vIGNyaWEgdW0gZWxlbWVudG8gdGVtcG9yw6FyaW8sIHNldGEgbyBmb2NvLCBjb3BpYSBlIHJlbW92ZSBlbSBzZWd1aWRhXG4gICAgICAgIGxldCBmYWtlOiBIVE1MVGV4dEFyZWFFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgZmFrZS5zdHlsZS5mb250U2l6ZSA9ICcxMnB0JztcbiAgICAgICAgZmFrZS5zdHlsZS5ib3JkZXIgPSAnMCc7XG4gICAgICAgIGZha2Uuc3R5bGUucGFkZGluZyA9ICcwJztcbiAgICAgICAgZmFrZS5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICAgIGZha2Uuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBmYWtlLnN0eWxlW2lzUlRMID8gJ3JpZ2h0JyA6ICdsZWZ0J10gPSAnLTk5OTlweCc7XG5cbiAgICAgICAgbGV0IHlQb3NpdGlvbjogbnVtYmVyID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG5cbiAgICAgICAgZmFrZS5zdHlsZS50b3AgPSBgJHt5UG9zaXRpb259cHhgO1xuICAgICAgICBmYWtlLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgICAgIGZha2UudmFsdWUgPSB0ZXh0O1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZmFrZSk7XG5cbiAgICAgICAgZmFrZS5zZWxlY3QoKTtcblxuICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGZha2UpO1xuICAgIH1cbn1cbiJdfQ==