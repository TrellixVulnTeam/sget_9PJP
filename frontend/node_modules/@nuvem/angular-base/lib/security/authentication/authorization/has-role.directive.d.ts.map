{"version":3,"file":"has-role.directive.d.ts","sources":["has-role.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Authorization } from './authorization';\nimport { Authentication } from '../authentication';\nimport { User } from '../user';\n/**\n * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.\n * @class\n */\nexport declare class HasRoleDirective implements OnDestroy {\n    private templateRef;\n    private viewContainer;\n    private authorization;\n    private authentication;\n    private loginNotifications;\n    /**\n     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança\n     * @param {TemplateRef<any>} templateRef\n     * @param {ViewContainerRef} viewContainer\n     * @param {Authorization} authorization\n     * @param {Authentication<User>} authentication\n     */\n    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, authorization: Authorization, authentication: Authentication<User>);\n    /**\n     * Propriedade para identificar regras de acesso aos itens\n     * @type {string}\n     */\n    set hasRole(hasRole: string | string[]);\n    ngOnDestroy(): void;\n}\n"]}