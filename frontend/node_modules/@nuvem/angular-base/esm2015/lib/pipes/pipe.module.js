import { NgModule } from '@angular/core';
import { CpfPipe } from './cpf.pipe';
import { CepPipe } from './cep.pipe';
import { CnpjPipe } from './cnpj.pipe';
import { RegexPipe } from './pipe.regex';
import { LimitPipe } from './pipe.limit';
/**
 *
 *  Export do módulo
 */
import * as ɵngcc0 from '@angular/core';
export class PipeModule {
}
PipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PipeModule });
PipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PipeModule_Factory(t) { return new (t || PipeModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PipeModule, { declarations: function () { return [CepPipe,
        CpfPipe,
        CnpjPipe,
        RegexPipe,
        LimitPipe]; }, exports: function () { return [CepPipe,
        CpfPipe,
        CnpjPipe,
        RegexPipe,
        LimitPipe]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PipeModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [
                    CepPipe,
                    CpfPipe,
                    CnpjPipe,
                    RegexPipe,
                    LimitPipe,
                ],
                exports: [
                    CepPipe,
                    CpfPipe,
                    CnpjPipe,
                    RegexPipe,
                    LimitPipe,
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL3BpcGVzL3BpcGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBa0JILE1BQU0sT0FBTyxVQUFVO0FBQUc7c0NBakJ6QixRQUFRLFNBQUM7UUFDTixPQUFPLEVBQUUsRUFBRSxrQkFDWCxZQUFZLEVBQUUsc0JBQ1YsT0FBTyxzQkFDUCxPQUFPLHNCQUNQO0FBQVEsc0JBQ1IsU0FBUyxzQkFDVCxTQUFTLG1CQUNaLGtCQUNELE9BQU8sRUFBRSxzQkFDTCxPQUFPO1FBQ1AsT0FBTzs7RUFDUCxRQUFRO2FBQ1IsU0FBUyxzQkFDVCxTQUFTO1NBQ1o7TUFDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ3BmUGlwZSB9IGZyb20gJy4vY3BmLnBpcGUnO1xuaW1wb3J0IHsgQ2VwUGlwZSB9IGZyb20gJy4vY2VwLnBpcGUnO1xuaW1wb3J0IHsgQ25walBpcGUgfSBmcm9tICcuL2NucGoucGlwZSc7XG5pbXBvcnQgeyBSZWdleFBpcGUgfSBmcm9tICcuL3BpcGUucmVnZXgnO1xuaW1wb3J0IHsgTGltaXRQaXBlIH0gZnJvbSAnLi9waXBlLmxpbWl0JztcblxuLyoqXG4gKlxuICogIEV4cG9ydCBkbyBtw7NkdWxvXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW10sXG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIENlcFBpcGUsXG4gICAgICAgIENwZlBpcGUsXG4gICAgICAgIENucGpQaXBlLFxuICAgICAgICBSZWdleFBpcGUsXG4gICAgICAgIExpbWl0UGlwZSxcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgQ2VwUGlwZSxcbiAgICAgICAgQ3BmUGlwZSxcbiAgICAgICAgQ25walBpcGUsXG4gICAgICAgIFJlZ2V4UGlwZSxcbiAgICAgICAgTGltaXRQaXBlLFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgUGlwZU1vZHVsZSB7fVxuIl19