{"version":3,"file":"form-notification-error-provider.service.d.ts","sources":["form-notification-error-provider.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { FormNotificationService } from './form-notification.service';\nimport { ErrorProvider } from '../../error/providers/error.provider';\n/**\n * Provedor de error para criação de erros de notificação.\n * @class\n */\nexport declare class FormNotificationErrorProvider implements ErrorProvider {\n    private formNotificationService;\n    /**\n     * Método construtor\n     * @param {FormtNotificationService} formNotificationService\n     * @constructor\n     */\n    constructor(formNotificationService: FormNotificationService);\n    /**\n     * Método responsável pela identificação de erros\n     * @public\n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean;\n    /**\n     * Método para emissão de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void;\n    /**\n     * Método iteração de violações e emissão de erros\n     * @param values\n     */\n    violation(form: string, values: ({\n        field: string;\n        message: string;\n    })[]): void;\n}\n"]}