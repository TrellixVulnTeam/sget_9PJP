import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { Authorization } from './authorization';
import { Authentication } from '../authentication';
/**
 * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.
 * @class
 */
export class HasRoleDirective {
    /**
     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança
     * @param {TemplateRef<any>} templateRef
     * @param {ViewContainerRef} viewContainer
     * @param {Authorization} authorization
     * @param {Authentication<User>} authentication
     */
    constructor(templateRef, viewContainer, authorization, authentication) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authorization = authorization;
        this.authentication = authentication;
    }
    /**
     * Propriedade para identificar regras de acesso aos itens
     * @type {string}
     */
    set hasRole(hasRole) {
        this.viewContainer.clear();
        if (hasRole) {
            if (this.loginNotifications)
                this.loginNotifications.unsubscribe();
            this.loginNotifications = this.authentication.getLoginNotifications().subscribe(() => {
                if (this.authorization.hasRole(hasRole)) {
                    this.viewContainer.clear();
                    this.viewContainer.createEmbeddedView(this.templateRef);
                }
            });
        }
        else {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
    }
    ngOnDestroy() {
        if (this.loginNotifications) {
            this.loginNotifications.unsubscribe();
        }
    }
}
HasRoleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hasRole]'
            },] }
];
HasRoleDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Authorization },
    { type: Authentication }
];
HasRoleDirective.propDecorators = {
    hasRole: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvc2VjdXJpdHkvYXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbi9oYXMtcm9sZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJbkQ7OztHQUdHO0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtJQUl6Qjs7Ozs7O09BTUc7SUFDSCxZQUNZLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLGFBQTRCLEVBQzVCLGNBQW9DO1FBSHBDLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0Isa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsbUJBQWMsR0FBZCxjQUFjLENBQXNCO0lBQUksQ0FBQztJQUVyRDs7O09BR0c7SUFDSCxJQUFhLE9BQU8sQ0FBQyxPQUEwQjtRQUMzQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLElBQUksT0FBTyxFQUFFO1lBQ1QsSUFBSSxJQUFJLENBQUMsa0JBQWtCO2dCQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pGLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUMzRDtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzNEO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUN6QixJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDekM7SUFDTCxDQUFDOzs7WUEzQ0osU0FBUyxTQUFFO2dCQUNSLFFBQVEsRUFBRSxXQUFXO2FBQ3hCOzs7WUFaMEIsV0FBVztZQUFFLGdCQUFnQjtZQUMvQyxhQUFhO1lBQ2IsY0FBYzs7O3NCQWdDbEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhvcml6YXRpb24gfSBmcm9tICcuL2F1dGhvcml6YXRpb24nO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tICcuLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vdXNlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBIYXNSb2xlRGlyZWN0aXZlIGRpcmV0aXZhIHBhcmEgY2hlY2FnZW0gZGEgZXhpc3TDqm5jaWEgZGUgcGVybWlzc8O1ZXMgZGUgYWNlc3NvIHBhcmEgbyB1c3XDoXJpbyBsb2dhZG8uXG4gKiBAY2xhc3NcbiAqL1xuQERpcmVjdGl2ZSgge1xuICAgIHNlbGVjdG9yOiAnW2hhc1JvbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBIYXNSb2xlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICAgIHByaXZhdGUgbG9naW5Ob3RpZmljYXRpb25zOiBTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIGNvbnN0cnV0b3IgcmVzcG9uc8OhdmVsIHBvciBjYXJyZWdhciBvIHNlcnZpw6dvIGRlIGF1dG9yaXphw6fDo28gZSBzZXJ2acOnbyBkZSBpZGVudGlmaWNhw6fDo28gZGUgbXVkYW7Dp2FcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlUmVmPGFueT59IHRlbXBsYXRlUmVmXG4gICAgICogQHBhcmFtIHtWaWV3Q29udGFpbmVyUmVmfSB2aWV3Q29udGFpbmVyXG4gICAgICogQHBhcmFtIHtBdXRob3JpemF0aW9ufSBhdXRob3JpemF0aW9uXG4gICAgICogQHBhcmFtIHtBdXRoZW50aWNhdGlvbjxVc2VyPn0gYXV0aGVudGljYXRpb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwcml2YXRlIGF1dGhvcml6YXRpb246IEF1dGhvcml6YXRpb24sXG4gICAgICAgIHByaXZhdGUgYXV0aGVudGljYXRpb246IEF1dGhlbnRpY2F0aW9uPFVzZXI+KSB7IH1cblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIHBhcmEgaWRlbnRpZmljYXIgcmVncmFzIGRlIGFjZXNzbyBhb3MgaXRlbnNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHNldCBoYXNSb2xlKGhhc1JvbGU6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICBpZiAoaGFzUm9sZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9naW5Ob3RpZmljYXRpb25zKSB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMgPSB0aGlzLmF1dGhlbnRpY2F0aW9uLmdldExvZ2luTm90aWZpY2F0aW9ucygpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0aG9yaXphdGlvbi5oYXNSb2xlKGhhc1JvbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==