import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * Class DatatableService
 * @class
 */
export class DatatableService {
    /**
     * constructor method
     * @constructor
     * @param {HttpClient} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * search method
     * @param {LazyLoadEvent} event
     * @param {String} url
     * @param {number} rows
     * @param {boolean} orderInSort
     * @param {any} query
     * @return Observable
     */
    search(event, url, rows, orderInSort, query) {
        let page = 0;
        if (event !== undefined && event.first > 0) {
            page = Math.floor(event.first / rows);
        }
        let order = event.sortOrder === 1 ? 'asc' : 'desc';
        let params = new HttpParams()
            .set('page', page.toString())
            .set('size', rows.toString());
        if (orderInSort) {
            if (event.sortField !== undefined) {
                params = params.set('sort', event.sortField + ',' + order);
            }
        }
        else {
            if (event.sortField !== undefined) {
                params = params
                    .set('sort', event.sortField)
                    .set('order', order);
            }
        }
        if ('string' === typeof query) {
            params = params.set('query', query);
        }
        if ('object' === typeof query) {
            Object.keys(query).forEach(key => params = params.set(key, query[key]));
        }
        return this.http.get(`${url}?${params.toString()}`, { observe: 'response' });
    }
}
DatatableService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DatatableService_Factory() { return new DatatableService(i0.ɵɵinject(i1.HttpClient)); }, token: DatatableService, providedIn: "root" });
DatatableService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
DatatableService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcmltZW5nLWNvbXBvbmVudHMvc3JjL2xpYi9kYXRhdGFibGUvZGF0YXRhYmxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFFOUQ7OztHQUdHO0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtJQUV6Qjs7OztPQUlHO0lBQ0gsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFHLENBQUM7SUFFeEM7Ozs7Ozs7O09BUUc7SUFDSCxNQUFNLENBQUMsS0FBb0IsRUFBRSxHQUFXLEVBQUUsSUFBWSxFQUFFLFdBQW9CLEVBQUUsS0FBVztRQUNyRixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7UUFDYixJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNuRCxJQUFJLE1BQU0sR0FBZSxJQUFJLFVBQVUsRUFBRTthQUN4QyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUM1QixHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRTlCLElBQUksV0FBVyxFQUFFO1lBQ2IsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtnQkFDL0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO2FBQzlEO1NBQ0o7YUFBTTtZQUNILElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7Z0JBQy9CLE1BQU0sR0FBRyxNQUFNO3FCQUNkLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQztxQkFDNUIsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN4QjtTQUNKO1FBRUQsSUFBSSxRQUFRLEtBQUssT0FBTyxLQUFLLEVBQUU7WUFDM0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsSUFBSSxRQUFRLEtBQUssT0FBTyxLQUFLLEVBQUU7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRTtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNqRixDQUFDOzs7O1lBcERKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBUlEsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExhenlMb2FkRXZlbnQgfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG4vKipcbiAqIENsYXNzIERhdGF0YWJsZVNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogXCJyb290XCJcbn0pXG5leHBvcnQgY2xhc3MgRGF0YXRhYmxlU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0h0dHBDbGllbnR9IGh0dHBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHt9XG5cbiAgICAvKipcbiAgICAgKiBzZWFyY2ggbWV0aG9kXG4gICAgICogQHBhcmFtIHtMYXp5TG9hZEV2ZW50fSBldmVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93c1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3JkZXJJblNvcnRcbiAgICAgKiBAcGFyYW0ge2FueX0gcXVlcnlcbiAgICAgKiBAcmV0dXJuIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBzZWFyY2goZXZlbnQ6IExhenlMb2FkRXZlbnQsIHVybDogc3RyaW5nLCByb3dzOiBudW1iZXIsIG9yZGVySW5Tb3J0OiBib29sZWFuLCBxdWVyeT86IGFueSkge1xuICAgICAgICBsZXQgcGFnZSA9IDA7XG4gICAgICAgIGlmIChldmVudCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50LmZpcnN0ID4gMCkge1xuICAgICAgICAgICAgcGFnZSA9IE1hdGguZmxvb3IoZXZlbnQuZmlyc3QgLyByb3dzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvcmRlciA9IGV2ZW50LnNvcnRPcmRlciA9PT0gMSA/ICdhc2MnIDogJ2Rlc2MnO1xuICAgICAgICBsZXQgcGFyYW1zOiBIdHRwUGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKVxuICAgICAgICAuc2V0KCdwYWdlJywgcGFnZS50b1N0cmluZygpKVxuICAgICAgICAuc2V0KCdzaXplJywgcm93cy50b1N0cmluZygpKTtcblxuICAgICAgICBpZiAob3JkZXJJblNvcnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3J0RmllbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQoJ3NvcnQnLCBldmVudC5zb3J0RmllbGQgKyAnLCcgKyBvcmRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc29ydEZpZWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXNcbiAgICAgICAgICAgICAgICAuc2V0KCdzb3J0JywgZXZlbnQuc29ydEZpZWxkKVxuICAgICAgICAgICAgICAgIC5zZXQoJ29yZGVyJywgb3JkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgcXVlcnkpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQoJ3F1ZXJ5JywgcXVlcnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgcXVlcnkpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHF1ZXJ5KS5mb3JFYWNoKGtleSA9PiBwYXJhbXMgPSBwYXJhbXMuc2V0KGtleSwgcXVlcnlba2V5XSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3VybH0/JHtwYXJhbXMudG9TdHJpbmcoKX1gLCB7IG9ic2VydmU6ICdyZXNwb25zZScgfSk7XG4gICAgfVxufVxuIl19