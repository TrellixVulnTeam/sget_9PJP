import { FormNotificationService } from '../services/form-notification.service';
import { Directive, Input } from "@angular/core";
import { FieldFormNotification } from '../types/field-form-notification.type';
export class FormNotificationComponentSuperclass {
    /**
     * Método construtor responsável por carregar o serviço de validação
     * @param formNotificationService
     */
    constructor(formNotificationService) {
        this.formNotificationService = formNotificationService;
    }
    /**
     * Método Inicial para subscrição no endpoint responsável por validar o formulário
     */
    ngOnInit() {
        this.subscription = this.formNotificationService
            .notifications(this.form, this.name)
            .subscribe((notification) => {
            if (notification instanceof FieldFormNotification) {
                this.message = notification.message;
            }
            else {
                this.message = null;
            }
        });
    }
    /**
     * Método responsável por realizar a saida das subscrições do endpont de validação
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
FormNotificationComponentSuperclass.decorators = [
    { type: Directive, args: [{
                selector: 'form-notification-component-superclass'
            },] }
];
FormNotificationComponentSuperclass.ctorParameters = () => [
    { type: FormNotificationService }
];
FormNotificationComponentSuperclass.propDecorators = {
    name: [{ type: Input }],
    form: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24tc3VwZXJjbGFzcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9mb3JtLW5vdGlmaWNhdGlvbi9jb21wb25lbnRzL2Zvcm0tbm90aWZpY2F0aW9uLXN1cGVyY2xhc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxTQUFTLEVBQXFCLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdwRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUs5RSxNQUFNLE9BQU8sbUNBQW1DO0lBVTVDOzs7T0FHRztJQUNILFlBQXNCLHVCQUFnRDtRQUFoRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0lBQUcsQ0FBQztJQUUxRTs7T0FFRztJQUNILFFBQVE7UUFDSixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyx1QkFBdUI7YUFDM0MsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNuQyxTQUFTLENBQUMsQ0FBQyxZQUE4QixFQUFFLEVBQUU7WUFDMUMsSUFBSSxZQUFZLFlBQVkscUJBQXFCLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQzthQUN2QztpQkFBTTtnQkFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQzthQUN2QjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7O1lBdkNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsd0NBQXdDO2FBQ3JEOzs7WUFSUSx1QkFBdUI7OzttQkFhM0IsS0FBSzttQkFFTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPbkRlc3Ryb3ksIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBGb3JtTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vdHlwZXMvZm9ybS1ub3RpZmljYXRpb24udHlwZSc7XG5pbXBvcnQgeyBGaWVsZEZvcm1Ob3RpZmljYXRpb24gfSBmcm9tICcuLi90eXBlcy9maWVsZC1mb3JtLW5vdGlmaWNhdGlvbi50eXBlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdmb3JtLW5vdGlmaWNhdGlvbi1jb21wb25lbnQtc3VwZXJjbGFzcydcbn0pXG5leHBvcnQgY2xhc3MgRm9ybU5vdGlmaWNhdGlvbkNvbXBvbmVudFN1cGVyY2xhc3MgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gICAgQElucHV0KCkgbmFtZTogU3RyaW5nO1xuXG4gICAgQElucHV0KCkgZm9ybTogU3RyaW5nO1xuXG4gICAgbWVzc2FnZTogU3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgY2FycmVnYXIgbyBzZXJ2acOnbyBkZSB2YWxpZGHDp8Ojb1xuICAgICAqIEBwYXJhbSBmb3JtTm90aWZpY2F0aW9uU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmb3JtTm90aWZpY2F0aW9uU2VydmljZTogRm9ybU5vdGlmaWNhdGlvblNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIEluaWNpYWwgcGFyYSBzdWJzY3Jpw6fDo28gbm8gZW5kcG9pbnQgcmVzcG9uc8OhdmVsIHBvciB2YWxpZGFyIG8gZm9ybXVsw6FyaW9cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAubm90aWZpY2F0aW9ucyh0aGlzLmZvcm0sIHRoaXMubmFtZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKG5vdGlmaWNhdGlvbjogRm9ybU5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24gaW5zdGFuY2VvZiBGaWVsZEZvcm1Ob3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbm90aWZpY2F0aW9uLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmVhbGl6YXIgYSBzYWlkYSBkYXMgc3Vic2NyacOnw7VlcyBkbyBlbmRwb250IGRlIHZhbGlkYcOnw6NvXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG59XG4iXX0=