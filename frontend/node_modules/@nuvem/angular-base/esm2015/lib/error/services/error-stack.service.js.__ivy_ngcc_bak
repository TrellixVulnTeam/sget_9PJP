import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { HttpGenericErrorService } from '../services/http-generic-error.service';
import * as i0 from "@angular/core";
import * as i1 from "./http-generic-error.service";
/**
 * Serviço de erros ErrorStackService
 * @class
 */
export class ErrorStackService {
    /**
     * metodo construtor injeta serviço generico de erros
     * @param {HttpGenericErrorService} genericErrorService
     * @constructor
     */
    constructor(genericErrorService) {
        this.genericErrorService = genericErrorService;
        /**
         * Propriedade errors
         * @type {ReplaySubject<NamedErrorType>}
         */
        this.errors = new ReplaySubject();
        if (null === localStorage.getItem('errorStack')) {
            localStorage.setItem('errorStack', JSON.stringify([]));
        }
        this.getErrorsSubjects().forEach((error) => {
            this.errors.next(error);
        });
    }
    /**
     * Metodo responsável por criar erro do tipo HttpResponse
     * @param {HttpErrorResponse} error
     * @returns void
     */
    create(error) {
        const namedError = this.createNamedError(error);
        const persistedErrors = this.getErrorsSubjects();
        if (persistedErrors.length >= 15) {
            persistedErrors.shift();
        }
        persistedErrors.push(namedError);
        localStorage.setItem('errorStack', JSON.stringify(persistedErrors));
        this.errors.next(namedError);
    }
    /**
     * Metodo responsável por obter o conteúdo dos erros emitidos
     * @private
     * @returns NamedErrorType[]
     */
    getErrorsSubjects() {
        return JSON.parse(localStorage.getItem('errorStack'));
    }
    /**
     * Metodo responsável por itentifica o tipo de erro lançado
     * @private
     * @param {HttpErrorResponse} error
     * @returns NamedErrorType
     */
    createNamedError(error) {
        let fullMessage;
        let namedError;
        let createdAt = new Date();
        let errorId = this.getErrorId(error);
        let title;
        if (error.headers.get('Content-Type') === 'application/problem+json') {
            fullMessage = `X-Correlation-ID: ${errorId}
                           createdAt: ${createdAt}
                           status: ${error.status}
                           url: ${error.url}
                           body: ${error.error.detail}
                           stacktrace: ${error.error.stacktrace}
                           cause: ${error.error.cause}`;
            title = error.error.title;
        }
        else {
            const genericError = this.genericErrorService.getErrorByCode(error);
            fullMessage = `X-Correlation-ID: ${errorId}
                           createdAt: ${createdAt}
                           status: ${error.status}
                           url: ${error.url}
                           body: ${genericError.detail}`;
            title = genericError.title;
        }
        namedError = {
            message: title,
            createdAt: createdAt,
            correlationId: errorId,
            fullMessage: fullMessage
        };
        return namedError;
    }
    /**
     * Metodo responsável por obter o identificador do erro
     * @private
     * @param {HttpErrorResponse} error
     * @returns string
     */
    getErrorId(error) {
        let errorKey;
        error.headers.keys().every(key => {
            if (key.toUpperCase() === 'X-CORRELATION-ID') {
                errorKey = key;
                return false;
            }
            return true;
        });
        return errorKey ? error.headers.get(errorKey) : null;
    }
}
ErrorStackService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorStackService_Factory() { return new ErrorStackService(i0.ɵɵinject(i1.HttpGenericErrorService)); }, token: ErrorStackService, providedIn: "root" });
ErrorStackService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ErrorStackService.ctorParameters = () => [
    { type: HttpGenericErrorService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3Itc3RhY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2Vycm9yL3NlcnZpY2VzL2Vycm9yLXN0YWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3JDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDOzs7QUFFakY7OztHQUdHO0FBSUgsTUFBTSxPQUFPLGlCQUFpQjtJQVExQjs7OztPQUlHO0lBQ0gsWUFBb0IsbUJBQTRDO1FBQTVDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBeUI7UUFYaEU7OztXQUdHO1FBQ0gsV0FBTSxHQUFrQyxJQUFJLGFBQWEsRUFBa0IsQ0FBQztRQVF4RSxJQUFJLElBQUksS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzdDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMxRDtRQUVELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQXFCLEVBQUUsRUFBRTtZQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLEtBQXdCO1FBQzNCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVoRCxNQUFNLGVBQWUsR0FBcUIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFbkUsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRTtZQUM5QixlQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDM0I7UUFFRCxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWpDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUVwRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGlCQUFpQjtRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNLLGdCQUFnQixDQUFDLEtBQXdCO1FBQzdDLElBQUksV0FBbUIsQ0FBQztRQUN4QixJQUFJLFVBQTBCLENBQUM7UUFDL0IsSUFBSSxTQUFTLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNqQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksS0FBb0IsQ0FBQztRQUV6QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLDBCQUEwQixFQUFFO1lBQ2xFLFdBQVcsR0FBRyxxQkFBcUIsT0FBTzt3Q0FDZCxTQUFTO3FDQUNaLEtBQUssQ0FBQyxNQUFNO2tDQUNmLEtBQUssQ0FBQyxHQUFHO21DQUNSLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTTt5Q0FDWixLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVU7b0NBQzNCLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFNUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1NBRTdCO2FBQU07WUFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXBFLFdBQVcsR0FBRyxxQkFBcUIsT0FBTzt3Q0FDZCxTQUFTO3FDQUNaLEtBQUssQ0FBQyxNQUFNO2tDQUNmLEtBQUssQ0FBQyxHQUFHO21DQUNSLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUU3QyxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQztTQUM5QjtRQUVELFVBQVUsR0FBRztZQUNULE9BQU8sRUFBRSxLQUFLO1lBQ2QsU0FBUyxFQUFFLFNBQVM7WUFDcEIsYUFBYSxFQUFFLE9BQU87WUFDdEIsV0FBVyxFQUFFLFdBQVc7U0FDM0IsQ0FBQztRQUVGLE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNLLFVBQVUsQ0FBQyxLQUF3QjtRQUN2QyxJQUFJLFFBQXVCLENBQUM7UUFFNUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0IsSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFLEtBQUssa0JBQWtCLEVBQUU7Z0JBQzFDLFFBQVEsR0FBRyxHQUFHLENBQUM7Z0JBQ2YsT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3pELENBQUM7Ozs7WUF4SEosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFSUSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYW1lZEVycm9yVHlwZSB9IGZyb20gJy4uL3R5cGVzL25hbWVkLWVycm9yLnR5cGUnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwR2VuZXJpY0Vycm9yU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2h0dHAtZ2VuZXJpYy1lcnJvci5zZXJ2aWNlJztcblxuLyoqXG4gKiBTZXJ2acOnbyBkZSBlcnJvcyBFcnJvclN0YWNrU2VydmljZVxuICogQGNsYXNzIFxuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBFcnJvclN0YWNrU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wcmllZGFkZSBlcnJvcnNcbiAgICAgKiBAdHlwZSB7UmVwbGF5U3ViamVjdDxOYW1lZEVycm9yVHlwZT59XG4gICAgICovXG4gICAgZXJyb3JzOiBSZXBsYXlTdWJqZWN0PE5hbWVkRXJyb3JUeXBlPiA9IG5ldyBSZXBsYXlTdWJqZWN0PE5hbWVkRXJyb3JUeXBlPigpO1xuXG4gICAgLyoqXG4gICAgICogbWV0b2RvIGNvbnN0cnV0b3IgaW5qZXRhIHNlcnZpw6dvIGdlbmVyaWNvIGRlIGVycm9zXG4gICAgICogQHBhcmFtIHtIdHRwR2VuZXJpY0Vycm9yU2VydmljZX0gZ2VuZXJpY0Vycm9yU2VydmljZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZ2VuZXJpY0Vycm9yU2VydmljZTogSHR0cEdlbmVyaWNFcnJvclNlcnZpY2UpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdlcnJvclN0YWNrJykpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdlcnJvclN0YWNrJywgSlNPTi5zdHJpbmdpZnkoW10pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0RXJyb3JzU3ViamVjdHMoKS5mb3JFYWNoKChlcnJvcjogTmFtZWRFcnJvclR5cGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzLm5leHQoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBvciBjcmlhciBlcnJvIGRvIHRpcG8gSHR0cFJlc3BvbnNlXG4gICAgICogQHBhcmFtIHtIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgY3JlYXRlKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICBjb25zdCBuYW1lZEVycm9yID0gdGhpcy5jcmVhdGVOYW1lZEVycm9yKGVycm9yKTtcblxuICAgICAgICBjb25zdCBwZXJzaXN0ZWRFcnJvcnM6IE5hbWVkRXJyb3JUeXBlW10gPSB0aGlzLmdldEVycm9yc1N1YmplY3RzKCk7XG5cbiAgICAgICAgaWYgKHBlcnNpc3RlZEVycm9ycy5sZW5ndGggPj0gMTUpIHtcbiAgICAgICAgICAgIHBlcnNpc3RlZEVycm9ycy5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGVyc2lzdGVkRXJyb3JzLnB1c2gobmFtZWRFcnJvcik7XG5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Vycm9yU3RhY2snLCBKU09OLnN0cmluZ2lmeShwZXJzaXN0ZWRFcnJvcnMpKTtcblxuICAgICAgICB0aGlzLmVycm9ycy5uZXh0KG5hbWVkRXJyb3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIG9idGVyIG8gY29udGXDumRvIGRvcyBlcnJvcyBlbWl0aWRvc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMgTmFtZWRFcnJvclR5cGVbXVxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0RXJyb3JzU3ViamVjdHMoKTogTmFtZWRFcnJvclR5cGVbXSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdlcnJvclN0YWNrJykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIGl0ZW50aWZpY2EgbyB0aXBvIGRlIGVycm8gbGFuw6dhZG9cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgTmFtZWRFcnJvclR5cGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZU5hbWVkRXJyb3IoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogTmFtZWRFcnJvclR5cGUge1xuICAgICAgICBsZXQgZnVsbE1lc3NhZ2U6IHN0cmluZztcbiAgICAgICAgbGV0IG5hbWVkRXJyb3I6IE5hbWVkRXJyb3JUeXBlO1xuICAgICAgICBsZXQgY3JlYXRlZEF0OiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgbGV0IGVycm9ySWQgPSB0aGlzLmdldEVycm9ySWQoZXJyb3IpO1xuICAgICAgICBsZXQgdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgICAgICAgaWYgKGVycm9yLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSA9PT0gJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbicpIHtcbiAgICAgICAgICAgIGZ1bGxNZXNzYWdlID0gYFgtQ29ycmVsYXRpb24tSUQ6ICR7ZXJyb3JJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogJHtjcmVhdGVkQXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICR7ZXJyb3Iuc3RhdHVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAke2Vycm9yLnVybH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6ICR7ZXJyb3IuZXJyb3IuZGV0YWlsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2t0cmFjZTogJHtlcnJvci5lcnJvci5zdGFja3RyYWNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F1c2U6ICR7ZXJyb3IuZXJyb3IuY2F1c2V9YDtcblxuICAgICAgICAgICAgdGl0bGUgPSBlcnJvci5lcnJvci50aXRsZTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZ2VuZXJpY0Vycm9yID0gdGhpcy5nZW5lcmljRXJyb3JTZXJ2aWNlLmdldEVycm9yQnlDb2RlKGVycm9yKTtcblxuICAgICAgICAgICAgZnVsbE1lc3NhZ2UgPSBgWC1Db3JyZWxhdGlvbi1JRDogJHtlcnJvcklkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEF0OiAke2NyZWF0ZWRBdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogJHtlcnJvci5zdGF0dXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICR7ZXJyb3IudXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogJHtnZW5lcmljRXJyb3IuZGV0YWlsfWA7XG5cbiAgICAgICAgICAgIHRpdGxlID0gZ2VuZXJpY0Vycm9yLnRpdGxlO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZWRFcnJvciA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRpdGxlLFxuICAgICAgICAgICAgY3JlYXRlZEF0OiBjcmVhdGVkQXQsXG4gICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBlcnJvcklkLFxuICAgICAgICAgICAgZnVsbE1lc3NhZ2U6IGZ1bGxNZXNzYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5hbWVkRXJyb3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwb3Igb2J0ZXIgbyBpZGVudGlmaWNhZG9yIGRvIGVycm9cbiAgICAgKiBAcHJpdmF0ZSBcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0RXJyb3JJZChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiBzdHJpbmcge1xuICAgICAgICBsZXQgZXJyb3JLZXk6IHN0cmluZyB8IG51bGw7XG5cbiAgICAgICAgZXJyb3IuaGVhZGVycy5rZXlzKCkuZXZlcnkoa2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkudG9VcHBlckNhc2UoKSA9PT0gJ1gtQ09SUkVMQVRJT04tSUQnKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JLZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBlcnJvcktleSA/IGVycm9yLmhlYWRlcnMuZ2V0KGVycm9yS2V5KSA6IG51bGw7XG4gICAgfVxuXG59XG4iXX0=