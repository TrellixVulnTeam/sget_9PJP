import { Injector, OnInit, AfterViewInit, EventEmitter } from "@angular/core";
import { WrappedFormControlSuperclass } from "@nuvem/angular-base";
import { ControlContainer } from "@angular/forms";
import * as ɵngcc0 from '@angular/core';
export declare class FieldComponent<OuterType, InnerType = OuterType> extends WrappedFormControlSuperclass<OuterType, InnerType> implements OnInit, AfterViewInit {
    private controlContainer;
    private injector;
    form: string;
    formControlName: string;
    extraParams: any;
    required: boolean;
    onBlur: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    input: any;
    private _name;
    private _label;
    get name(): string;
    set name(value: string);
    get label(): string;
    set label(value: string);
    constructor(controlContainer: ControlContainer, injector: Injector);
    ngOnInit(): void;
    setRequired(): void;
    setElementRefAttr(attr: string, value: any): void;
    setFormControlValidators(): void;
    setValidators(): void;
    ngAfterViewInit(): void;
    onBlurEvent(event: any): void;
    onSelectEvent(event: any): void;
    onFocusEvent(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FieldComponent<any, any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FieldComponent<any, any>, "[nField]", never, { "name": "name"; "label": "label"; "form": "form"; "formControlName": "formControlName"; "extraParams": "extraParams"; "required": "required"; }, { "onBlur": "onBlur"; "onSelect": "onSelect"; "onFocus": "onFocus"; }, never>;
}

//# sourceMappingURL=field.component.d.ts.map