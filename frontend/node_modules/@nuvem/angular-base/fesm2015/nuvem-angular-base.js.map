{"version":3,"file":"nuvem-angular-base.js","sources":["../../../projects/angular-base/src/lib/block-ui/block-ui.service.ts","../../../projects/angular-base/src/lib/block-ui/block-ui.interceptor.ts","../../../projects/angular-base/src/lib/version-tag/version-tag.config.ts","../../../projects/angular-base/src/lib/version-tag/version-tag.component.ts","../../../projects/angular-base/src/lib/version-tag/version-tag.module.ts","../../../projects/angular-base/src/lib/security/authentication/authentication.ts","../../../projects/angular-base/src/lib/security/authentication/logout.directive.ts","../../../projects/angular-base/src/lib/security/authentication/user.directive.ts","../../../projects/angular-base/src/lib/security/authentication/login-success.component.ts","../../../projects/angular-base/src/lib/security/authentication/authorization/authorization.ts","../../../projects/angular-base/src/lib/security/authentication/authorization/has-role.directive.ts","../../../projects/angular-base/src/lib/security/authentication/hide-while-login.component.ts","../../../projects/angular-base/src/lib/security/config/auth-config.ts","../../../projects/angular-base/src/lib/security/authentication/authorization/authorization.service.ts","../../../projects/angular-base/src/lib/security/authentication/authentication.service.ts","../../../projects/angular-base/src/lib/security/authentication/not-authenticated-error-provider.service.ts","../../../projects/angular-base/src/lib/error/providers/error.provider.ts","../../../projects/angular-base/src/lib/security/token/token.ts","../../../projects/angular-base/src/lib/security/token/jwt-auth.interceptor.ts","../../../projects/angular-base/src/lib/security/token/jwt-token.service.ts","../../../projects/angular-base/src/lib/security/security.module.ts","../../../projects/angular-base/src/lib/security/authentication/auth.guard.ts","../../../projects/angular-base/src/lib/security/authentication/security.bootstrap.ts","../../../projects/angular-base/src/lib/accessibility/accessibility.service.ts","../../../projects/angular-base/src/lib/accessibility/accessibility.module.ts","../../../projects/angular-base/src/lib/common-mask/common-mask.service.ts","../../../projects/angular-base/src/lib/common-mask/common-mask.module.ts","../../../projects/angular-base/src/lib/error/error.service.ts","../../../projects/angular-base/src/lib/error/providers/notification.provider.ts","../../../projects/angular-base/src/lib/error/types/application-problem.type.ts","../../../projects/angular-base/src/lib/error/services/http-application-problem-error.service.ts","../../../projects/angular-base/src/lib/error/types/http-generic-error.type.ts","../../../projects/angular-base/src/lib/error/services/http-generic-error.service.ts","../../../projects/angular-base/src/lib/error/error.module.ts","../../../projects/angular-base/src/lib/error/services/notification.service.ts","../../../projects/angular-base/src/lib/error/services/error-stack.service.ts","../../../projects/angular-base/src/lib/error/services/error-stack-provider.service.ts","../../../projects/angular-base/src/lib/pipes/cep.pipe.ts","../../../projects/angular-base/src/lib/pipes/cpf.pipe.ts","../../../projects/angular-base/src/lib/pipes/cnpj.pipe.ts","../../../projects/angular-base/src/lib/pipes/pipe.regex.ts","../../../projects/angular-base/src/lib/pipes/pipe.limit.ts","../../../projects/angular-base/src/lib/pipes/pipe.module.ts","../../../projects/angular-base/src/lib/clipboard/clipboard.service.ts","../../../projects/angular-base/src/lib/clipboard/clipboard.directive.ts","../../../projects/angular-base/src/lib/clipboard/clipboard.module.ts","../../../projects/angular-base/src/lib/directives/unmask.directive.ts","../../../projects/angular-base/src/lib/directives/only-numbers.directive.ts","../../../projects/angular-base/src/lib/directives/directives.module.ts","../../../projects/angular-base/src/lib/form-notification/types/form-notification.type.ts","../../../projects/angular-base/src/lib/form-notification/types/field-form-notification.type.ts","../../../projects/angular-base/src/lib/form-notification/services/form-notification.service.ts","../../../projects/angular-base/src/lib/form-notification/services/form-notification-error-provider.service.ts","../../../projects/angular-base/src/lib/form-notification/types/clean-form-notification.type.ts","../../../projects/angular-base/src/lib/form-notification/interceptor/form-notification.interceptor.ts","../../../projects/angular-base/src/lib/form-notification/components/form-notification-superclass.component.ts","../../../projects/angular-base/src/lib/form-notification/form-notification.module.ts","../../../projects/angular-base/src/lib/form-notification/providers/form-notification.provider.ts","../../../projects/angular-base/src/lib/form-utils/injectable-superclass.ts","../../../projects/angular-base/src/lib/form-utils/directive-superclass.ts","../../../projects/angular-base/src/lib/form-utils/form-control-superclass.ts","../../../projects/angular-base/src/lib/form-utils/wrapped-form-control-superclass.ts","../../../projects/angular-base/src/public-api.ts","../../../projects/angular-base/src/nuvem-angular-base.ts"],"sourcesContent":["import { BlockUiStatus } from './block-ui.status';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * Class BlockUiService\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BlockUiService {\n\n    /**\n     * subject property\n     * @private\n     * @type {Subject<BlockUiStatus>}\n     */\n    private subject = new Subject<BlockUiStatus>();\n\n    /**\n     * loaderStatus property\n     * @public\n     * @type {Observable}\n     */\n    loaderStatus = this.subject.asObservable();\n\n    /**\n     * constructor method\n     * @constructor\n     */\n    constructor() { }\n\n    /**\n     * show methods\n     * @returns void\n     */\n    show() {\n        this.subject.next(<BlockUiStatus>{ status: true });\n    }\n\n    /**\n     * hide methods\n     * @returns void\n     */\n    hide() {\n        this.subject.next(<BlockUiStatus>{ status: false });\n    }\n}\n","import { Observable } from 'rxjs';\nimport { HttpEvent, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { Injectable } from \"@angular/core\";\nimport { tap } from 'rxjs/operators';\nimport { BlockUiService } from './block-ui.service';\n\n/**\n * Class BlockUiInterceptor\n * @class\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BlockUiInterceptor implements HttpInterceptor {\n\n    /**\n     * constructor method\n     * @constructor\n     * @param {BlockUiService} service \n     */\n    constructor(private service: BlockUiService) {}\n\n    /**\n     * intercept method\n     * @public \n     * @param {HttpRequest<any>} req\n     * @param {HttpHandler} next\n     * @return Observable<HttpEvent<any>>\n     */\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        if (this.isMutation(req.method)) {\n            this.service.show();\n        }\n\n        return next.handle(req).pipe(\n            tap(\n                (event: HttpEvent<any>) => {\n                    if (event instanceof HttpResponse) {\n                        this.service.hide();\n                    }\n                },\n                (err: any) => {\n                    this.service.hide();\n                }\n            )\n        );\n    }\n    /**\n     * isMutation method\n     * @private\n     * @param {string} method\n     * @return boolean\n     */\n    private isMutation(method: string): boolean {\n        const mutationsMethods = [\n            'DELETE',\n            'PATCH',\n            'POST',\n            'PUT'\n        ];\n\n        return mutationsMethods.indexOf(method) !== -1;\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Interface para dados de configuração do Version Tag\n * @interface\n */\nexport interface VersionTagConfig {\n\n    /**\n     * Propriedade que determina a versão da aplicação\n     * @type {sring}\n     */\n    appVersion: string;\n}\n\n/**\n * Constante de configuração\n * @const\n */\nexport const VERSIONTAG_CONFIG = new InjectionToken<VersionTagConfig>('versiontag.config');\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { VERSIONTAG_CONFIG, VersionTagConfig } from './version-tag.config';\n\n/**\n * Componente responsável por expor o seletor <app-version-tag></app-version-tag> para reuso\n * @class\n */\n@Component({\n    selector: 'app-version-tag',\n    templateUrl: './version-tag.component.html'\n})\nexport class VersionTagComponent implements OnInit {\n\n\n    constructor(@Inject(VERSIONTAG_CONFIG) private config: VersionTagConfig) { }\n\n    /**\n     * Propriedade de para definição para classe CSS\n     * @public\n     * @type {string}\n     */\n    @Input() cssClass: string;\n\n    /**\n     * Propriedade para definição de versão\n     * @public\n     * @type {string}\n     */\n    version: string;\n\n    /**\n     * Metodo executado ao carregar o componente responsável por carregar o arquivo 'package.json'\n     * @return void\n     */\n    ngOnInit() {\n        this.version = this.config.appVersion;\n    }\n}\n","import { VersionTagComponent } from './version-tag.component';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { VersionTagConfig, VERSIONTAG_CONFIG } from './version-tag.config';\n\n/**\n * O componente VersionTag exibe o atributo `version` do arquivo `package.json` do sistema,\n * com o intuito de informar o usuário a versão atual da aplicação. Inicialmente foi feito para\n * ser utilizado no rodapé das aplicações conforme o exemplo a seguir.\n * @module\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    declarations: [\n        VersionTagComponent\n    ],\n    exports: [\n        VersionTagComponent\n    ]\n})\nexport class VersionTagModule {\n\n    /**\n     * forRoot method\n     * @public\n     * @static\n     * @returns ModuleWithProviders\n     */\n    static forRoot(config: VersionTagConfig): ModuleWithProviders<VersionTagModule> {\n        return {\n            ngModule: VersionTagModule,\n            providers: [\n                { provide: VERSIONTAG_CONFIG, useValue: config },\n            ]\n        };\n    }\n}\n","import { User } from \"./user\";\nimport { Observable } from \"rxjs\";\n\n/**\n * Classe abstrata para serviço de autenticação\n * @class\n */\nexport abstract class Authentication<U extends User> {\n\n    /**\n     * Metodo responsável por checar se o usuário esta autenticado na aplicação\n     * @returns boolean\n     * @abstract\n     * @public\n     */\n    abstract isAuthenticated(): boolean;\n\n    /**\n     * Metodo responsável pelo login da aplicação\n     * @public\n     */\n    abstract login();\n\n    /**\n     * Metodo responsável pelo logou da aplicação\n     * @public\n     * @returns void\n     */\n    abstract logout();\n\n    /**\n     * Metodo responsável por obter os dados do usuário logado\n     * @public\n     * @return User\n     */\n    abstract getUser(): U;\n\n    abstract redirect();\n\n    abstract getLoginNotifications(): Observable<User>;\n\n}\n","import { Directive, HostListener } from \"@angular/core\";\nimport { Authentication } from \"./authentication\";\nimport { User } from \"./user\";\n\n@Directive({ selector: '[logout]' })\nexport class LogoutDirective {\n\n    constructor(private authenticationService: Authentication<User>) { }\n\n    @HostListener('click')\n    click(): void {\n        this.authenticationService.logout();\n    }\n\n}\n","import { Directive, ElementRef, Input, OnInit } from \"@angular/core\";\nimport { User } from \"./user\";\nimport { Authentication } from \"./authentication\";\n\n@Directive({ selector: '[user]' })\nexport class UserDirective implements OnInit {\n\n    @Input()\n    user: string;\n\n    constructor(private el: ElementRef, private authenticationService: Authentication<User>) { }\n\n    ngOnInit(): void {\n        if (this.authenticationService.isAuthenticated()) {\n            let user = this.authenticationService.getUser();\n            this.el.nativeElement.innerHTML += this.user ? user[this.user] : user.name;\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Componente de login que será chamado quando a aplicação for logada com sucesso. \n * Deverá ser criada uma rota para esse componente.\n * @class\n */\n@Component({\n    selector: 'app-login-success',\n    template: ''\n})\nexport class LoginSuccessComponent implements OnInit {\n\n  constructor(private authenticationService: Authentication<User>) { }\n\n  ngOnInit(): void {\n    this.authenticationService.login();\n  }\n\n}\n","\n/**\n * Classe abstrata para serviço de autorização\n * @class\n */\nexport abstract class Authorization {\n\n    /**\n     * Métodos responsável por identificar as regras de acesso\n     * @public\n     * @abstract\n     * @param {any} role\n     * @returns boolean\n     */\n    abstract hasRole(role: any): boolean;\n\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Authorization } from './authorization';\nimport { Authentication } from '../authentication';\nimport { User } from '../user';\nimport { Subscription } from 'rxjs';\n\n/**\n * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.\n * @class\n */\n@Directive( {\n    selector: '[hasRole]'\n})\nexport class HasRoleDirective implements OnDestroy {\n\n    private loginNotifications: Subscription;\n\n    /**\n     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança\n     * @param {TemplateRef<any>} templateRef\n     * @param {ViewContainerRef} viewContainer\n     * @param {Authorization} authorization\n     * @param {Authentication<User>} authentication\n     */\n    constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef,\n        private authorization: Authorization,\n        private authentication: Authentication<User>) { }\n\n    /**\n     * Propriedade para identificar regras de acesso aos itens\n     * @type {string}\n     */\n    @Input() set hasRole(hasRole: string | string[]) {\n        this.viewContainer.clear();\n        if (hasRole) {\n            if (this.loginNotifications) this.loginNotifications.unsubscribe();\n            this.loginNotifications = this.authentication.getLoginNotifications().subscribe(() => {\n                if (this.authorization.hasRole(hasRole)) {\n                    this.viewContainer.clear();\n                    this.viewContainer.createEmbeddedView(this.templateRef);\n                }\n            });\n        } else {\n            this.viewContainer.createEmbeddedView(this.templateRef);\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.loginNotifications) {\n            this.loginNotifications.unsubscribe();\n        }\n    }\n\n}\n","import { Component, ElementRef, OnDestroy, OnInit, Input, AfterViewInit, AfterContentInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Authentication } from './authentication';\nimport { User } from './user';\nimport { BlockUiService } from '../../block-ui/block-ui.service';\n\n/**\n * \n * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.\n * \n * @class\n */\n@Component({\n    selector: '[hide-while-login]',\n    templateUrl: './hide-while-login.component.html'\n})\nexport class HideWhileLoginComponent implements OnInit, AfterViewInit, AfterContentInit, OnDestroy {\n\n    /**\n     * Carrega conteúdo\n     * @type {loadingString}\n     */\n    @Input()\n    public loadingContent: string = \"\";\n\n    private loginNotifications: Subscription;\n\n    public waitingLogin: boolean = false;\n\n    /**\n     * constructor method\n     * @param {ElementRef} hostComponent\n     * @param {AbstractAuthentication} auth\n     * @param {BlockUiService} blockUiService\n     * @constructor\n     */\n    constructor(\n        private hostComponent: ElementRef,\n        private auth: Authentication<User>,\n        private blockUiService: BlockUiService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.waitingLogin = !this.auth.isAuthenticated();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.auth.isAuthenticated()) {\n            this.blockUiService.show();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (!this.auth.isAuthenticated()) {\n            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {\n                this.hostComponent.nativeElement.children[i].style.display = 'none';\n            }\n        }\n        \n        this.loginNotifications = this.auth.getLoginNotifications().subscribe(() => {\n            for (let i = 1; i < this.hostComponent.nativeElement.children.length; i++) {\n                this.hostComponent.nativeElement.children[i].style.display = 'inherit';\n            }\n            this.waitingLogin = false;\n            this.blockUiService.hide();\n        });\n    }\n\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.loginNotifications.unsubscribe();\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Interface para dados de configuração AuthConfig\n * @interface\n */\nexport interface AuthConfig {\n\n    /**\n     * Propriedade para URL base\n     * @type {sring}\n     */\n    baseUrl: string;\n\n    /**\n     * Propriedade para URL de login\n     * @type {sring}\n     */\n    loginUrl: string;\n\n    /**\n     * Rota de navegação quando o usuário for logado com sucesso na aplicação.\n     * @type {sring}\n     */\n    loginSuccessRoute: string;\n\n    /**\n     * Propriedade para URL de logOut\n     * @type {string}\n     */\n    logoutUrl: string;\n\n    /**\n     * Propriedade para URL de dados do usuário\n     * @type {string}\n     */\n    detailsUrl: string;\n\n    /**\n     * Propriedade para definião de storage\n     * @type {Storage}\n     */\n    storage: Storage;\n\n    /**\n     * Propriedade para identificar o idice do usuário no storage\n     * @type {string}\n     */\n    userStorageIndex: string;\n\n    /**\n     * Propriedade para identificar o idice do token no storage\n     * @type {string}\n     */\n    tokenStorageIndex?: string;\n\n}\n\n/**\n * Constante de configuração\n * @const\n */\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('auth.config');\n","\nimport { Injectable } from '@angular/core';\nimport { Authorization } from './authorization';\nimport { Authentication } from '../authentication';\nimport { User } from '../user';\n\n/**\n * Serviço de autorização \n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthorizationService extends Authorization {\n\n    /**\n     * Método construtor para a injeção do serviço de configuração AuthConfig\n     * @constructor\n     * @param {AuthConfig} config\n     */\n    constructor(private authenticationService: Authentication<User>) {\n        super();\n    }\n\n    /**\n     * Método responsável por identificar as regras de acesso\n     * @public\n     * @param {any} role\n     * @returns boolean\n     */\n    hasRole(role: any): boolean {\n        if (role) {\n            const user = this.authenticationService.getUser();\n            if (role instanceof Array) {\n                return user.roles.some((userRole: string) => role.some((checkRole: string) => userRole === checkRole));\n            }\n            return user.roles.some((userRole: string) => userRole === role);\n        }\n        return true;\n    }\n\n}\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { AuthConfig, AUTH_CONFIG } from '../config/auth-config';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport { User } from './user';\nimport { Authentication } from './authentication';\nimport { HttpClient } from '@angular/common/http';\nimport { tap, filter } from 'rxjs/operators';\n\nexport function isAuthenticated(config: AuthConfig): boolean {\n    return null !== config.storage.getItem(config.userStorageIndex);\n};\n\nexport function redirect(config: AuthConfig): void {\n    window.location.href = config.loginUrl;;\n};\n\n/**\n * Serviço de autenticação\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthenticationService<U extends User> extends Authentication<U> {\n\n    loginNotifications: BehaviorSubject<User> = new BehaviorSubject<User>(this.getUser());\n\n    constructor(@Inject(AUTH_CONFIG) private config: AuthConfig, private http: HttpClient) {\n        super();\n    }\n\n    /**\n     * Método para verificar se o usuário esta autenticado na aplicação\n     * @returns boolean\n     * @public\n     */\n    isAuthenticated(): boolean {\n        return isAuthenticated(this.config);\n    }\n\n    /**\n     * Método responsável por realizar redirecionamentos\n     * @returns void\n     * @public\n     */\n    redirect() {\n        redirect(this.config);\n    }\n\n    /**\n     * Método responsável pelo login da aplicação\n     * @public\n     * @param {User} user\n     * @returns Observable<any>\n     */\n    login() {\n        this.getUserDetails()\n            .subscribe((user) => {\n                this.setUser(user);\n                this.loginNotifications.next(user)\n            });\n    }\n\n    /**\n     * Método responsável pelo logou da aplicação\n     * @public\n     * @returns void\n     */\n    logout() {\n        this.loginNotifications.next(null);\n        this.config.storage.removeItem(this.config.userStorageIndex);\n        window.location.href = this.config.logoutUrl;\n    }\n\n    /**\n     * Método responsável por obter os dados do usuário logado\n     * @public\n     * @returns Observable<any>\n     */\n    public getUserDetails(): Observable<U> {\n        return this.http.get<U>(this.config.baseUrl + this.config.detailsUrl);\n    }\n\n    private setUser(user: U) {\n        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));\n    }\n\n    getUser(): U {\n        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));\n    }\n\n    getLoginNotifications(): Observable<User> {\n        return this.loginNotifications.pipe(filter((value) => value != null));\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorProvider } from '../../error/providers/error.provider';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Provedor de error para criação de erros de notificação.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NotAuthenticatedErrorProvider implements ErrorProvider {\n\n    constructor(private authenticationService: Authentication<User>) { }\n\n    /**\n     * Método para identificar se o usuário está logado\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && error.status == 401;\n    }\n\n    /**\n     * Método para redirecionar caso o usuário não esteja\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        this.authenticationService.redirect();\n    }\n\n}\n","/**\n * Anstract class ErrorProvider\n * @class\n * @abstract\n */\nexport abstract class ErrorProvider {\n    /**\n     * Metodo responsável pela identificação de erros\n     * @param {Error} error\n     * @returns Boolean\n     */\n    abstract shouldHandle(error: Error): Boolean;\n\n    /**\n     * Metodo pela adição de erros\n     * @param {Error} error\n     * @returns void\n     */\n    abstract handle(error: Error): void;\n}\n","import { HttpRequest, HttpHeaders } from \"@angular/common/http\";\n\n/**\n * Classe abstrata para gerencia de tokens\n * @class\n */\nexport abstract class Token {\n\n    /**\n     * Metodo responsável pela extração de tokes do heaedrs das requisições\n     * @public\n     * @param {HttpHeaders} headers\n     * @returns strng\n     */\n    abstract extractTokenFromHeaders(headers: HttpHeaders): String;\n\n    /**\n     * Metodo responsável pela adição dos tokens no storage\n     * @public\n     * @param {String} token\n     * @returns void\n     */\n    abstract storeToken(token: String);\n\n    /**\n     * Metodo responsável por injetar token no header das requisições\n     * @public\n     * @param {HttpRequest<any>} request\n     * @returns HttpRequest<any>\n     */\n    abstract setTokenInHeader(request: HttpRequest<any>): HttpRequest<any>;\n\n    /**\n     * Metodo responsável por verificar a existencia de um token de autenticação\n     * @returns boolean\n     * @public\n     */\n    abstract hasToken(): boolean;\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { tap } from 'rxjs/operators';\nimport { Token } from \"./token\";\n\n/**\n * Implementação de classe para interceptar e tratar requisições http/https\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class JWTAuthInterceptor implements HttpInterceptor {\n\n    /**\n     * Metodo construtor responsável por injetar serviço de autenticação\n     * @constructor\n     * @param {AbstractAuthentication} auth\n     */\n    constructor(private token: Token) {}\n\n    /**\n     * Metodo responsável por interceptar requisições HTTP/HTTPS\n     * @public\n     * @param {HttpRequest<any>} request\n     * @param {HttpHandler} next\n     * @returns Observable<HttpEvent<any>>\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.token.hasToken()) {\n            request = this.token.setTokenInHeader(request);\n        }\n        return next.handle(request)\n            .pipe(\n                tap((event: HttpEvent<any>) => {\n                    if (event instanceof HttpResponse) {\n                        const token: String = this.token.extractTokenFromHeaders(event.headers);\n                        if (null !== token) this.token.storeToken(token);\n                    }\n                    return event;\n                })\n            );\n    }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpRequest, HttpHeaders } from \"@angular/common/http\";\nimport { Token } from './token';\nimport { AuthConfig, AUTH_CONFIG } from '../config/auth-config';\n\n/**\n * Inplementação de serviço JWTTokenService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class JWTTokenService extends Token {\n\n    /**\n     * TOKEN_PREFIX  property\n     * @type {string}\n     */\n    public static readonly TOKEN_PREFIX = \"Bearer\";\n\n    /**\n     * HEADER_STRING property\n     * @type {string}\n     */\n    public static readonly HEADER_STRING = \"Authorization\";\n\n    /**\n     * Metodo construtor responsável por injetar as configurações de autenticação\n     * @constructor\n     * @param {AuthConfig} config\n     */\n    constructor(@Inject(AUTH_CONFIG) private config: AuthConfig) {\n        super();\n    }\n    /**\n     * Metodo responsável pela extração de tokes do heaedrs das requisições\n     * @public\n     * @param {HttpHeaders} headers\n     * @returns string\n     */\n    extractTokenFromHeaders(headers: HttpHeaders): String {\n        return headers.get(JWTTokenService.HEADER_STRING);\n    }\n\n    /**\n     * Metodo responsável pela adição dos tokens no storage\n     * @public\n     * @param {String} token\n     * @returns void\n     */\n    storeToken(token: String) {\n        this.config.storage.setItem(\n            this.config.tokenStorageIndex,\n            token.toString()\n        );\n    }\n\n    /**\n     * Metodo responsável por injetar token no header das requisições\n     * @public\n     * @param {HttpRequest<any>} request\n     * @returns HttpRequest<any>\n     */\n    setTokenInHeader(request: HttpRequest<any>): HttpRequest<any> {\n        const req: HttpRequest<any> = request.clone({\n            headers: new HttpHeaders({\n                [JWTTokenService.HEADER_STRING]: this.config.storage.getItem(this.config.tokenStorageIndex)\n            })\n        });\n        return req;\n    }\n\n    /**\n     * Metodo responsável por verificar a existencia de um token de autenticação\n     * @returns boolean\n     * @public\n     */\n    hasToken(): boolean {\n        return null !== this.config.storage.getItem(this.config.tokenStorageIndex);\n    }\n\n}\n\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LogoutDirective } from './authentication/logout.directive';\nimport { UserDirective } from './authentication/user.directive';\nimport { LoginSuccessComponent } from './authentication/login-success.component';\nimport { HasRoleDirective } from './authentication/authorization/has-role.directive';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HideWhileLoginComponent } from './authentication/hide-while-login.component';\nimport { AUTH_CONFIG, AuthConfig } from './config/auth-config';\nimport { AuthorizationService } from './authentication/authorization/authorization.service';\nimport { AuthenticationService } from './authentication/authentication.service';\nimport { Authorization } from './authentication/authorization/authorization';\nimport { Authentication } from './authentication/authentication';\nimport { NotAuthenticatedErrorProvider } from './authentication/not-authenticated-error-provider.service';\nimport { ErrorProvider } from '../error/providers/error.provider';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { JWTAuthInterceptor } from './token/jwt-auth.interceptor';\nimport { Token } from './token/token';\nimport { JWTTokenService } from './token/jwt-token.service';\n\n/**\n * O modulo de segurança contem funcionalidades para autenticação, autorização, redirecionamento \n * para login, gerenciamento de tokens JWT e obtenção e armazenamento de dados de usuário.\n * @class\n */\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        HttpClientModule\n    ],\n    declarations: [\n        LogoutDirective,\n        UserDirective,\n        LoginSuccessComponent,\n        HasRoleDirective,\n        HideWhileLoginComponent\n    ],\n    providers: [\n        AuthorizationService,\n        AuthenticationService,\n        { provide: ErrorProvider, useClass: NotAuthenticatedErrorProvider, multi: true },\n        { provide: Authorization, useClass: AuthorizationService },\n        { provide: Authentication, useClass: AuthenticationService }\n    ],\n    exports: [\n        LogoutDirective,\n        UserDirective,\n        LoginSuccessComponent,\n        HasRoleDirective,\n        HideWhileLoginComponent\n    ]\n})\nexport class SecurityModule {\n\n    /**\n     * forRoot method\n     * @public\n     * @static\n     * @returns ModuleWithProviders\n     */\n    static forRoot(config: AuthConfig): ModuleWithProviders<SecurityModule> {\n        return { \n            ngModule: SecurityModule, \n            providers: [\n                { provide: AUTH_CONFIG, useValue: config },\n                config.tokenStorageIndex ? \n                  [ \n                    { provide: Token, useClass: JWTTokenService },\n                    { provide: HTTP_INTERCEPTORS, useClass: JWTAuthInterceptor, multi: true }\n                  ] : []\n            ]\n        };\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Authentication } from './authentication';\nimport { User } from './user';\n\n/**\n * Guard que verifica se usuário está autenticado antes do usuário acessar uma rota. \n * Se for verificar que o usuário não está autenticado, é feito um redirecionamento para o login.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n    /**\n     * Método construtor responsável pela injeção do serviço de autenticação\n     * @constructor\n     * @param {Authentication} auth\n     */\n    constructor(private authenticationService: Authentication<User>) {}\n\n    /**\n     * Método responsável por identificar se o usuário está autenticado\n     * @public\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns boolean\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        if (this.authenticationService.isAuthenticated()) {\n            return true;\n        }\n        this.authenticationService.redirect();\n        return false;\n    }\n\n    /**\n     * Método responsável por atuar somente em rotas filhas de modo independente\n     * @public\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns boolean\n     */\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.canActivate(route, state);\n    }\n\n}\n","import { AuthConfig } from \"../config/auth-config\";\nimport { isAuthenticated as ia, redirect } from \"./authentication.service\";\n\nexport function bootstrapSecurity(\n    config: AuthConfig, authenticated: () => void, isAuthenticated = ia, notAuthenticated = redirect) {\n    if (window.location.href.includes(config.loginSuccessRoute) || isAuthenticated(config)) {\n        authenticated();\n    } else {\n        notAuthenticated(config);\n    }\n}\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\n/**\n * AccessbilityService Serviço de acessibilidade, este serviço prove recursos de contraste\n * de tela e controle do tamanho da fonte apresentadas na tela.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class AccessbilityService {\n\n    private renderer: Renderer2\n\n    constructor(rendererFactory: RendererFactory2) {\n        this.renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    /**\n     * Propriedade que define tamanho da fonte\n     * @type {number}\n     */\n    private fontSize: number = 1.0;\n\n    /**\n     * Medoto para habilitar contraste\n     * @public\n     * @returns void\n     */\n    enableHighContrast() {\n        this.renderer.addClass(document.body, 'contraste');\n    }\n\n    /**\n     * Metodo para desabilitar contraste\n     * @public\n     * @returns void\n     */\n    disableHighContrast() {\n        this.renderer.removeClass(document.body, 'contraste');\n    }\n\n    /**\n     * Metodo utilizado para aumentar o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n    increaseFontSize() {\n        this.fontSize += 0.1;\n        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n\n    /**\n     * Metodo utilizado para diminuir o tamnho da fonte apresentada no display\n     * @public\n     * @returns void\n     */\n    decreaseFontSize() {\n        this.fontSize -= 0.1;\n        this.renderer.setStyle(document.querySelector('div.layout-wrapper'), 'font-size', this.fontSize + 'em');\n    }\n\n    addAccessibilityIcons() {\n        const elements = document.querySelector('.p-button-icon-left, p-button-icon-righ');\n\n        if (elements) {\n            this.renderer.setStyle(elements, 'aria-hidden', true);\n        }\n    }\n\n    addAccessibilityMessages(msg: {severity: string}) {\n        let type = 'polite';\n        if (msg.severity.toLowerCase() !== 'custom' && msg.severity.toLowerCase() !== 'success') {\n            type = 'assertive';\n        }\n\n        this.renderer.setStyle(document.querySelector('p-toast, p-growl'), 'aria-live', type);\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from  '@angular/core';\nimport { CommonModule } from  '@angular/common';\nimport { AccessbilityService } from './accessibility.service';\n\n/**\n * AccessbilityModule expõe o serviço AccessbilityService para o uso de outras aplicações\n * @module\n */\n@NgModule({\n    imports: [CommonModule],\n    providers: [AccessbilityService],\n    exports: []\n})\nexport class AccessbilityModule {\n}\n","import { Injectable } from '@angular/core';\n\n/**\n *\n * Class CommonMaskService serviço para inserção de mascara de data em campos input\n * @class \n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommonMaskService {\n\n    /**\n     * DATE_SEPARATOR property\n     * @type {string}\n     */\n    private readonly DATE_SEPARATOR = '/';\n\n    /**\n     * Metodo para formatar valor digitado no padrão dd/mm/yyyy\n     * @param $event\n     * @returns void\n     */\n    dateMask($event) {\n        if ($event.target.value) {\n            let date = $event.target.value.replace(/[^0-9]/g, '').substr(0, 8);\n            \n            if (date.length >= 3) {\n              date = date.replace(/^(\\d{2})(\\d{1,2})/, '$1' + this.DATE_SEPARATOR + '$2');\n            }\n            \n            if (date.length >= 6) {\n              date = date.replace(/^(\\S{5})(\\d{1,4})/, '$1' + this.DATE_SEPARATOR + '$2');\n            }\n\n            $event.target.value = date;\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonMaskService } from './common-mask.service';\n/**\n * CommonMaskModule expõe o servico CommonMaskService para o uso de outras aplicações\n * @class\n */\n@NgModule({\n    imports: [],\n    declarations: [],\n    providers: [\n        CommonMaskService\n    ],\n    exports: []\n})\nexport class CommonMaskModule {\n}\n","import { ErrorHandler, Inject, Injectable } from '@angular/core';\nimport { ErrorProvider } from './providers/error.provider';\n\n/**\n * Class ErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorService extends ErrorHandler {\n\n    /**\n     * Metodo construtor responável por injetar o serviço ErrorProvider\n     * @param {ErrorProvider} providers\n     */\n    constructor(@Inject(ErrorProvider) private providers: ErrorProvider[]) {\n        super();\n    }\n\n    /**\n     * Metodo responsável por idetificar e obter os erros lançados de requisições http/https\n     * @param {Error} error\n     * @returns void\n     */\n    handleError(error: Error) {\n        try {\n            this.providers.forEach(p => {\n                if (p.shouldHandle(error)) {\n                    p.handle(error);\n                }\n            });\n        } catch (e) {\n        }\n        super.handleError(error);\n    }\n}\n","import { ApplicationProblemType } from '../types/application-problem.type';\n\n/**\n * Abstract provider NotificationProvider\n * @abstract\n * @class\n */\nexport abstract class NotificationProvider {\n\n    /**\n     * Metodo para adicionar menssagem de erro\n     * @param {string} message\n     * @param {string} title\n     * @returns void\n     */\n    abstract addErrorMessage(message: string, title?: string): void;\n\n    /**\n     * Metodo para adição de erros\n     * @param {ApplicationProblemType} problem\n     * @returns void\n     */\n    abstract addErrorProblem(problem: ApplicationProblemType): void;\n\n}\n","/**\n * Classe modelo ApplicationProblemType\n * @class\n */\nexport class ApplicationProblemType {\n\n    /**\n     * constructor method\n     * @param {string} type\n     * @param {string} title\n     * @param {string} detail\n     * @param {Number} status\n     * @param {string} instance\n     * @param {Array<string>} stacktrace\n     * @param {ApplicationProblemType} cause\n     * @constructor\n     */\n    constructor(\n        public type: string | 'about:blank',\n        public title: string,\n        public detail?: string,\n        public status?: Number,\n        public instance?: string,\n        public stacktrace?: Array<string>,\n        public cause?: ApplicationProblemType) {\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NotificationProvider } from '../providers/notification.provider';\nimport { ApplicationProblemType } from '../types/application-problem.type';\nimport { ErrorProvider } from '../providers/error.provider';\n\n/**\n * Serviço HttpApplicationProblemErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class HttpApplicationProblemErrorService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsável por injetar serviço NotificationProvider\n     * @param {NotificationProvider} notification\n     * @constructor\n     */\n    constructor(private notification: NotificationProvider, private ngZone: NgZone) { }\n\n    /**\n     * Metodo responsável pela identificação de erros\n     * @public \n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && \n            error.headers.get('Content-Type') === 'application/problem+json' && \n            error.error;\n    }\n\n    /**\n     * Metodo pela adição de erros\n     * @public \n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        this.ngZone.run(() => { \n            this.notification.addErrorProblem(\n                new ApplicationProblemType(\n                    error.error.type,\n                    error.error.title,\n                    error.error.detail,\n                    error.error.status,\n                    error.error.instance));\n        });\n    }\n}","\n/**\n * Classe modelo HttpGenericErrorType\n * @class\n */\nexport class HttpGenericErrorType {\n\n    /**\n     * constructor method\n     * @param {Number} code\n     * @param {string} title\n     * @param {string} detail\n     * @constructor\n     */\n    constructor(\n        public code: Number,\n        public title: string,\n        public detail: string) {\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NotificationProvider } from '../providers/notification.provider';\nimport { HttpGenericErrorType } from '../types/http-generic-error.type';\nimport { ErrorProvider } from '../providers/error.provider';\n\n/**\n * Serviço HttpGenericErrorService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class HttpGenericErrorService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsávelpor injetar o serviço NotificationProvider\n     * @param {NotificationProvider} notification\n     * @constructor\n     */\n    constructor(private notification: NotificationProvider, private ngZone: NgZone) { }\n\n    /**\n     * Metodo responsável pela identificação de erros\n     * @public\n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse && \n            !(error.headers.get('Content-Type') === 'application/problem+json' && \n            error.error);\n    }\n\n    /**\n     * Metodo pela adição de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        const generic = this.getErrorByCode(error);\n        this.ngZone.run(() => { \n            this.notification.addErrorMessage(generic.detail, generic.title);\n        });\n    }\n\n    /**\n     * Metodo para obter erros a partir de um código\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns HttpGenericErrorType\n     */\n    public getErrorByCode(error: HttpErrorResponse): HttpGenericErrorType {\n        const generic = GENERIC_ERRORS[error.status];\n\n        if (generic === undefined) {\n            return new HttpGenericErrorType(\n                error.status,\n                error.statusText,\n                error.message\n            );\n        }\n\n        return generic;\n    }\n\n}\n/**\n * Constante que define tipos de erros básicos\n * @const GENERIC_ERRORS\n */\nexport const GENERIC_ERRORS = {\n    401: new HttpGenericErrorType(401,\n        'Não Autenticado',\n        'Essa requisição requer um usuário autenticado.'),\n\n    403: new HttpGenericErrorType(403,\n        'Proibido',\n        'Essa requisição requer uma permissão no servidor da aplicação que o usuário não possui.'),\n\n    404: new HttpGenericErrorType(404,\n        'Não encontrado',\n        'Essa requisição não pode ser encontrada.'),\n\n    500: new HttpGenericErrorType(500,\n        'Erro desconhecido',\n        'O servidor encontrou uma condição inesperada.'),\n\n    502: new HttpGenericErrorType(502,\n        'Bad Gateway',\n        'O servidor recebeu uma resposta inválida de um serviço que utilizou para cumprir a requisição'),\n\n    503: new HttpGenericErrorType(503,\n        'Serviço Indisponível',\n        'O servidor não pode atender a requisição nesse momento. Esta é uma condição temporária, tente novamente mais tarde'),\n\n    504: new HttpGenericErrorType(504,\n        'Gateway Timeout',\n        'O servidor não conseguiu receber uma resposta a tempo esperado por um serviço que utilizou para cumprir a requisição')\n};\n","import { ErrorHandler, NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ErrorService } from './error.service';\nimport { ErrorProvider } from './providers/error.provider';\nimport { HttpApplicationProblemErrorService } from './services/http-application-problem-error.service';\nimport { HttpGenericErrorService } from './services/http-generic-error.service';\n\n/**\n * O modulo ErrorModule contem funcionalidades para a captura e apresentação dos erros que possam ocorrer na aplicação.\n * @module\n */\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        {\n            provide: ErrorProvider,\n            useClass: HttpGenericErrorService,\n            multi: true\n        },\n        {\n            provide: ErrorProvider,\n            useClass: HttpApplicationProblemErrorService,\n            multi: true\n        },\n        {\n            provide: ErrorHandler,\n            useClass: ErrorService,\n        },\n    ]\n})\nexport class ErrorModule {\n}\n","import { ApplicationProblemType } from '../types/application-problem.type';\nimport { NotificationProvider}  from '../providers/notification.provider';\nimport { Injectable } from '@angular/core';\n\n/**\n * Class NotificationService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NotificationService extends NotificationProvider {\n\n    /**\n     * Metodo responsável po adicionar mensagem de erro\n     * @param {string} message\n     * @param {string} title\n     * @returns void\n     */\n    addErrorMessage(message: string, title?: string): void {\n        console.error(title + ' ' + message);\n    }\n\n    /**\n     * Metodo responsável por adicionar o detalhamento do erro no console\n     * @param {ApplicationProblemType} problem\n     * @returns void\n     */\n    addErrorProblem(problem: ApplicationProblemType): void {\n        console.error(problem.title + ' ' + problem.detail);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { NamedErrorType } from '../types/named-error.type';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { HttpGenericErrorService } from '../services/http-generic-error.service';\n\n/**\n * Serviço de erros ErrorStackService\n * @class \n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorStackService {\n\n    /**\n     * Propriedade errors\n     * @type {ReplaySubject<NamedErrorType>}\n     */\n    errors: ReplaySubject<NamedErrorType> = new ReplaySubject<NamedErrorType>();\n\n    /**\n     * metodo construtor injeta serviço generico de erros\n     * @param {HttpGenericErrorService} genericErrorService\n     * @constructor\n     */\n    constructor(private genericErrorService: HttpGenericErrorService) {\n        if (null === localStorage.getItem('errorStack')) {\n            localStorage.setItem('errorStack', JSON.stringify([]));\n        }\n\n        this.getErrorsSubjects().forEach((error: NamedErrorType) => {\n            this.errors.next(error);\n        });\n    }\n\n    /**\n     * Metodo responsável por criar erro do tipo HttpResponse\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    create(error: HttpErrorResponse) {\n        const namedError = this.createNamedError(error);\n\n        const persistedErrors: NamedErrorType[] = this.getErrorsSubjects();\n\n        if (persistedErrors.length >= 15) {\n            persistedErrors.shift();\n        }\n\n        persistedErrors.push(namedError);\n\n        localStorage.setItem('errorStack', JSON.stringify(persistedErrors));\n\n        this.errors.next(namedError);\n    }\n\n    /**\n     * Metodo responsável por obter o conteúdo dos erros emitidos\n     * @private\n     * @returns NamedErrorType[]\n     */\n    private getErrorsSubjects(): NamedErrorType[] {\n        return JSON.parse(localStorage.getItem('errorStack'));\n    }\n\n    /**\n     * Metodo responsável por itentifica o tipo de erro lançado\n     * @private\n     * @param {HttpErrorResponse} error\n     * @returns NamedErrorType\n     */\n    private createNamedError(error: HttpErrorResponse): NamedErrorType {\n        let fullMessage: string;\n        let namedError: NamedErrorType;\n        let createdAt: Date = new Date();\n        let errorId = this.getErrorId(error);\n        let title: string | null;\n\n        if (error.headers.get('Content-Type') === 'application/problem+json') {\n            fullMessage = `X-Correlation-ID: ${errorId}\n                           createdAt: ${createdAt}\n                           status: ${error.status}\n                           url: ${error.url}\n                           body: ${error.error.detail}\n                           stacktrace: ${error.error.stacktrace}\n                           cause: ${error.error.cause}`;\n\n            title = error.error.title;\n\n        } else {\n            const genericError = this.genericErrorService.getErrorByCode(error);\n\n            fullMessage = `X-Correlation-ID: ${errorId}\n                           createdAt: ${createdAt}\n                           status: ${error.status}\n                           url: ${error.url}\n                           body: ${genericError.detail}`;\n\n            title = genericError.title;\n        }\n\n        namedError = {\n            message: title,\n            createdAt: createdAt,\n            correlationId: errorId,\n            fullMessage: fullMessage\n        };\n\n        return namedError;\n    }\n\n    /**\n     * Metodo responsável por obter o identificador do erro\n     * @private \n     * @param {HttpErrorResponse} error\n     * @returns string\n     */\n    private getErrorId(error: HttpErrorResponse): string {\n        let errorKey: string | null;\n\n        error.headers.keys().every(key => {\n            if (key.toUpperCase() === 'X-CORRELATION-ID') {\n                errorKey = key;\n                return false;\n            }\n            return true;\n        });\n\n        return errorKey ? error.headers.get(errorKey) : null;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ErrorProvider } from '../providers/error.provider';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorStackService } from './error-stack.service';\n\n/**\n * Class ErrorStackProviderService\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ErrorStackProviderService implements ErrorProvider {\n\n    /**\n     * Metodo construtor responsável por injetar o serviso de erros\n     * @param {ErrorStackService} errorStackService\n     */\n    constructor(private errorStackService: ErrorStackService) {}\n\n    /**\n     * Metodo responsável pela identificação de erros\n     * @param {Error} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error): Boolean {\n        return error instanceof HttpErrorResponse;\n    }\n\n    /**\n     * Metodo pela adição de erros\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse) {\n        this.errorStackService.create(error);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CEP para valores.\n * \n * Usage:\n * {{ value | cep }}\n*/\n\n@Pipe({\n  name: 'cep'\n})\n\nexport class CepPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if ( value === null) {\n      return '-';\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 5) + '-' + value.substring(5, 8);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CPF para valores.\n * \n * Usage:\n * {{ value | cpf }}\n*/\n\n@Pipe({\n  name: 'cpf'\n})\n\nexport class CpfPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (value === null || value.length !== 11) {\n      return value;\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 3) + '.' +\n      value.substring(3, 6) + '.' +\n      value.substring(6, 9) + '-' +\n      value.substring(9, 11);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE de CNPJ para valores.\n * \n * Usage:\n * {{ value | cnpj }}\n*/\n\n@Pipe({\n  name: 'cnpj'\n})\n\nexport class CnpjPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (value === null || value.length !== 14) {\n      return value;\n    } else {\n      value = value.replace(/[^0-9A-Za-z]/g, '');\n      return  value.substring(0, 2) + '.' +\n      value.substring(2, 5) + '.' +\n      value.substring(5, 8) + '/' +\n      value.substring(8, 12) + '-' +\n      value.substring(12, 14);\n    }\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n *\n * Cria PIPE de valores com regra definida em expressão regex\n * Usage:\n * {{ value | regex:arg1:arg2 }}\n*/\n\n@Pipe({\n    name: 'regex'\n})\n\nexport class RegexPipe implements PipeTransform {\n\n    transform(value: any, regex: any, regexPrint: any): any {\n        return value.replace(regex, regexPrint);\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n *\n * Cria PIPE para valores com restrição de valores a serem apresentados.\n * \n * Usage:\n * {{ value | limit:20 }}\n * {{ value | limit:20:\"...\" }}\n*/\n\n@Pipe({\n    name: 'limit'\n})\n\nexport class LimitPipe implements PipeTransform {\n\n    transform(value: string, limit = 25, ellipsis = '...') {\n        return value.length > limit\n            ? `${value.substr(0, limit)}${ellipsis}`\n            : value;\n    }\n}\n","\nimport { NgModule } from '@angular/core';\nimport { CpfPipe } from './cpf.pipe';\nimport { CepPipe } from './cep.pipe';\nimport { CnpjPipe } from './cnpj.pipe';\nimport { RegexPipe } from './pipe.regex';\nimport { LimitPipe } from './pipe.limit';\n\n/**\n *\n *  Export do módulo\n */\n@NgModule({\n    imports: [],\n    declarations: [\n        CepPipe,\n        CpfPipe,\n        CnpjPipe,\n        RegexPipe,\n        LimitPipe,\n    ],\n    exports: [\n        CepPipe,\n        CpfPipe,\n        CnpjPipe,\n        RegexPipe,\n        LimitPipe,\n    ]\n})\nexport class PipeModule {}\n","import { Injectable } from '@angular/core';\n\n/**\n * Fornece metodo para copia de textos\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClipboardService {\n\n    /**\n     * Inspirado no clipboard.js, copia texto selecionado para área de trasferência\n     * @param {string} text\n     * @returns void\n     * @public\n     */\n    copy(text: string) {\n        const isRTL: boolean = document.documentElement.getAttribute('dir') === 'rtl';\n\n        // cria um elemento temporário, seta o foco, copia e remove em seguida\n        let fake: HTMLTextAreaElement = document.createElement('textarea');\n        fake.style.fontSize = '12pt';\n        fake.style.border = '0';\n        fake.style.padding = '0';\n        fake.style.margin = '0';\n        fake.style.position = 'absolute';\n        fake.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        let yPosition: number = window.pageYOffset || document.documentElement.scrollTop;\n\n        fake.style.top = `${yPosition}px`;\n        fake.setAttribute('readonly', '');\n        fake.value = text;\n\n        document.body.appendChild(fake);\n\n        fake.select();\n\n        document.execCommand('copy');\n        document.body.removeChild(fake);\n    }\n}\n","import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\nimport { ClipboardService } from './clipboard.service';\n\n@Directive({\n    selector: '[clipboard]'\n})\n/**\n * Diretiva que expõe seletor para o uso do clipbord\n * @class\n */\nexport class ClipboardDirective {\n\n    /**\n     * clipboard variable\n     * @type {string}\n     */\n    @Input()\n    clipboard: string;\n\n    /**\n     * onClipboard variable\n     * @type {EventEmitter<boolean>}\n     */\n    @Output()\n    onClipboard: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     * constructor method\n     * @param {ClipboardService} service\n     * @constructor\n     */\n    constructor(private service: ClipboardService) {}\n\n    @HostListener('click')\n    /**\n     * copy method\n     * @event click\n     * @returns void\n     */\n    copy() {\n        try {\n            this.service.copy(this.clipboard);\n            this.onClipboard.emit(true);\n        } catch (e) {\n            this.onClipboard.emit(false);\n            throw e;\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ClipboardDirective } from './clipboard.directive';\nimport { ClipboardService } from './clipboard.service';\n\n/**\n * ClipboardModule expõe o servico ClipboardService para o uso de outras aplicações\n * @module\n */\n@NgModule({\n  imports: [],\n  declarations: [\n    ClipboardDirective,\n  ],\n  providers: [\n    ClipboardService\n  ],\n  exports: [\n    ClipboardDirective,\n  ]\n})\nexport class ClipboardModule {\n}\n","import { Directive, ElementRef, OnInit, Input, OnDestroy } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n/**\n *\n * UnmaskDirective diretiva para remoção de mascaras de valores numericos\n * @class\n */\n@Directive({\n    selector: '[unmask]'\n})\nexport class UnmaskDirective implements OnInit, OnDestroy {\n\n    /**\n     * Propriedade a para realizar a formatação expressão regular\n     * @type {string} appUnmask\n     */\n    @Input() appUnmask: string;\n\n    /**\n     * Cria canal de escuta para a diretiva\n     * @type {Subscription} subscriber\n     */\n    private subscriber;\n\n    /**\n     * constructor method\n     * @param {ElementRef} elementRef\n     * @param {NgControl} model\n     * @constructor\n     */\n    constructor(private elementRef: ElementRef, private model: NgControl) { }\n\n    /**\n     * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular\n     * @returns void\n     */\n    ngOnInit(): void {\n        this.subscriber = this.model.control.valueChanges.subscribe(\n            () => {\n                const newValue = this.elementRef.nativeElement.value.replace(new RegExp(this.appUnmask), '');\n                this.model.control.setValue(\n                    newValue,\n                    {\n                        emitEvent: false,\n                        emitModelToViewChange: false,\n                        emitViewToModelChange: false\n                    }\n                );\n            }\n        );\n    }\n\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy() {\n        this.subscriber.unsubscribe();\n    }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n/**\n * OnlyNumbersDirective diretiva para que sejam permitidos somente números\n * @class\n */\n@Directive({\n    selector: 'input[onlyNumbers]'\n})\nexport class OnlyNumbersDirective {\n\n    /**\n     * Propriedade que carrega expressão regular para numeros\n     * @type {RegExp}\n     */\n    private regex: RegExp = new RegExp(/[^0-9]$/g);\n\n    /**\n     * Propriedade que lista opções aceitas além de núsmeros\n     * @type {Array<string>}\n     */\n    private specialKeys: Array<string> = [\n        'Backspace',\n        'Delete',\n        'Tab',\n        'End',\n        'Home',\n        'ArrowLeft',\n        'ArrowRight'\n    ];\n\n    /**\n     * @param {ElementRef} el\n     * @constructor\n     */\n    constructor(private el: ElementRef) { }\n\n    /**\n     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado\n     * @param {KeyboardEvent} event\n     * @returns void\n     */\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n\n        const current: string = this.el.nativeElement.value;\n        const next: string = current.concat(event.key);\n\n        if (this.specialKeys.indexOf(event.key) !== -1) {\n            return;\n        }\n\n        if (next && String(next).match(this.regex)) {\n            event.preventDefault();\n        }\n    }\n\n}\n","import { UnmaskDirective } from './unmask.directive';\nimport { OnlyNumbersDirective } from './only-numbers.directive';\nimport { NgModule } from '@angular/core';\n\n/**\n * DIRECTIVES constant\n * @constant\n */\nconst DIRECTIVES = [\n    OnlyNumbersDirective,\n    UnmaskDirective\n];\n\n/**\n * Expõe directivas para reuso em outras palicações\n * @module\n */\n@NgModule({\n    declarations: DIRECTIVES,\n    exports: DIRECTIVES\n})\nexport class DirectivesModule {}\n","\nenum FormNotificationType { CLEAN, FIELD }\n\n/**\n * Class modelo para validação de formulários\n * @class\n */\nclass FormNotification {\n\n    /**\n     * Metodo construtor para validação de formulários\n     * @param {string} form\n     * @param {FormNotificationType} type\n     */\n    constructor(\n        public form: string, \n        public type: FormNotificationType) {\n    }\n\n}\n\nexport { FormNotificationType, FormNotification }\n","import { FormNotification, FormNotificationType } from \"./form-notification.type\";\n\n/**\n * Class modelo para validação de campos de formulários\n * @class\n */\nexport class FieldFormNotification extends FormNotification {\n\n    /**\n     * Método construtor para validação de campos de formulários\n     * @param {string} form\n     * @param {string} field\n     * @param {string} message\n     */\n    constructor(\n        form: string,\n        public field: string,\n        public message: string) {\n        super(form, FormNotificationType.FIELD);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { FormNotification, FormNotificationType } from '../types/form-notification.type';\nimport { filter } from 'rxjs/operators';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n/**\n * Serviço ṕara tratar notificações em formulários\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationService {\n\n    /**\n     * @type {Subject<FormNotification>()}\n     */\n    formNotifications: Subject<FormNotification> =\n        new Subject<FormNotification>();\n\n    /**\n     * Método para criação de inscrição de campos presentes nos formulários\n     * @param {string} field\n     * @returns Observable<ResponseHandle>\n     */\n    notifications(form: String, field: String): Observable<FormNotification> {\n        return this.formNotifications.pipe(filter(\n            (violation: FormNotification) => {\n                return (!form || violation.form === form) && (violation.type === FormNotificationType.CLEAN || (\n                    violation instanceof FieldFormNotification &&\n                    violation.field === field))\n            }\n        ));\n    }\n\n    notify(notification: FormNotification) {\n        this.formNotifications.next(notification);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormNotificationService } from './form-notification.service';\nimport { ErrorProvider } from '../../error/providers/error.provider';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n/**\n * Provedor de error para criação de erros de notificação.\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationErrorProvider implements ErrorProvider {\n\n    /**\n     * Método construtor\n     * @param {FormtNotificationService} formNotificationService\n     * @constructor\n     */\n    constructor(private formNotificationService: FormNotificationService) { }\n\n    /**\n     * Método responsável pela identificação de erros\n     * @public\n     * @param {Error | HttpErrorResponse} error\n     * @returns Boolean\n     */\n    shouldHandle(error: Error | HttpErrorResponse): Boolean {\n        return error instanceof HttpErrorResponse &&\n            error.headers.get('Content-Type') === 'application/problem+json' &&\n            error.error && (error.error.violations || error.error.fieldErrors);\n    }\n\n    /**\n     * Método para emissão de erros\n     * @public\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    handle(error: HttpErrorResponse): void {\n        if (error.error.violations) {\n            this.violation(error.url, error.error.violations);\n        }\n        if (error.error.fieldErrors) {\n            this.violation(error.url, error.error.fieldErrors);\n        }\n    }\n\n    /**\n     * Método iteração de violações e emissão de erros\n     * @param values\n     */\n    violation(form: string, values: ({ field: string, message: string })[]) {\n        values.forEach(violation =>\n            this.formNotificationService.notify(\n                new FieldFormNotification(\n                    form, violation.field, violation.message)));\n    }\n\n}\n","import { FormNotification, FormNotificationType } from \"./form-notification.type\";\n\n/**\n * Class modelo para limpeza de validação de formulários\n * @class\n */\nexport class CleanFormNotification extends FormNotification {\n\n    /**\n     * Método construtor para limpeza de validação de formulários\n     * @param {string} form\n     */\n    constructor(form: string) {\n        super(form, FormNotificationType.CLEAN);\n    }\n\n}\n","import {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest\n} from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\n\nimport { FormNotificationService } from \"../services/form-notification.service\";\nimport { CleanFormNotification } from \"../types/clean-form-notification.type\";\n\n/**\n * Implementação de classe para interceptar e tratar requisições http/https\n * @class\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class FormNotificationInterceptor implements HttpInterceptor {\n\n    /**\n     * Método construtor\n     * @constructor\n     * @param {AbstractAuthentication} auth\n     */\n    constructor(private formNotificationService: FormNotificationService) {}\n\n    /**\n     * Método responsável por interceptar requisições HTTP/HTTPS\n     * @public\n     * @param {HttpRequest<any>} request\n     * @param {HttpHandler} next\n     * @returns Observable<HttpEvent<any>>\n     */\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        this.formNotificationService\n            .notify(new CleanFormNotification(request.url));\n        return next.handle(request);\n    }\n\n}\n","import { FormNotificationService } from '../services/form-notification.service';\nimport { Directive, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { FormNotification } from '../types/form-notification.type';\nimport { FieldFormNotification } from '../types/field-form-notification.type';\n\n@Directive({\n    selector: 'form-notification-component-superclass'\n})\nexport class FormNotificationComponentSuperclass implements OnInit, OnDestroy {\n\n    private subscription: Subscription;\n\n    @Input() name: String;\n\n    @Input() form: String;\n\n    message: String;\n\n    /**\n     * Método construtor responsável por carregar o serviço de validação\n     * @param formNotificationService\n     */\n    constructor(protected formNotificationService: FormNotificationService) {}\n\n    /**\n     * Método Inicial para subscrição no endpoint responsável por validar o formulário\n     */\n    ngOnInit(): void {\n        this.subscription = this.formNotificationService\n            .notifications(this.form, this.name)\n            .subscribe((notification: FormNotification) => {\n                if (notification instanceof FieldFormNotification) {\n                    this.message = notification.message;\n                } else {\n                    this.message = null;\n                }\n            });\n    }\n\n    /**\n     * Método responsável por realizar a saida das subscrições do endpont de validação\n     */\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FormNotificationErrorProvider } from './services/form-notification-error-provider.service';\nimport { FormNotificationService } from './services/form-notification.service';\nimport { ErrorProvider } from '../error/providers/error.provider';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormNotificationInterceptor } from './interceptor/form-notification.interceptor';\nimport { FormNotificationComponentSuperclass } from './components/form-notification-superclass.component';\n\n/**\n * Módulo para adicionar funcionalidade de notificação de erros de formulários.\n * @module\n */\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [ FormNotificationComponentSuperclass ],\n    exports: [ FormNotificationComponentSuperclass],\n    providers: [\n        FormNotificationService,\n        {\n            provide: ErrorProvider,\n            useClass: FormNotificationErrorProvider,\n            multi: true,\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: FormNotificationInterceptor,\n            multi: true,\n        },\n    ],\n})\nexport class FormNotificationBaseModule { }\n","import { ApplicationProblemType } from \"../../error/types/application-problem.type\";\nimport { FormNotification } from \"../types/form-notification.type\";\n\n/**\n * Class provider para definição básica de tratamento de erros de formulários\n * @class\n */\nexport class FormNotificationProvider extends ApplicationProblemType {\n\n    /**\n     * Metodo construtor para validação de formulários\n     * @param {string} type\n     * @param {string} title\n     * @param {string} detail\n     * @param {Number} status\n     * @param {string} instance\n     * @param {Array<string>} stacktrace\n     * @param {ApplicationProblemType} cause\n     * @param {FormViolation} violations\n     */\n    constructor(\n        type: string | 'about:blank',\n        title: string,\n        detail?: string,\n        status?: Number,\n        instance?: string,\n        stacktrace?: Array<string>,\n        cause?: ApplicationProblemType,\n        public violations?: FormNotification[]) {\n        super(type, title, detail, status, instance, stacktrace, cause);\n    }\n\n}\n","import { Injectable, OnDestroy } from \"@angular/core\";\nimport { Observable, Subject, Subscription, Unsubscribable } from \"rxjs\";\n\n/**\n * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.\n *\n * ```ts\n * @Injectable()\n * // or @Component() (also consider DirectiveSuperclass)\n * // or @Directive() (also consider DirectiveSuperclass)\n * // or @Pipe()\n * class MyThing extends InjectableSuperclass {\n *   constructor(somethingObservable: Observable) {\n *     super();\n *     this.subscribeTo(somethingObservable);\n *   }\n *\n *   ngOnDestroy() {\n *     // if you override ngOnDestroy, be sure to call this too\n *     super.ngOnDestroy();\n *   }\n * }\n * ```\n */\n@Injectable()\nexport abstract class InjectableSuperclass implements Unsubscribable, OnDestroy {\n\n    private subscriptions = new Subscription();\n\n    destruction$: Observable<undefined>;\n\n    private destructionSubject = new Subject<undefined>();\n\n    constructor() {\n        this.destruction$ = this.destructionSubject.asObservable();\n    }\n\n    subscribeTo<T>(\n        observable: Observable<T>,\n        next?: (value: T) => void,\n        error?: (error: any) => void,\n        complete?: () => void,\n    ) {\n        this.subscriptions.add(\n            observable.subscribe(\n                this.bind(next),\n                this.bind(error),\n                this.bind(complete),\n            ),\n        );\n    }\n\n    unsubscribe() {\n        this.subscriptions.unsubscribe();\n        this.subscriptions = new Subscription();\n    }\n\n    private bind(fn?: (val?: any) => void) {\n        return fn?.bind(this);\n    }\n\n    ngOnDestroy() {\n        this.unsubscribe();\n        this.destructionSubject.next();\n        this.destructionSubject.complete();\n    }\n}\n","import { ChangeDetectorRef, Injector, SimpleChanges, Directive } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { filter, map, startWith } from \"rxjs/operators\";\nimport { InjectableSuperclass } from \"./injectable-superclass\";\n\n/**\n * Extend this when creating a directive (including a component, which is a kind of directive) to gain access to the helpers demonstrated below. **Warning:** You _must_ include a constructor in your subclass.\n *\n * ```ts\n * @Component({\n *   selector: \"s-color-text\",\n *   template: `\n *     <span [style.background]=\"color\">{{ color }}</span>\n *   `,\n *   // note that `bindToInstance()` works even with OnPush change detection\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n * })\n *  class ColorTextComponent extends DirectiveSuperclass {\n *   @Input() prefix?: string;\n *   @Input() prefix2?: string;\n *   color!: string;\n *\n *   // Even if you don't need extra arguments injector, you must still include a constructor. It is required for angular to provide `Injector`.\n *   constructor(\n *     @Inject(\"color$\") color$: Observable<string>,\n *     injector: Injector,\n *   ) {\n *     super(injector);\n *\n *     // combine everything to calculate `color` and keep it up to date\n *     this.bindToInstance(\n *       \"color\",\n *       combineLatest(\n *         this.getInput$(\"prefix\"),\n *         this.getInput$(\"prefix2\"),\n *         color$,\n *       ).pipe(map((parts) => parts.filter((p) => p).join(\"\"))),\n *     );\n *   }\n * }\n * ```\n */\n@Directive()\nexport abstract class DirectiveSuperclass extends InjectableSuperclass {\n\n    /**\n     *  Emits the set of `@Input()` property names that change during each call to `ngOnChanges()`.\n     */\n    inputChanges$ = new Subject<any>();\n\n    protected changeDetectorRef: ChangeDetectorRef;\n\n    constructor(injector: Injector) {\n        super();\n        this.changeDetectorRef = injector.get(ChangeDetectorRef);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.inputChanges$.next(\n            new Set(Object.getOwnPropertyNames(changes) as Array<keyof this>),\n        );\n    }\n\n    /**\n     * @return an observable of the values for one of this directive's `@Input()` properties\n     */\n    getInput$<K extends keyof this>(key: K): Observable<this[K]> {\n        return this.inputChanges$.pipe(\n            filter((keys) => keys.has(key)),\n            startWith(undefined),\n            map(() => this[key]),\n        );\n    }\n\n    /**\n     * Binds an observable to one of this directive's instance variables. When the observable emits the instance variable will be updated, and change detection will be triggered to propagate any changes. Use this an an alternative to repeating `| async` multiple times in your template.\n     */\n    bindToInstance<K extends keyof this>(key: K, value$: Observable<this[K]>) {\n        this.subscribeTo(value$, (value) => {\n            this[key] = value;\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n}\n","import { Type, Directive } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { DirectiveSuperclass } from \"./directive-superclass\";\n\nexport function noop() { };\n\n/**\n * Use in the `providers` of a component that implements `ControlValueAccessor` to reduce some boilerplate.\n *\n * ```ts\n * @Component({ providers: [provideValueAccessor(MyFormControl)] }\n * class MyFormControl extends BaseFormControl {\n *   // ...\n * }\n * ```\n */\nexport function provideValueAccessor(type: Type<any>) {\n    return {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: type,\n        multi: true,\n    };\n}\n\n/**\n * Extend this when creating a form control to reduce some boilerplate. **Warning:** You _must_ include a constructor in your subclass.\n *\n * This example allows 2-way binding to a number via `[(ngModel)]`, `[formControl]`, or any other technique that leverages the `ControlValueAccessor` interface.\n * ```ts\n * @Component({\n *   template: `\n *     <button (click)=\"increment()\" [disabled]=\"isDisabled\">{{ counter }}</button>\n *   `,\n *   providers: [provideValueAccessor(CounterComponent)],\n * })\n * class CounterComponent extends FormControlSuperclass<number> {\n *   counter = 0;\n *\n *   // This looks unnecessary, but is required for Angular to provide `Injector`\n *   constructor(injector: Injector) {\n *     super(injector);\n *   }\n *\n *   handleIncomingValue(value: number) {\n *     this.counter = value;\n *   }\n *\n *   increment() {\n *     this.emitOutgoingValue(++this.counter);\n *     this.onTouched();\n *   }\n * }\n * ```\n */\n@Directive()\nexport abstract class FormControlSuperclass<T> extends DirectiveSuperclass\n    implements ControlValueAccessor {\n    /** Call this to emit a new value when it changes. */\n    emitOutgoingValue: (value: T) => void = noop;\n\n    /** Call this to \"commit\" a change, traditionally done e.g. on blur. */\n    onTouched = noop;\n\n    /** You can bind to this in your template as needed. */\n    isDisabled = false;\n\n    /** Implement this to handle a new value coming in from outside. */\n    abstract handleIncomingValue(value: T): void;\n\n    /** Called as angular propagates value changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    writeValue(value: T) {\n        this.handleIncomingValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n    registerOnChange(fn: (value: T) => void) {\n        this.emitOutgoingValue = fn;\n    }\n\n    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */\n    registerOnTouched(fn: VoidFunction) {\n        this.onTouched = fn;\n    }\n\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    setDisabledState(isDisabled: boolean) {\n        this.isDisabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { Injector, Directive } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { FormControlSuperclass } from \"./form-control-superclass\";\n\n@Directive()\nexport abstract class WrappedFormControlSuperclass<OuterType, InnerType = OuterType> extends FormControlSuperclass<OuterType> {\n\n    formControl = new FormControl();\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.subscribeTo(this.formControl.valueChanges, (value) => {\n            this.emitOutgoingValue(this.innerToOuter(value));\n        });\n        this.formControl.markAsTouched = () => {\n            this.onTouched();\n        };\n    }\n\n    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    handleIncomingValue(value: OuterType) {\n        this.formControl.setValue(this.outerToInner(value), { emitEvent: false });\n    }\n\n    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */\n    setDisabledState(isDisabled: boolean) {\n        if (isDisabled) {\n            this.formControl.disable({ emitEvent: false });\n        } else {\n            this.formControl.enable({ emitEvent: false });\n        }\n        super.setDisabledState(this.isDisabled);\n    }\n\n    /** Override this to modify a value coming from the outside to the format needed within this component. */\n    protected outerToInner(value: OuterType): InnerType {\n        return (value as any) as InnerType;\n    }\n\n    /** Override this to modify a value coming from within this component to the format expected on the outside. */\n    protected innerToOuter(value: InnerType): OuterType {\n        return (value as any) as OuterType;\n    }\n}\n","/*\n * Public API Surface of angular-base\n */\n\nexport * from './lib/block-ui/block-ui.interceptor';\nexport * from './lib/block-ui/block-ui.service';\nexport * from './lib/block-ui/block-ui.status';\n\nexport * from './lib/version-tag/version-tag.component';\nexport * from './lib/version-tag/version-tag.module';\n\nexport * from './lib/security/security.module';\nexport * from './lib/security/config/auth-config';\nexport * from './lib/security/authentication/authorization/authorization.service';\nexport * from './lib/security/authentication/authorization/authorization';\nexport * from './lib/security/authentication/authorization/has-role.directive';\nexport * from './lib/security/authentication/auth.guard';\nexport * from './lib/security/authentication/authentication.service';\nexport * from './lib/security/authentication/authentication';\nexport * from './lib/security/authentication/login-success.component';\nexport * from './lib/security/authentication/logout.directive';\nexport * from './lib/security/authentication/not-authenticated-error-provider.service';\nexport * from './lib/security/authentication/user.directive';\nexport * from './lib/security/authentication/user';\nexport * from './lib/security/authentication/hide-while-login.component';\nexport * from './lib/security/authentication/security.bootstrap';\nexport * from './lib/security/token/jwt-auth.interceptor';\nexport * from './lib/security/token/jwt-token.service';\nexport * from './lib/security/token/token';\n\nexport * from './lib/accessibility/accessibility.module';\nexport * from './lib/accessibility/accessibility.service';\n\nexport * from './lib/common-mask/common-mask.module';\nexport * from './lib/common-mask/common-mask.service';\n\nexport * from './lib/error/error.module';\nexport * from './lib/error/error.service';\n\nexport * from './lib/error/providers/error.provider';\nexport * from './lib/error/providers/notification.provider';\n\nexport * from './lib/error/services/notification.service';\nexport * from './lib/error/services/http-generic-error.service';\nexport * from './lib/error/services/http-application-problem-error.service';\nexport * from './lib/error/services/error-stack.service';\nexport * from './lib/error/services/error-stack-provider.service';\n\nexport * from './lib/error/types/http-generic-error.type';\nexport * from './lib/error/types/application-problem.type';\nexport * from './lib/error/types/named-error.type';\n\nexport * from './lib/pipes/cep.pipe';\nexport * from './lib/pipes/cpf.pipe';\nexport * from './lib/pipes/cnpj.pipe';\nexport * from './lib/pipes/pipe.regex';\nexport * from './lib/pipes/pipe.limit';\nexport * from './lib/pipes/pipe.module';\n\nexport * from './lib/clipboard/clipboard.directive';\nexport * from './lib/clipboard/clipboard.service';\nexport * from './lib/clipboard/clipboard.module';\n\nexport * from './lib/directives/directives.module';\nexport * from './lib/directives/only-numbers.directive';\nexport * from './lib/directives/unmask.directive';\n\nexport * from './lib/form-notification/form-notification.module';\nexport * from './lib/form-notification/components/form-notification-superclass.component';\nexport * from './lib/form-notification/providers/form-notification.provider';\nexport * from './lib/form-notification/services/form-notification-error-provider.service';\nexport * from './lib/form-notification/services/form-notification.service';\nexport * from './lib/form-notification/types/field-form-notification.type';\nexport * from './lib/form-notification/types/clean-form-notification.type';\nexport * from './lib/form-notification/types/form-notification.type';\n\nexport * from './lib/form-utils/wrapped-form-control-superclass';\nexport * from \"./lib/form-utils/form-control-superclass\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {FormNotificationInterceptor as ɵc} from './lib/form-notification/interceptor/form-notification.interceptor';\nexport {DirectiveSuperclass as ɵd} from './lib/form-utils/directive-superclass';\nexport {InjectableSuperclass as ɵe} from './lib/form-utils/injectable-superclass';\nexport {VERSIONTAG_CONFIG as ɵb,VersionTagConfig as ɵa} from './lib/version-tag/version-tag.config';"],"names":["isAuthenticated","ia"],"mappings":";;;;;;;;AAIA;;;;MAOa,cAAc;;;;;IAoBvB;;;;;;QAbQ,YAAO,GAAG,IAAI,OAAO,EAAiB,CAAC;;;;;;QAO/C,iBAAY,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;KAM1B;;;;;IAMjB,IAAI;QACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAgB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KACtD;;;;;IAMD,IAAI;QACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAgB,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;KACvD;;;;YAvCJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;;ACHD;;;;MAOa,kBAAkB;;;;;;IAO3B,YAAoB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;KAAI;;;;;;;;IAS/C,SAAS,CAAC,GAAqB,EAAE,IAAiB;QAE9C,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACvB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CACxB,GAAG,CACC,CAAC,KAAqB;YAClB,IAAI,KAAK,YAAY,YAAY,EAAE;gBAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;aACvB;SACJ,EACD,CAAC,GAAQ;YACL,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACvB,CACJ,CACJ,CAAC;KACL;;;;;;;IAOO,UAAU,CAAC,MAAc;QAC7B,MAAM,gBAAgB,GAAG;YACrB,QAAQ;YACR,OAAO;YACP,MAAM;YACN,KAAK;SACR,CAAC;QAEF,OAAO,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KAClD;;;;YArDJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YARQ,cAAc;;;ACUvB;;;;MAIa,iBAAiB,GAAG,IAAI,cAAc,CAAmB,mBAAmB;;AChBzF;;;;MAQa,mBAAmB;IAG5B,YAA+C,MAAwB;QAAxB,WAAM,GAAN,MAAM,CAAkB;KAAK;;;;;IAoB5E,QAAQ;QACJ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;KACzC;;;YA7BJ,SAAS,SAAC;gBACP,QAAQ,EAAE,iBAAiB;gBAC3B,qFAA2C;aAC9C;;;4CAIgB,MAAM,SAAC,iBAAiB;;;uBAOpC,KAAK;;;ACfV;;;;;;MAkBa,gBAAgB;;;;;;;IAQzB,OAAO,OAAO,CAAC,MAAwB;QACnC,OAAO;YACH,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE;gBACP,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,EAAE;aACnD;SACJ,CAAC;KACL;;;YA3BJ,QAAQ,SAAC;gBACN,OAAO,EAAE;oBACL,YAAY;oBACZ,YAAY;iBACf;gBACD,YAAY,EAAE;oBACV,mBAAmB;iBACtB;gBACD,OAAO,EAAE;oBACL,mBAAmB;iBACtB;aACJ;;;ACpBD;;;;MAIsB,cAAc;;;MCFvB,eAAe;IAExB,YAAoB,qBAA2C;QAA3C,0BAAqB,GAArB,qBAAqB,CAAsB;KAAK;IAGpE,KAAK;QACD,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;KACvC;;;YARJ,SAAS,SAAC,EAAE,QAAQ,EAAE,UAAU,EAAE;;;YAH1B,cAAc;;;oBAQlB,YAAY,SAAC,OAAO;;;MCJZ,aAAa;IAKtB,YAAoB,EAAc,EAAU,qBAA2C;QAAnE,OAAE,GAAF,EAAE,CAAY;QAAU,0BAAqB,GAArB,qBAAqB,CAAsB;KAAK;IAE5F,QAAQ;QACJ,IAAI,IAAI,CAAC,qBAAqB,CAAC,eAAe,EAAE,EAAE;YAC9C,IAAI,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;YAChD,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;SAC9E;KACJ;;;YAbJ,SAAS,SAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE;;;YAJb,UAAU;YAErB,cAAc;;;mBAKlB,KAAK;;;ACHV;;;;;MASa,qBAAqB;IAEhC,YAAoB,qBAA2C;QAA3C,0BAAqB,GAArB,qBAAqB,CAAsB;KAAK;IAEpE,QAAQ;QACN,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;KACpC;;;YAVF,SAAS,SAAC;gBACP,QAAQ,EAAE,mBAAmB;gBAC7B,QAAQ,EAAE,EAAE;aACf;;;YAXQ,cAAc;;;ACAvB;;;;MAIsB,aAAa;;;ACCnC;;;;MAOa,gBAAgB;;;;;;;;IAWzB,YACY,WAA6B,EAC7B,aAA+B,EAC/B,aAA4B,EAC5B,cAAoC;QAHpC,gBAAW,GAAX,WAAW,CAAkB;QAC7B,kBAAa,GAAb,aAAa,CAAkB;QAC/B,kBAAa,GAAb,aAAa,CAAe;QAC5B,mBAAc,GAAd,cAAc,CAAsB;KAAK;;;;;IAMrD,IAAa,OAAO,CAAC,OAA0B;QAC3C,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,IAAI,OAAO,EAAE;YACT,IAAI,IAAI,CAAC,kBAAkB;gBAAE,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;YACnE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC,SAAS,CAAC;gBAC5E,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBACrC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;oBAC3B,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC3D;aACJ,CAAC,CAAC;SACN;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC3D;KACJ;IAED,WAAW;QACP,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;SACzC;KACJ;;;YA3CJ,SAAS,SAAE;gBACR,QAAQ,EAAE,WAAW;aACxB;;;YAZ0B,WAAW;YAAE,gBAAgB;YAC/C,aAAa;YACb,cAAc;;;sBAgClB,KAAK;;;AC5BV;;;;;;MAUa,uBAAuB;;;;;;;;IAoBhC,YACY,aAAyB,EACzB,IAA0B,EAC1B,cAA8B;QAF9B,kBAAa,GAAb,aAAa,CAAY;QACzB,SAAI,GAAJ,IAAI,CAAsB;QAC1B,mBAAc,GAAd,cAAc,CAAgB;;;;;QAhBnC,mBAAc,GAAW,EAAE,CAAC;QAI5B,iBAAY,GAAY,KAAK,CAAC;KAcpC;IAED,QAAQ;QACJ,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;KACpD;IAED,kBAAkB;QACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;YAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;SAC9B;KACJ;IAED,eAAe;QACX,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvE,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;aACvE;SACJ;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,SAAS,CAAC;YAClE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvE,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,SAAS,CAAC;aAC1E;YACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;SAC9B,CAAC,CAAC;KACN;;;;;IAMD,WAAW;QACP,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;KACzC;;;YA/DJ,SAAS,SAAC;gBACP,QAAQ,EAAE,oBAAoB;gBAC9B,+FAAgD;aACnD;;;YAfmB,UAAU;YAErB,cAAc;YAEd,cAAc;;;6BAkBlB,KAAK;;;ACoCV;;;;MAIa,WAAW,GAAG,IAAI,cAAc,CAAa,aAAa;;ACxDvE;;;;MAOa,oBAAqB,SAAQ,aAAa;;;;;;IAOnD,YAAoB,qBAA2C;QAC3D,KAAK,EAAE,CAAC;QADQ,0BAAqB,GAArB,qBAAqB,CAAsB;KAE9D;;;;;;;IAQD,OAAO,CAAC,IAAS;QACb,IAAI,IAAI,EAAE;YACN,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;YAClD,IAAI,IAAI,YAAY,KAAK,EAAE;gBACvB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAgB,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,SAAiB,KAAK,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;aAC1G;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAgB,KAAK,QAAQ,KAAK,IAAI,CAAC,CAAC;SACnE;QACD,OAAO,IAAI,CAAC;KACf;;;;YA7BJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YATQ,cAAc;;;SCMP,eAAe,CAAC,MAAkB;IAC9C,OAAO,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACpE,CAAC;AAAA,CAAC;SAEc,QAAQ,CAAC,MAAkB;IACvC,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC;IAAA,CAAC;AAC5C,CAAC;AAAA,CAAC;AAEF;;;;MAOa,qBAAsC,SAAQ,cAAiB;IAIxE,YAAyC,MAAkB,EAAU,IAAgB;QACjF,KAAK,EAAE,CAAC;QAD6B,WAAM,GAAN,MAAM,CAAY;QAAU,SAAI,GAAJ,IAAI,CAAY;QAFrF,uBAAkB,GAA0B,IAAI,eAAe,CAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;KAIrF;;;;;;IAOD,eAAe;QACX,OAAO,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACvC;;;;;;IAOD,QAAQ;QACJ,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACzB;;;;;;;IAQD,KAAK;QACD,IAAI,CAAC,cAAc,EAAE;aAChB,SAAS,CAAC,CAAC,IAAI;YACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACrC,CAAC,CAAC;KACV;;;;;;IAOD,MAAM;QACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAC7D,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KAChD;;;;;;IAOM,cAAc;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KACzE;IAEO,OAAO,CAAC,IAAO;QACnB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACnF;IAED,OAAO;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;KAChF;IAED,qBAAqB;QACjB,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;KACzE;;;;YAzEJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;4CAKgB,MAAM,SAAC,WAAW;YAtB1B,UAAU;;;ACCnB;;;;MAOa,6BAA6B;IAEtC,YAAoB,qBAA2C;QAA3C,0BAAqB,GAArB,qBAAqB,CAAsB;KAAK;;;;;;;IAQpE,YAAY,CAAC,KAAgC;QACzC,OAAO,KAAK,YAAY,iBAAiB,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC;KACpE;;;;;;;IAQD,MAAM,CAAC,KAAwB;QAC3B,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;KACzC;;;;YAzBJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YATQ,cAAc;;;ACJvB;;;;;MAKsB,aAAa;;;ACHnC;;;;MAIsB,KAAK;;;ACC3B;;;;MAOa,kBAAkB;;;;;;IAO3B,YAAoB,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;KAAI;;;;;;;;IASpC,SAAS,CAAC,OAAyB,EAAE,IAAiB;QAClD,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE;YACvB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;SAClD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;aACtB,IAAI,CACD,GAAG,CAAC,CAAC,KAAqB;YACtB,IAAI,KAAK,YAAY,YAAY,EAAE;gBAC/B,MAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACxE,IAAI,IAAI,KAAK,KAAK;oBAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aACpD;YACD,OAAO,KAAK,CAAC;SAChB,CAAC,CACL,CAAC;KACT;;;;YAjCJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YARQ,KAAK;;;ACAd;;;;MAOa,eAAgB,SAAQ,KAAK;;;;;;IAmBtC,YAAyC,MAAkB;QACvD,KAAK,EAAE,CAAC;QAD6B,WAAM,GAAN,MAAM,CAAY;KAE1D;;;;;;;IAOD,uBAAuB,CAAC,OAAoB;QACxC,OAAO,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;KACrD;;;;;;;IAQD,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CACvB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,KAAK,CAAC,QAAQ,EAAE,CACnB,CAAC;KACL;;;;;;;IAQD,gBAAgB,CAAC,OAAyB;QACtC,MAAM,GAAG,GAAqB,OAAO,CAAC,KAAK,CAAC;YACxC,OAAO,EAAE,IAAI,WAAW,CAAC;gBACrB,CAAC,eAAe,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;aAC9F,CAAC;SACL,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;;;;;;IAOD,QAAQ;QACJ,OAAO,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;KAC9E;;AAjED;;;;AAIuB,4BAAY,GAAG,QAAQ,CAAC;AAE/C;;;;AAIuB,6BAAa,GAAG,eAAe,CAAC;;;YAf1D,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;4CAoBgB,MAAM,SAAC,WAAW;;;ACVnC;;;;;MAiCa,cAAc;;;;;;;IAQvB,OAAO,OAAO,CAAC,MAAkB;QAC7B,OAAO;YACH,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE;gBACP,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE;gBAC1C,MAAM,CAAC,iBAAiB;oBACtB;wBACE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE;wBAC7C,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,KAAK,EAAE,IAAI,EAAE;qBAC1E,GAAG,EAAE;aACX;SACJ,CAAC;KACL;;;YAhDJ,QAAQ,SAAC;gBACN,OAAO,EAAE;oBACL,YAAY;oBACZ,YAAY;oBACZ,gBAAgB;iBACnB;gBACD,YAAY,EAAE;oBACV,eAAe;oBACf,aAAa;oBACb,qBAAqB;oBACrB,gBAAgB;oBAChB,uBAAuB;iBAC1B;gBACD,SAAS,EAAE;oBACP,oBAAoB;oBACpB,qBAAqB;oBACrB,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,6BAA6B,EAAE,KAAK,EAAE,IAAI,EAAE;oBAChF,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,oBAAoB,EAAE;oBAC1D,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,qBAAqB,EAAE;iBAC/D;gBACD,OAAO,EAAE;oBACL,eAAe;oBACf,aAAa;oBACb,qBAAqB;oBACrB,gBAAgB;oBAChB,uBAAuB;iBAC1B;aACJ;;;AChDD;;;;;MAQa,SAAS;;;;;;IAOlB,YAAoB,qBAA2C;QAA3C,0BAAqB,GAArB,qBAAqB,CAAsB;KAAI;;;;;;;;IASnE,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACjE,IAAI,IAAI,CAAC,qBAAqB,CAAC,eAAe,EAAE,EAAE;YAC9C,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;QACtC,OAAO,KAAK,CAAC;KAChB;;;;;;;;IASD,gBAAgB,CAAC,KAA6B,EAAE,KAA0B;QACtE,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACzC;;;;YApCJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YAVQ,cAAc;;;SCCP,iBAAiB,CAC7B,MAAkB,EAAE,aAAyB,EAAEA,iBAAe,GAAGC,eAAE,EAAE,gBAAgB,GAAG,QAAQ;IAChG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAID,iBAAe,CAAC,MAAM,CAAC,EAAE;QACpF,aAAa,EAAE,CAAC;KACnB;SAAM;QACH,gBAAgB,CAAC,MAAM,CAAC,CAAC;KAC5B;AACL;;ACRA;;;;;MAQa,mBAAmB;IAI5B,YAAY,eAAiC;;;;;QAQrC,aAAQ,GAAW,GAAG,CAAC;QAP3B,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC9D;;;;;;IAaD,kBAAkB;QACd,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KACtD;;;;;;IAOD,mBAAmB;QACf,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KACzD;;;;;;IAOD,gBAAgB;QACZ,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;KAC3G;;;;;;IAOD,gBAAgB;QACZ,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;KAC3G;IAED,qBAAqB;QACjB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,yCAAyC,CAAC,CAAC;QAEnF,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;SACzD;KACJ;IAED,wBAAwB,CAAC,GAAuB;QAC5C,IAAI,IAAI,GAAG,QAAQ,CAAC;QACpB,IAAI,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,SAAS,EAAE;YACrF,IAAI,GAAG,WAAW,CAAC;SACtB;QAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;KACzF;;;;YAtEJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YAT+B,gBAAgB;;;ACIhD;;;;MASa,kBAAkB;;;YAL9B,QAAQ,SAAC;gBACN,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,SAAS,EAAE,CAAC,mBAAmB,CAAC;gBAChC,OAAO,EAAE,EAAE;aACd;;;ACVD;;;;;MAQa,iBAAiB;IAH9B;;;;;QASqB,mBAAc,GAAG,GAAG,CAAC;KAsBzC;;;;;;IAfG,QAAQ,CAAC,MAAM;QACX,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;YACrB,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEnE,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;gBACpB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;aAC7E;YAED,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;gBACpB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;aAC7E;YAED,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;SAC9B;KACJ;;;;YA9BJ,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;ACPD;;;;MAYa,gBAAgB;;;YAR5B,QAAQ,SAAC;gBACN,OAAO,EAAE,EAAE;gBACX,YAAY,EAAE,EAAE;gBAChB,SAAS,EAAE;oBACP,iBAAiB;iBACpB;gBACD,OAAO,EAAE,EAAE;aACd;;;ACVD;;;;MAOa,YAAa,SAAQ,YAAY;;;;;IAM1C,YAA2C,SAA0B;QACjE,KAAK,EAAE,CAAC;QAD+B,cAAS,GAAT,SAAS,CAAiB;KAEpE;;;;;;IAOD,WAAW,CAAC,KAAY;QACpB,IAAI;YACA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBACpB,IAAI,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBACvB,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACnB;aACJ,CAAC,CAAC;SACN;QAAC,OAAO,CAAC,EAAE;SACX;QACD,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAC5B;;;;YA5BJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;wCAOgB,MAAM,SAAC,aAAa;;;ACdrC;;;;;MAKsB,oBAAoB;;;ACP1C;;;;MAIa,sBAAsB;;;;;;;;;;;;IAa/B,YACW,IAA4B,EAC5B,KAAa,EACb,MAAe,EACf,MAAe,EACf,QAAiB,EACjB,UAA0B,EAC1B,KAA8B;QAN9B,SAAI,GAAJ,IAAI,CAAwB;QAC5B,UAAK,GAAL,KAAK,CAAQ;QACb,WAAM,GAAN,MAAM,CAAS;QACf,WAAM,GAAN,MAAM,CAAS;QACf,aAAQ,GAAR,QAAQ,CAAS;QACjB,eAAU,GAAV,UAAU,CAAgB;QAC1B,UAAK,GAAL,KAAK,CAAyB;KACxC;;;ACnBL;;;;MAOa,kCAAkC;;;;;;IAO3C,YAAoB,YAAkC,EAAU,MAAc;QAA1D,iBAAY,GAAZ,YAAY,CAAsB;QAAU,WAAM,GAAN,MAAM,CAAQ;KAAK;;;;;;;IAQnF,YAAY,CAAC,KAAgC;QACzC,OAAO,KAAK,YAAY,iBAAiB;YACrC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,0BAA0B;YAChE,KAAK,CAAC,KAAK,CAAC;KACnB;;;;;;;IAQD,MAAM,CAAC,KAAwB;QAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YACZ,IAAI,CAAC,YAAY,CAAC,eAAe,CAC7B,IAAI,sBAAsB,CACtB,KAAK,CAAC,KAAK,CAAC,IAAI,EAChB,KAAK,CAAC,KAAK,CAAC,KAAK,EACjB,KAAK,CAAC,KAAK,CAAC,MAAM,EAClB,KAAK,CAAC,KAAK,CAAC,MAAM,EAClB,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;SAClC,CAAC,CAAC;KACN;;;;YAxCJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YAVQ,oBAAoB;YAFR,MAAM;;;ACC3B;;;;MAIa,oBAAoB;;;;;;;;IAS7B,YACW,IAAY,EACZ,KAAa,EACb,MAAc;QAFd,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAQ;QACb,WAAM,GAAN,MAAM,CAAQ;KACxB;;;ACZL;;;;MAOa,uBAAuB;;;;;;IAOhC,YAAoB,YAAkC,EAAU,MAAc;QAA1D,iBAAY,GAAZ,YAAY,CAAsB;QAAU,WAAM,GAAN,MAAM,CAAQ;KAAK;;;;;;;IAQnF,YAAY,CAAC,KAAgC;QACzC,OAAO,KAAK,YAAY,iBAAiB;YACrC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,0BAA0B;gBAClE,KAAK,CAAC,KAAK,CAAC,CAAC;KACpB;;;;;;;IAQD,MAAM,CAAC,KAAwB;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YACZ,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;SACpE,CAAC,CAAC;KACN;;;;;;;IAQM,cAAc,CAAC,KAAwB;QAC1C,MAAM,OAAO,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE7C,IAAI,OAAO,KAAK,SAAS,EAAE;YACvB,OAAO,IAAI,oBAAoB,CAC3B,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,UAAU,EAChB,KAAK,CAAC,OAAO,CAChB,CAAC;SACL;QAED,OAAO,OAAO,CAAC;KAClB;;;;YAvDJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YAVQ,oBAAoB;YAFR,MAAM;;AAoE3B;;;;MAIa,cAAc,GAAG;IAC1B,GAAG,EAAE,IAAI,oBAAoB,CAAC,GAAG,EAC7B,iBAAiB,EACjB,gDAAgD,CAAC;IAErD,GAAG,EAAE,IAAI,oBAAoB,CAAC,GAAG,EAC7B,UAAU,EACV,yFAAyF,CAAC;IAE9F,GAAG,EAAE,IAAI,oBAAoB,CAAC,GAAG,EAC7B,gBAAgB,EAChB,0CAA0C,CAAC;IAE/C,GAAG,EAAE,IAAI,oBAAoB,CAAC,GAAG,EAC7B,mBAAmB,EACnB,+CAA+C,CAAC;IAEpD,GAAG,EAAE,IAAI,oBAAoB,CAAC,GAAG,EAC7B,aAAa,EACb,+FAA+F,CAAC;IAEpG,GAAG,EAAE,IAAI,oBAAoB,CAAC,GAAG,EAC7B,sBAAsB,EACtB,oHAAoH,CAAC;IAEzH,GAAG,EAAE,IAAI,oBAAoB,CAAC,GAAG,EAC7B,iBAAiB,EACjB,sHAAsH,CAAC;;;AC3F/H;;;;MA0Ba,WAAW;;;YAtBvB,QAAQ,SAAC;gBACN,YAAY,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACL,YAAY;iBACf;gBACD,SAAS,EAAE;oBACP;wBACI,OAAO,EAAE,aAAa;wBACtB,QAAQ,EAAE,uBAAuB;wBACjC,KAAK,EAAE,IAAI;qBACd;oBACD;wBACI,OAAO,EAAE,aAAa;wBACtB,QAAQ,EAAE,kCAAkC;wBAC5C,KAAK,EAAE,IAAI;qBACd;oBACD;wBACI,OAAO,EAAE,YAAY;wBACrB,QAAQ,EAAE,YAAY;qBACzB;iBACJ;aACJ;;;AC7BD;;;;MAOa,mBAAoB,SAAQ,oBAAoB;;;;;;;IAQzD,eAAe,CAAC,OAAe,EAAE,KAAc;QAC3C,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC;KACxC;;;;;;IAOD,eAAe,CAAC,OAA+B;QAC3C,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;KACvD;;;;YAtBJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;ACJD;;;;MAOa,iBAAiB;;;;;;IAa1B,YAAoB,mBAA4C;QAA5C,wBAAmB,GAAnB,mBAAmB,CAAyB;;;;;QAPhE,WAAM,GAAkC,IAAI,aAAa,EAAkB,CAAC;QAQxE,IAAI,IAAI,KAAK,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC7C,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SAC1D;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC,KAAqB;YACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B,CAAC,CAAC;KACN;;;;;;IAOD,MAAM,CAAC,KAAwB;QAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,eAAe,GAAqB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEnE,IAAI,eAAe,CAAC,MAAM,IAAI,EAAE,EAAE;YAC9B,eAAe,CAAC,KAAK,EAAE,CAAC;SAC3B;QAED,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEjC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;QAEpE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAChC;;;;;;IAOO,iBAAiB;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;KACzD;;;;;;;IAQO,gBAAgB,CAAC,KAAwB;QAC7C,IAAI,WAAmB,CAAC;QACxB,IAAI,UAA0B,CAAC;QAC/B,IAAI,SAAS,GAAS,IAAI,IAAI,EAAE,CAAC;QACjC,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAoB,CAAC;QAEzB,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,0BAA0B,EAAE;YAClE,WAAW,GAAG,qBAAqB,OAAO;wCACd,SAAS;qCACZ,KAAK,CAAC,MAAM;kCACf,KAAK,CAAC,GAAG;mCACR,KAAK,CAAC,KAAK,CAAC,MAAM;yCACZ,KAAK,CAAC,KAAK,CAAC,UAAU;oCAC3B,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YAE5C,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;SAE7B;aAAM;YACH,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAEpE,WAAW,GAAG,qBAAqB,OAAO;wCACd,SAAS;qCACZ,KAAK,CAAC,MAAM;kCACf,KAAK,CAAC,GAAG;mCACR,YAAY,CAAC,MAAM,EAAE,CAAC;YAE7C,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;SAC9B;QAED,UAAU,GAAG;YACT,OAAO,EAAE,KAAK;YACd,SAAS,EAAE,SAAS;YACpB,aAAa,EAAE,OAAO;YACtB,WAAW,EAAE,WAAW;SAC3B,CAAC;QAEF,OAAO,UAAU,CAAC;KACrB;;;;;;;IAQO,UAAU,CAAC,KAAwB;QACvC,IAAI,QAAuB,CAAC;QAE5B,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG;YAC1B,IAAI,GAAG,CAAC,WAAW,EAAE,KAAK,kBAAkB,EAAE;gBAC1C,QAAQ,GAAG,GAAG,CAAC;gBACf,OAAO,KAAK,CAAC;aAChB;YACD,OAAO,IAAI,CAAC;SACf,CAAC,CAAC;QAEH,OAAO,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;KACxD;;;;YAxHJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YARQ,uBAAuB;;;ACChC;;;;MAOa,yBAAyB;;;;;IAMlC,YAAoB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;KAAI;;;;;;IAO5D,YAAY,CAAC,KAAY;QACrB,OAAO,KAAK,YAAY,iBAAiB,CAAC;KAC7C;;;;;;IAOD,MAAM,CAAC,KAAwB;QAC3B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KACxC;;;;YA3BJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YARQ,iBAAiB;;;ACD1B;;;;;;;MAYa,OAAO;IAElB,SAAS,CAAC,KAAa;QACrB,IAAK,KAAK,KAAK,IAAI,EAAE;YACnB,OAAO,GAAG,CAAC;SACZ;aAAM;YACL,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YAC3C,OAAQ,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC7D;KACF;;;YAbF,IAAI,SAAC;gBACJ,IAAI,EAAE,KAAK;aACZ;;;ACVD;;;;;;;MAYa,OAAO;IAElB,SAAS,CAAC,KAAa;QACrB,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE;YACzC,OAAO,KAAK,CAAC;SACd;aAAM;YACL,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YAC3C,OAAQ,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG;gBACnC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG;gBAC3B,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG;gBAC3B,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SACxB;KACF;;;YAhBF,IAAI,SAAC;gBACJ,IAAI,EAAE,KAAK;aACZ;;;ACVD;;;;;;;MAYa,QAAQ;IAEnB,SAAS,CAAC,KAAa;QACrB,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE;YACzC,OAAO,KAAK,CAAC;SACd;aAAM;YACL,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YAC3C,OAAQ,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG;gBACnC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG;gBAC3B,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG;gBAC3B,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG;gBAC5B,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;SACzB;KACF;;;YAjBF,IAAI,SAAC;gBACJ,IAAI,EAAE,MAAM;aACb;;;ACVD;;;;;;MAWa,SAAS;IAElB,SAAS,CAAC,KAAU,EAAE,KAAU,EAAE,UAAe;QAC7C,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;KAC3C;;;YARJ,IAAI,SAAC;gBACF,IAAI,EAAE,OAAO;aAChB;;;ACTD;;;;;;;;MAaa,SAAS;IAElB,SAAS,CAAC,KAAa,EAAE,KAAK,GAAG,EAAE,EAAE,QAAQ,GAAG,KAAK;QACjD,OAAO,KAAK,CAAC,MAAM,GAAG,KAAK;cACrB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,QAAQ,EAAE;cACtC,KAAK,CAAC;KACf;;;YAVJ,IAAI,SAAC;gBACF,IAAI,EAAE,OAAO;aAChB;;;ACLD;;;;MAqBa,UAAU;;;YAjBtB,QAAQ,SAAC;gBACN,OAAO,EAAE,EAAE;gBACX,YAAY,EAAE;oBACV,OAAO;oBACP,OAAO;oBACP,QAAQ;oBACR,SAAS;oBACT,SAAS;iBACZ;gBACD,OAAO,EAAE;oBACL,OAAO;oBACP,OAAO;oBACP,QAAQ;oBACR,SAAS;oBACT,SAAS;iBACZ;aACJ;;;AC1BD;;;;MAOa,gBAAgB;;;;;;;IAQzB,IAAI,CAAC,IAAY;QACb,MAAM,KAAK,GAAY,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;;QAG9E,IAAI,IAAI,GAAwB,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACnE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,GAAG,MAAM,CAAC,GAAG,SAAS,CAAC;QAEjD,IAAI,SAAS,GAAW,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC;QAEjF,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,SAAS,IAAI,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAElB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEhC,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC7B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACnC;;;;YAnCJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;ACDD;;;;MAIa,kBAAkB;;;;;;IAqB3B,YAAoB,OAAyB;QAAzB,YAAO,GAAP,OAAO,CAAkB;;;;;QAP7C,gBAAW,GAA0B,IAAI,YAAY,EAAW,CAAC;KAOhB;;;;;;IAQjD,IAAI;QACA,IAAI;YACA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC/B;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC;SACX;KACJ;;;YA5CJ,SAAS,SAAC;gBACP,QAAQ,EAAE,aAAa;aAC1B;;;YAJQ,gBAAgB;;;wBAepB,KAAK;0BAOL,MAAM;mBAUN,YAAY,SAAC,OAAO;;;AC9BzB;;;;MAgBa,eAAe;;;YAZ3B,QAAQ,SAAC;gBACR,OAAO,EAAE,EAAE;gBACX,YAAY,EAAE;oBACZ,kBAAkB;iBACnB;gBACD,SAAS,EAAE;oBACT,gBAAgB;iBACjB;gBACD,OAAO,EAAE;oBACP,kBAAkB;iBACnB;aACF;;;AChBD;;;;;MAQa,eAAe;;;;;;;IAoBxB,YAAoB,UAAsB,EAAU,KAAgB;QAAhD,eAAU,GAAV,UAAU,CAAY;QAAU,UAAK,GAAL,KAAK,CAAW;KAAK;;;;;IAMzE,QAAQ;QACJ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CACvD;YACI,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7F,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CACvB,QAAQ,EACR;gBACI,SAAS,EAAE,KAAK;gBAChB,qBAAqB,EAAE,KAAK;gBAC5B,qBAAqB,EAAE,KAAK;aAC/B,CACJ,CAAC;SACL,CACJ,CAAC;KACL;;;;;IAMD,WAAW;QACP,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;KACjC;;;YAnDJ,SAAS,SAAC;gBACP,QAAQ,EAAE,UAAU;aACvB;;;YAVmB,UAAU;YACrB,SAAS;;;wBAgBb,KAAK;;;ACfV;;;;MAOa,oBAAoB;;;;;IA0B7B,YAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;;;;;QApB1B,UAAK,GAAW,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;;;;;QAMvC,gBAAW,GAAkB;YACjC,WAAW;YACX,QAAQ;YACR,KAAK;YACL,KAAK;YACL,MAAM;YACN,WAAW;YACX,YAAY;SACf,CAAC;KAMqC;;;;;;IAQvC,SAAS,CAAC,KAAoB;QAE1B,MAAM,OAAO,GAAW,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC;QACpD,MAAM,IAAI,GAAW,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE/C,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC5C,OAAO;SACV;QAED,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACxC,KAAK,CAAC,cAAc,EAAE,CAAC;SAC1B;KACJ;;;YAjDJ,SAAS,SAAC;gBACP,QAAQ,EAAE,oBAAoB;aACjC;;;YARmB,UAAU;;;wBA0CzB,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;;;ACtCvC;;;;AAIA,MAAM,UAAU,GAAG;IACf,oBAAoB;IACpB,eAAe;CAClB,CAAC;AAEF;;;;MAQa,gBAAgB;;;YAJ5B,QAAQ,SAAC;gBACN,YAAY,EAAE,UAAU;gBACxB,OAAO,EAAE,UAAU;aACtB;;;ICnBI;AAAL,WAAK,oBAAoB;IAAG,iEAAK,CAAA;IAAE,iEAAK,CAAA;AAAC,CAAC,EAArC,oBAAoB,KAApB,oBAAoB,QAAiB;AAE1C;;;;AAIA,MAAM,gBAAgB;;;;;;IAOlB,YACW,IAAY,EACZ,IAA0B;QAD1B,SAAI,GAAJ,IAAI,CAAQ;QACZ,SAAI,GAAJ,IAAI,CAAsB;KACpC;;;ACfL;;;;MAIa,qBAAsB,SAAQ,gBAAgB;;;;;;;IAQvD,YACI,IAAY,EACL,KAAa,EACb,OAAe;QACtB,KAAK,CAAC,IAAI,EAAE,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAFjC,UAAK,GAAL,KAAK,CAAQ;QACb,YAAO,GAAP,OAAO,CAAQ;KAEzB;;;ACbL;;;;MAOa,uBAAuB;IAHpC;;;;QAQI,sBAAiB,GACb,IAAI,OAAO,EAAoB,CAAC;KAqBvC;;;;;;IAdG,aAAa,CAAC,IAAY,EAAE,KAAa;QACrC,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CACrC,CAAC,SAA2B;YACxB,OAAO,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI,KAAK,IAAI,MAAM,SAAS,CAAC,IAAI,KAAK,oBAAoB,CAAC,KAAK,KACvF,SAAS,YAAY,qBAAqB;gBAC1C,SAAS,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAA;SAClC,CACJ,CAAC,CAAC;KACN;IAED,MAAM,CAAC,YAA8B;QACjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC7C;;;;YA5BJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;ACND;;;;MAOa,6BAA6B;;;;;;IAOtC,YAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;KAAK;;;;;;;IAQzE,YAAY,CAAC,KAAgC;QACzC,OAAO,KAAK,YAAY,iBAAiB;YACrC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,0BAA0B;YAChE,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;KAC1E;;;;;;;IAQD,MAAM,CAAC,KAAwB;QAC3B,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;SACrD;QACD,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE;YACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;SACtD;KACJ;;;;;IAMD,SAAS,CAAC,IAAY,EAAE,MAA8C;QAClE,MAAM,CAAC,OAAO,CAAC,SAAS,IACpB,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAC/B,IAAI,qBAAqB,CACrB,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAC3D;;;;YAhDJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YAVQ,uBAAuB;;;ACAhC;;;;MAIa,qBAAsB,SAAQ,gBAAgB;;;;;IAMvD,YAAY,IAAY;QACpB,KAAK,CAAC,IAAI,EAAE,oBAAoB,CAAC,KAAK,CAAC,CAAC;KAC3C;;;ACDL;;;;MAOa,2BAA2B;;;;;;IAOpC,YAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;KAAI;;;;;;;;IASxE,SAAS,CAAC,OAAyB,EAAE,IAAiB;QAClD,IAAI,CAAC,uBAAuB;aACvB,MAAM,CAAC,IAAI,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC/B;;;;YAvBJ,UAAU,SAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;YATQ,uBAAuB;;;MCDnB,mCAAmC;;;;;IAc5C,YAAsB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;KAAI;;;;IAK1E,QAAQ;QACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAuB;aAC3C,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;aACnC,SAAS,CAAC,CAAC,YAA8B;YACtC,IAAI,YAAY,YAAY,qBAAqB,EAAE;gBAC/C,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;aACvC;iBAAM;gBACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACvB;SACJ,CAAC,CAAC;KACV;;;;IAKD,WAAW;QACP,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACnC;;;YAvCJ,SAAS,SAAC;gBACP,QAAQ,EAAE,wCAAwC;aACrD;;;YARQ,uBAAuB;;;mBAa3B,KAAK;mBAEL,KAAK;;;ACNV;;;;MAwBa,0BAA0B;;;YApBtC,QAAQ,SAAC;gBACN,OAAO,EAAE;oBACL,YAAY;iBACf;gBACD,YAAY,EAAE,CAAE,mCAAmC,CAAE;gBACrD,OAAO,EAAE,CAAE,mCAAmC,CAAC;gBAC/C,SAAS,EAAE;oBACP,uBAAuB;oBACvB;wBACI,OAAO,EAAE,aAAa;wBACtB,QAAQ,EAAE,6BAA6B;wBACvC,KAAK,EAAE,IAAI;qBACd;oBACD;wBACI,OAAO,EAAE,iBAAiB;wBAC1B,QAAQ,EAAE,2BAA2B;wBACrC,KAAK,EAAE,IAAI;qBACd;iBACJ;aACJ;;;AC7BD;;;;MAIa,wBAAyB,SAAQ,sBAAsB;;;;;;;;;;;;IAahE,YACI,IAA4B,EAC5B,KAAa,EACb,MAAe,EACf,MAAe,EACf,QAAiB,EACjB,UAA0B,EAC1B,KAA8B,EACvB,UAA+B;QACtC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QADzD,eAAU,GAAV,UAAU,CAAqB;KAEzC;;;AC3BL;;;;;;;;;;;;;;;;;;;;;MAsBsB,oBAAoB;IAQtC;QANQ,kBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QAInC,uBAAkB,GAAG,IAAI,OAAO,EAAa,CAAC;QAGlD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KAC9D;IAED,WAAW,CACP,UAAyB,EACzB,IAAyB,EACzB,KAA4B,EAC5B,QAAqB;QAErB,IAAI,CAAC,aAAa,CAAC,GAAG,CAClB,UAAU,CAAC,SAAS,CAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CACtB,CACJ,CAAC;KACL;IAED,WAAW;QACP,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,EAAE,CAAC;KAC3C;IAEO,IAAI,CAAC,EAAwB;QACjC,OAAO,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,IAAI,CAAC,IAAI,EAAE;KACzB;IAED,WAAW;QACP,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;KACtC;;;YAzCJ,UAAU;;;;ACnBX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsCsB,mBAAoB,SAAQ,oBAAoB;IASlE,YAAY,QAAkB;QAC1B,KAAK,EAAE,CAAC;;;;QALZ,kBAAa,GAAG,IAAI,OAAO,EAAO,CAAC;QAM/B,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;KAC5D;IAED,WAAW,CAAC,OAAsB;QAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CACnB,IAAI,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAsB,CAAC,CACpE,CAAC;KACL;;;;IAKD,SAAS,CAAuB,GAAM;QAClC,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAC1B,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAC/B,SAAS,CAAC,SAAS,CAAC,EACpB,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,CACvB,CAAC;KACL;;;;IAKD,cAAc,CAAuB,GAAM,EAAE,MAA2B;QACpE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,KAAK;YAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;SACzC,CAAC,CAAC;KACN;;;YAxCJ,SAAS;;;YA1CkB,QAAQ;;;SCIpB,IAAI,MAAM;AAAA,CAAC;AAE3B;;;;;;;;;;SAUgB,oBAAoB,CAAC,IAAe;IAChD,OAAO;QACH,OAAO,EAAE,iBAAiB;QAC1B,WAAW,EAAE,IAAI;QACjB,KAAK,EAAE,IAAI;KACd,CAAC;AACN,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+BsB,qBAAyB,SAAQ,mBAAmB;IAD1E;;;QAII,sBAAiB,GAAuB,IAAI,CAAC;;QAG7C,cAAS,GAAG,IAAI,CAAC;;QAGjB,eAAU,GAAG,KAAK,CAAC;KA0BtB;;IApBG,UAAU,CAAC,KAAQ;QACf,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KACzC;;IAGD,gBAAgB,CAAC,EAAsB;QACnC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;KAC/B;;IAGD,iBAAiB,CAAC,EAAgB;QAC9B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACvB;;IAGD,gBAAgB,CAAC,UAAmB;QAChC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KACzC;;;YAnCJ,SAAS;;;MCjDY,4BAA+D,SAAQ,qBAAgC;IAIzH,YAAY,QAAkB;QAC1B,KAAK,CAAC,QAAQ,CAAC,CAAC;QAHpB,gBAAW,GAAG,IAAI,WAAW,EAAE,CAAC;QAI5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,KAAK;YAClD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;SACpD,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG;YAC7B,IAAI,CAAC,SAAS,EAAE,CAAC;SACpB,CAAC;KACL;;IAGD,mBAAmB,CAAC,KAAgB;QAChC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;KAC7E;;IAGD,gBAAgB,CAAC,UAAmB;QAChC,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;SAClD;aAAM;YACH,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;SACjD;QACD,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC3C;;IAGS,YAAY,CAAC,KAAgB;QACnC,OAAQ,KAA0B,CAAC;KACtC;;IAGS,YAAY,CAAC,KAAgB;QACnC,OAAQ,KAA0B,CAAC;KACtC;;;YAtCJ,SAAS;;;YAJD,QAAQ;;;ACAjB;;;;ACAA;;;;;;"}