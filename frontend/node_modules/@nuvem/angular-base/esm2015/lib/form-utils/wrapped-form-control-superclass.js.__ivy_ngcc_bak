import { Injector, Directive } from "@angular/core";
import { FormControl } from "@angular/forms";
import { FormControlSuperclass } from "./form-control-superclass";
export class WrappedFormControlSuperclass extends FormControlSuperclass {
    constructor(injector) {
        super(injector);
        this.formControl = new FormControl();
        this.subscribeTo(this.formControl.valueChanges, (value) => {
            this.emitOutgoingValue(this.innerToOuter(value));
        });
        this.formControl.markAsTouched = () => {
            this.onTouched();
        };
    }
    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */
    handleIncomingValue(value) {
        this.formControl.setValue(this.outerToInner(value), { emitEvent: false });
    }
    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this.formControl.disable({ emitEvent: false });
        }
        else {
            this.formControl.enable({ emitEvent: false });
        }
        super.setDisabledState(this.isDisabled);
    }
    /** Override this to modify a value coming from the outside to the format needed within this component. */
    outerToInner(value) {
        return value;
    }
    /** Override this to modify a value coming from within this component to the format expected on the outside. */
    innerToOuter(value) {
        return value;
    }
}
WrappedFormControlSuperclass.decorators = [
    { type: Directive }
];
WrappedFormControlSuperclass.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1mb3JtLWNvbnRyb2wtc3VwZXJjbGFzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2Zvcm0tdXRpbHMvd3JhcHBlZC1mb3JtLWNvbnRyb2wtc3VwZXJjbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHbEUsTUFBTSxPQUFnQiw0QkFBK0QsU0FBUSxxQkFBZ0M7SUFJekgsWUFBWSxRQUFrQjtRQUMxQixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFIcEIsZ0JBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBSTVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN0RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEdBQUcsR0FBRyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQsc0hBQXNIO0lBQ3RILG1CQUFtQixDQUFDLEtBQWdCO1FBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsd0hBQXdIO0lBQ3hILGdCQUFnQixDQUFDLFVBQW1CO1FBQ2hDLElBQUksVUFBVSxFQUFFO1lBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNsRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNqRDtRQUNELEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELDBHQUEwRztJQUNoRyxZQUFZLENBQUMsS0FBZ0I7UUFDbkMsT0FBUSxLQUEwQixDQUFDO0lBQ3ZDLENBQUM7SUFFRCwrR0FBK0c7SUFDckcsWUFBWSxDQUFDLEtBQWdCO1FBQ25DLE9BQVEsS0FBMEIsQ0FBQztJQUN2QyxDQUFDOzs7WUF0Q0osU0FBUzs7O1lBSkQsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBEaXJlY3RpdmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IEZvcm1Db250cm9sU3VwZXJjbGFzcyB9IGZyb20gXCIuL2Zvcm0tY29udHJvbC1zdXBlcmNsYXNzXCI7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFdyYXBwZWRGb3JtQ29udHJvbFN1cGVyY2xhc3M8T3V0ZXJUeXBlLCBJbm5lclR5cGUgPSBPdXRlclR5cGU+IGV4dGVuZHMgRm9ybUNvbnRyb2xTdXBlcmNsYXNzPE91dGVyVHlwZT4ge1xuXG4gICAgZm9ybUNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woKTtcblxuICAgIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgICAgICBzdXBlcihpbmplY3Rvcik7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG8odGhpcy5mb3JtQ29udHJvbC52YWx1ZUNoYW5nZXMsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0T3V0Z29pbmdWYWx1ZSh0aGlzLmlubmVyVG9PdXRlcih2YWx1ZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5tYXJrQXNUb3VjaGVkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKiogQ2FsbGVkIGFzIGFuZ3VsYXIgcHJvcGFnYXRlcyB2YWx1ZXMgY2hhbmdlcyB0byB0aGlzIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAuIFlvdSBub3JtYWxseSBkbyBub3QgbmVlZCB0byB1c2UgaXQuICovXG4gICAgaGFuZGxlSW5jb21pbmdWYWx1ZSh2YWx1ZTogT3V0ZXJUeXBlKSB7XG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuc2V0VmFsdWUodGhpcy5vdXRlclRvSW5uZXIodmFsdWUpLCB7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgLyoqIENhbGxlZCBhcyBhbmd1bGFyIHByb3BhZ2F0ZXMgZGlzYWJsZWQgY2hhbmdlcyB0byB0aGlzIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAuIFlvdSBub3JtYWxseSBkbyBub3QgbmVlZCB0byB1c2UgaXQuICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1Db250cm9sLmRpc2FibGUoeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5lbmFibGUoeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLnNldERpc2FibGVkU3RhdGUodGhpcy5pc0Rpc2FibGVkKTtcbiAgICB9XG5cbiAgICAvKiogT3ZlcnJpZGUgdGhpcyB0byBtb2RpZnkgYSB2YWx1ZSBjb21pbmcgZnJvbSB0aGUgb3V0c2lkZSB0byB0aGUgZm9ybWF0IG5lZWRlZCB3aXRoaW4gdGhpcyBjb21wb25lbnQuICovXG4gICAgcHJvdGVjdGVkIG91dGVyVG9Jbm5lcih2YWx1ZTogT3V0ZXJUeXBlKTogSW5uZXJUeXBlIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpIGFzIElubmVyVHlwZTtcbiAgICB9XG5cbiAgICAvKiogT3ZlcnJpZGUgdGhpcyB0byBtb2RpZnkgYSB2YWx1ZSBjb21pbmcgZnJvbSB3aXRoaW4gdGhpcyBjb21wb25lbnQgdG8gdGhlIGZvcm1hdCBleHBlY3RlZCBvbiB0aGUgb3V0c2lkZS4gKi9cbiAgICBwcm90ZWN0ZWQgaW5uZXJUb091dGVyKHZhbHVlOiBJbm5lclR5cGUpOiBPdXRlclR5cGUge1xuICAgICAgICByZXR1cm4gKHZhbHVlIGFzIGFueSkgYXMgT3V0ZXJUeXBlO1xuICAgIH1cbn1cbiJdfQ==