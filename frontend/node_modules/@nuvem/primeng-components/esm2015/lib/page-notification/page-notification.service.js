import { Injectable } from '@angular/core';
import { MessageService } from 'primeng/api';
import { NotificationProvider } from '@nuvem/angular-base';
import * as i0 from "@angular/core";
import * as i1 from "primeng/api";
/**
 * Class PageNotificationService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'primeng/api';
export class PageNotificationService extends NotificationProvider {
    /**
     * constructor method
     * @constructor
     * @param {MessageService} messageService
     */
    constructor(messageService) {
        super();
        this.messageService = messageService;
        /**
         * successSeverity property
         * @type {string}
         */
        this.successSeverity = 'success';
        /**
         * infoSeverity property
         * @type {string}
         */
        this.infoSeverity = 'info';
        /**
         * warnSeverity property
         * @type {string}
         */
        this.warnSeverity = 'warn';
        /**
         * errorSeverity property
         * @type {string}
         */
        this.errorSeverity = 'error';
        /**
         * createMsg property
         * @type {string}
         */
        this.createMsg = 'Registro incluído com sucesso!';
        /**
         * updateMsg property
         * @type {string}
         */
        this.updateMsg = 'Registro alterado com sucesso!';
        /**
         * deleteMsg property
         * @type {string}
         */
        this.deleteMsg = 'Registro excluído com sucesso!';
    }
    /**
     * addCreateMsg method
     * @param {string} title
     */
    addCreateMsg(title) {
        this.addSuccessMessage(this.createMsg, title);
    }
    /**
     * addSuccessMessage method
     * @param {string} message
     * @param {string} title
     */
    addSuccessMessage(message, title) {
        this.addMsg(this.successSeverity, message, title);
    }
    /**
     * addMsg method
     * @param {string} severity
     * @param {string} msg
     * @param {string} title
     */
    addMsg(severity, msg, title) {
        this.messageService.add({
            severity: severity,
            summary: title,
            detail: msg
        });
    }
    /**
     * addUpdateMsg method
     * @param {string} title
     */
    addUpdateMsg(title) {
        this.addSuccessMessage(this.updateMsg, title);
    }
    /**
     * addDeleteMsg method
     * @param {string} title
     */
    addDeleteMsg(title) {
        this.addSuccessMessage(this.deleteMsg, title);
    }
    /**
     * addInfoMessage method
     * @param {string} message
     * @param {string} title
     */
    addInfoMessage(message, title) {
        this.addMsg(this.infoSeverity, message, title);
    }
    /**
     * addWarnMessage method
     * @param {string} message
     * @param {string} title
     */
    addWarnMessage(message, title) {
        this.addMsg(this.warnSeverity, message, title);
    }
    /**
     * addErrorMessage method
     * @param {string} message
     * @param {string} title
     */
    addErrorMessage(message, title) {
        this.addMsg(this.errorSeverity, message, title);
    }
    /**
     * addErrorProblem method
     * @param {ApplicationProblemType} problem
     */
    addErrorProblem(problem) {
        this.addMsg(this.errorSeverity, problem.detail, problem.title);
    }
}
PageNotificationService.ɵfac = function PageNotificationService_Factory(t) { return new (t || PageNotificationService)(ɵngcc0.ɵɵinject(ɵngcc1.MessageService)); };
PageNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageNotificationService_Factory() { return new PageNotificationService(i0.ɵɵinject(i1.MessageService)); }, token: PageNotificationService, providedIn: "root" });
PageNotificationService.ctorParameters = () => [
    { type: MessageService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PageNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.MessageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,