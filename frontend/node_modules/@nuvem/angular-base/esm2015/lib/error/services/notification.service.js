import { NotificationProvider } from '../providers/notification.provider';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Class NotificationService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export class NotificationService extends NotificationProvider {
    /**
     * Metodo responsável po adicionar mensagem de erro
     * @param {string} message
     * @param {string} title
     * @returns void
     */
    addErrorMessage(message, title) {
        console.error(title + ' ' + message);
    }
    /**
     * Metodo responsável por adicionar o detalhamento do erro no console
     * @param {ApplicationProblemType} problem
     * @returns void
     */
    addErrorProblem(problem) {
        console.error(problem.title + ' ' + problem.detail);
    }
}
NotificationService.ɵfac = function NotificationService_Factory(t) { return ɵNotificationService_BaseFactory(t || NotificationService); };
NotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(); }, token: NotificationService, providedIn: "root" });
const ɵNotificationService_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(NotificationService);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2Vycm9yL3NlcnZpY2VzL25vdGlmaWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBQyxNQUFPLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlILE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxvQkFBb0I7QUFDN0QsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksZUFBZSxDQUFDLE9BQWUsRUFBRSxLQUFjO0FBQUksUUFDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxlQUFlLENBQUMsT0FBK0I7QUFBSSxRQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1RCxJQUFJLENBQUM7QUFDTDswSUFDQTtBQUFDOytDQXhCQSxVQUFVLFNBQUMsa0JBQ1IsVUFBVSxFQUFFLE1BQU07V0FDckI7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblByb2JsZW1UeXBlIH0gZnJvbSAnLi4vdHlwZXMvYXBwbGljYXRpb24tcHJvYmxlbS50eXBlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByb3ZpZGVyfSAgZnJvbSAnLi4vcHJvdmlkZXJzL25vdGlmaWNhdGlvbi5wcm92aWRlcic7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQ2xhc3MgTm90aWZpY2F0aW9uU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblNlcnZpY2UgZXh0ZW5kcyBOb3RpZmljYXRpb25Qcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBvIGFkaWNpb25hciBtZW5zYWdlbSBkZSBlcnJvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgYWRkRXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5lcnJvcih0aXRsZSArICcgJyArIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIGFkaWNpb25hciBvIGRldGFsaGFtZW50byBkbyBlcnJvIG5vIGNvbnNvbGVcbiAgICAgKiBAcGFyYW0ge0FwcGxpY2F0aW9uUHJvYmxlbVR5cGV9IHByb2JsZW1cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgYWRkRXJyb3JQcm9ibGVtKHByb2JsZW06IEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUpOiB2b2lkIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihwcm9ibGVtLnRpdGxlICsgJyAnICsgcHJvYmxlbS5kZXRhaWwpO1xuICAgIH1cblxufVxuIl19