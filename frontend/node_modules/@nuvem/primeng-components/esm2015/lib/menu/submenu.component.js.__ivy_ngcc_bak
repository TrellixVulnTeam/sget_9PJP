import { Component, Input } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { MenusService } from './menu.service';
import { NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
export class SubMenuComponent {
    constructor(menuService, router) {
        this.menuService = menuService;
        this.router = router;
        this.active = false;
        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(key => {
            // deactivate current active menu
            if (this.active && this.key !== key && key.indexOf(this.key) !== 0) {
                this.active = false;
            }
        });
        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {
            this.active = false;
        });
        this.router.events.pipe(filter(event => event instanceof NavigationEnd))
            .subscribe(params => {
            if (this.menuService.isHorizontal() || this.menuService.isSlim()) {
                this.active = false;
            }
            else {
                if (this.item.routerLink) {
                    this.updateActiveStateFromRoute();
                }
                else {
                    this.active = false;
                }
            }
        });
    }
    updateActiveStateFromRoute() {
        this.active = this.router.isActive(this.item.routerLink[0], this.item.items ? false : true);
    }
    /**
     * Alterar o menu root entre aberto e fechado
     */
    rootMenuToggle() {
        if (this.root) {
            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;
        }
    }
    /**
     * Activa o menu por index e desativa o item ativo
     * @param index
     */
    activeMenuByIndex(index) {
        this.activeIndex = (this.activeIndex === index) ? null : index;
        return this.activeIndex;
    }
    /**
     * Verifica se foi informado um comando para o item de menu e executa caso necessário
     * @param item menu
     */
    execCommand(event, item) {
        if (item.command) {
            item.command({ 'originalEvent': event, 'item': item });
            return true;
        }
        return false;
    }
    /**
     * Esconte o menu caso este não possua itens
     * @param item menu
     */
    hideMenu(item) {
        if (!item.items) {
            if (this.menuService.isHorizontal() || this.menuService.isSlim()) {
                this.menuService.resetMenu = true;
            }
            else {
                this.menuService.resetMenu = false;
            }
            this.menuService.overlayMenuActive = false;
            this.menuService.staticMenuMobileActive = false;
            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;
            return true;
        }
        return false;
    }
    itemClick(event) {
        // avoid processing disabled items
        if (this.item.disabled) {
            event.preventDefault();
            return true;
        }
        // navigate with hover in horizontal mode
        if (this.root) {
            this.menuService.menuHoverActive = !this.menuService.menuHoverActive;
        }
        // notify other items
        this.menuService.onMenuStateChange(this.key);
        // execute command
        if (this.item.command) {
            this.item.command({ originalEvent: event, item: this.item });
        }
        // toggle active state
        if (this.item.items) {
            this.active = !this.active;
        }
        else {
            // activate item
            this.active = true;
            // reset horizontal and slim menu
            if (this.menuService.isHorizontal() || this.menuService.isSlim()) {
                this.menuService.reset();
                this.menuService.menuHoverActive = false;
            }
            if (!this.menuService.isStatic()) {
                this.active = false;
            }
        }
        this.removeActiveInk(event);
    }
    onMouseEnter() {
        // activate item on hover
        if (this.root) {
            this.active = true;
        }
    }
    isActive(index) {
        return this.activeIndex === index;
    }
    get reset() {
        return this._reset;
    }
    set reset(val) {
        this._reset = val;
        if (this._reset && (this.menuService.isHorizontal() || this.menuService.isSlim())) {
            this.activeIndex = null;
        }
    }
    get parentActive() {
        return this._parentActive;
    }
    set parentActive(val) {
        this._parentActive = val;
        if (!this._parentActive) {
            this.activeIndex = null;
        }
    }
    removeActiveInk(event) {
        let currentTarget = event.currentTarget;
        setTimeout(() => {
            if (currentTarget) {
                let activeInk = currentTarget.querySelector('.p-ink-active');
                if (activeInk) {
                    if (activeInk.classList)
                        activeInk.classList.remove('p-ink-active');
                    else
                        activeInk.className = activeInk.className.replace(new RegExp('(^|\\b)' + 'p-ink-active'.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
                }
            }
        }, 401);
    }
    ngOnDestroy() {
        if (this.menuSourceSubscription) {
            this.menuSourceSubscription.unsubscribe();
        }
        if (this.menuResetSubscription) {
            this.menuResetSubscription.unsubscribe();
        }
    }
}
SubMenuComponent.decorators = [
    { type: Component, args: [{
                selector: '[submenu]',
                template: "<div *ngIf=\"root\">\n    <span class=\"layout-menuitem-text\">{{item.label}}</span>\n</div>\n<a [attr.href]=\"item.url\" (click)=\"itemClick($event)\" *ngIf=\"!item.routerLink || item.items\"\n    (keydown.enter)=\"itemClick($event)\" [attr.target]=\"item.target\" [attr.tabindex]=\"0\" [ngClass]=\"item.class\"\n    (mouseenter)=\"onMouseEnter()\" pRipple [pTooltip]=\"item.label\"\n    [tooltipDisabled]=\"active || !(root && menuService.isSlim() && !menuService.isMobile)\">\n    <i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\n    <span class=\"layout-menuitem-text\">{{item.label}}</span>\n    <span class=\"p-badge p-component p-badge-no-gutter\" [ngClass]=\"item.badgeClass\"\n        *ngIf=\"item.badge && !root\">{{item.badge}}</span>\n    <i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\n</a>\n<a (click)=\"itemClick($event)\" *ngIf=\"item.routerLink && !item.items\" [routerLink]=\"item.routerLink\"\n    routerLinkActive=\"active-menuitem-routerlink\" [routerLinkActiveOptions]=\"{exact: true}\" [attr.target]=\"item.target\"\n    [attr.tabindex]=\"0\" [ngClass]=\"item.class\" (mouseenter)=\"onMouseEnter()\" pRipple [pTooltip]=\"item.label\"\n    [tooltipDisabled]=\"active || !(root && menuService.isSlim() && !menuService.isMobile)\">\n    <i [ngClass]=\"item.icon\" class=\"layout-menuitem-icon\"></i>\n    <span class=\"layout-menuitem-text\">{{item.label}}</span>\n    <span class=\"p-badge p-component p-badge-no-gutter\" [ngClass]=\"item.badgeClass\"\n        *ngIf=\"item.badge && !root\">{{item.badge}}</span>\n    <i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\n</a>\n<ul *ngIf=\"(item.items && root) || (item.items && active)\"\n    [@children]=\"root ? 'visible' : active ? 'visibleAnimated' : 'hiddenAnimated'\">\n    <ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"item.items\">\n        <li submenu [item]=\"child\" [index]=\"i\" [parentKey]=\"key\" [class]=\"child.badgeClass\"></li>\n    </ng-template>\n</ul>",
                host: {
                    '[class.layout-root-menuitem]': 'root || active',
                    '[class.active-menuitem]': '(active)'
                },
                animations: [
                    trigger('children', [
                        state('void', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('hiddenAnimated', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('visibleAnimated', style({
                            height: '*'
                        })),
                        state('visible', style({
                            height: '*'
                        })),
                        state('hidden', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('void => visibleAnimated, visibleAnimated => void', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ]
            },] }
];
SubMenuComponent.ctorParameters = () => [
    { type: MenusService },
    { type: Router }
];
SubMenuComponent.propDecorators = {
    item: [{ type: Input }],
    root: [{ type: Input }],
    visible: [{ type: Input }],
    parentKey: [{ type: Input }],
    index: [{ type: Input }],
    reset: [{ type: Input }],
    parentActive: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,