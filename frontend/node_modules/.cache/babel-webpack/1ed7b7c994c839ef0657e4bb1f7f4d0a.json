{"ast":null,"code":"import _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { forwardRef, ɵɵdefineInjectable, Injectable, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Injector, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"rb\"];\n\nvar _c1 = function _c1(a1, a2, a3) {\n  return {\n    \"p-radiobutton-label\": true,\n    \"p-radiobutton-label-active\": a1,\n    \"p-disabled\": a2,\n    \"p-radiobutton-label-focus\": a3\n  };\n};\n\nfunction RadioButton_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function RadioButton_label_6_Template_label_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.select($event);\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n\n    var _r0 = ɵngcc0.ɵɵreference(3);\n\n    ɵngcc0.ɵɵclassMap(ctx_r1.labelStyleClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(5, _c1, _r0.checked, ctx_r1.disabled, ctx_r1.focused));\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r1.inputId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\n\nvar _c2 = function _c2(a1, a2, a3) {\n  return {\n    \"p-radiobutton p-component\": true,\n    \"p-radiobutton-checked\": a1,\n    \"p-radiobutton-disabled\": a2,\n    \"p-radiobutton-focused\": a3\n  };\n};\n\nvar _c3 = function _c3(a1, a2, a3) {\n  return {\n    \"p-radiobutton-box\": true,\n    \"p-highlight\": a1,\n    \"p-disabled\": a2,\n    \"p-focus\": a3\n  };\n};\n\nvar RADIO_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return RadioButton;\n  }),\n  multi: true\n};\n\nvar RadioControlRegistry = /*#__PURE__*/function () {\n  function RadioControlRegistry() {\n    _classCallCheck(this, RadioControlRegistry);\n\n    this.accessors = [];\n  }\n\n  _createClass(RadioControlRegistry, [{\n    key: \"add\",\n    value: function add(control, accessor) {\n      this.accessors.push([control, accessor]);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(accessor) {\n      this.accessors = this.accessors.filter(function (c) {\n        return c[1] !== accessor;\n      });\n    }\n  }, {\n    key: \"select\",\n    value: function select(accessor) {\n      var _this = this;\n\n      this.accessors.forEach(function (c) {\n        if (_this.isSameGroup(c, accessor) && c[1] !== accessor) {\n          c[1].writeValue(accessor.value);\n        }\n      });\n    }\n  }, {\n    key: \"isSameGroup\",\n    value: function isSameGroup(controlPair, accessor) {\n      if (!controlPair[0].control) {\n        return false;\n      }\n\n      return controlPair[0].control.root === accessor.control.control.root && controlPair[1].name === accessor.name;\n    }\n  }]);\n\n  return RadioControlRegistry;\n}();\n\nRadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) {\n  return new (t || RadioControlRegistry)();\n};\n\nRadioControlRegistry.ɵprov = ɵɵdefineInjectable({\n  factory: function RadioControlRegistry_Factory() {\n    return new RadioControlRegistry();\n  },\n  token: RadioControlRegistry,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RadioControlRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar RadioButton = /*#__PURE__*/function () {\n  function RadioButton(cd, injector, registry) {\n    _classCallCheck(this, RadioButton);\n\n    this.cd = cd;\n    this.injector = injector;\n    this.registry = registry;\n    this.onClick = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n\n    this.onModelChange = function () {};\n\n    this.onModelTouched = function () {};\n  }\n\n  _createClass(RadioButton, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.formControlName) {\n        this.control = this.injector.get(NgControl);\n        this.checkName();\n        this.registry.add(this.control, this);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, radioButton, focus) {\n      event.preventDefault();\n\n      if (this.disabled) {\n        return;\n      }\n\n      this.select(event);\n\n      if (focus) {\n        radioButton.focus();\n      }\n    }\n  }, {\n    key: \"select\",\n    value: function select(event) {\n      if (!this.disabled) {\n        this.inputViewChild.nativeElement.checked = true;\n        this.checked = true;\n        this.onModelChange(this.value);\n\n        if (this.formControlName) {\n          this.registry.select(this);\n        }\n\n        this.onClick.emit(event);\n      }\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = value == this.value;\n\n      if (this.inputViewChild && this.inputViewChild.nativeElement) {\n        this.inputViewChild.nativeElement.checked = this.checked;\n      }\n\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"onInputFocus\",\n    value: function onInputFocus(event) {\n      this.focused = true;\n      this.onFocus.emit(event);\n    }\n  }, {\n    key: \"onInputBlur\",\n    value: function onInputBlur(event) {\n      this.focused = false;\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      this.select(event);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.inputViewChild.nativeElement.focus();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.formControlName) {\n        this.registry.remove(this);\n      }\n    }\n  }, {\n    key: \"checkName\",\n    value: function checkName() {\n      if (this.name && this.formControlName && this.name !== this.formControlName) {\n        this.throwNameError();\n      }\n\n      if (!this.name && this.formControlName) {\n        this.name = this.formControlName;\n      }\n    }\n  }, {\n    key: \"throwNameError\",\n    value: function throwNameError() {\n      throw new Error(\"\\n          If you define both a name and a formControlName attribute on your radio button, their values\\n          must match. Ex: <p-radioButton formControlName=\\\"food\\\" name=\\\"food\\\"></p-radioButton>\\n        \");\n    }\n  }]);\n\n  return RadioButton;\n}();\n\nRadioButton.ɵfac = function RadioButton_Factory(t) {\n  return new (t || RadioButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(RadioControlRegistry));\n};\n\nRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: RadioButton,\n  selectors: [[\"p-radioButton\"]],\n  viewQuery: function RadioButton_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    name: \"name\",\n    value: \"value\",\n    formControlName: \"formControlName\",\n    label: \"label\",\n    tabindex: \"tabindex\",\n    inputId: \"inputId\",\n    ariaLabelledBy: \"ariaLabelledBy\",\n    ariaLabel: \"ariaLabel\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    labelStyleClass: \"labelStyleClass\"\n  },\n  outputs: {\n    onClick: \"onClick\",\n    onFocus: \"onFocus\",\n    onBlur: \"onBlur\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR])],\n  decls: 7,\n  vars: 23,\n  consts: [[3, \"ngStyle\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"radio\", 3, \"checked\", \"disabled\", \"change\", \"focus\", \"blur\"], [\"rb\", \"\"], [3, \"ngClass\", \"click\"], [1, \"p-radiobutton-icon\"], [3, \"class\", \"ngClass\", \"click\", 4, \"ngIf\"]],\n  template: function RadioButton_Template(rf, ctx) {\n    if (rf & 1) {\n      var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"input\", 2, 3);\n      ɵngcc0.ɵɵlistener(\"change\", function RadioButton_Template_input_change_2_listener($event) {\n        return ctx.onChange($event);\n      })(\"focus\", function RadioButton_Template_input_focus_2_listener($event) {\n        return ctx.onInputFocus($event);\n      })(\"blur\", function RadioButton_Template_input_blur_2_listener($event) {\n        return ctx.onInputBlur($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n      ɵngcc0.ɵɵlistener(\"click\", function RadioButton_Template_div_click_4_listener($event) {\n        ɵngcc0.ɵɵrestoreView(_r4);\n\n        var _r0 = ɵngcc0.ɵɵreference(3);\n\n        return ctx.handleClick($event, _r0, true);\n      });\n      ɵngcc0.ɵɵelement(5, \"span\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, RadioButton_label_6_Template, 2, 9, \"label\", 6);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ɵngcc0.ɵɵpureFunction3(15, _c2, ctx.checked, ctx.disabled, ctx.focused));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"value\", ctx.value)(\"tabindex\", ctx.tabindex)(\"aria-checked\", ctx.checked)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledBy);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(19, _c3, ctx.checked, ctx.disabled, ctx.focused));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n    }\n  },\n  directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass, ɵngcc1.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nRadioButton.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: Injector\n  }, {\n    type: RadioControlRegistry\n  }];\n};\n\nRadioButton.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  formControlName: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  inputId: [{\n    type: Input\n  }],\n  ariaLabelledBy: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  labelStyleClass: [{\n    type: Input\n  }],\n  onClick: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output\n  }],\n  onBlur: [{\n    type: Output\n  }],\n  inputViewChild: [{\n    type: ViewChild,\n    args: ['rb']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'p-radioButton',\n      template: \"\\n        <div [ngStyle]=\\\"style\\\" [ngClass]=\\\"{'p-radiobutton p-component':true,'p-radiobutton-checked': checked, 'p-radiobutton-disabled': disabled, 'p-radiobutton-focused': focused}\\\" [class]=\\\"styleClass\\\">\\n            <div class=\\\"p-hidden-accessible\\\">\\n                <input #rb type=\\\"radio\\\" [attr.id]=\\\"inputId\\\" [attr.name]=\\\"name\\\" [attr.value]=\\\"value\\\" [attr.tabindex]=\\\"tabindex\\\" [attr.aria-checked]=\\\"checked\\\" [attr.aria-label]=\\\"ariaLabel\\\"\\n                    [attr.aria-labelledby]=\\\"ariaLabelledBy\\\" [checked]=\\\"checked\\\" (change)=\\\"onChange($event)\\\" (focus)=\\\"onInputFocus($event)\\\" (blur)=\\\"onInputBlur($event)\\\" [disabled]=\\\"disabled\\\">\\n            </div>\\n            <div (click)=\\\"handleClick($event, rb, true)\\\" [ngClass]=\\\"{'p-radiobutton-box':true, 'p-highlight': checked, 'p-disabled': disabled, 'p-focus': focused}\\\">\\n                <span class=\\\"p-radiobutton-icon\\\"></span>\\n            </div>\\n        </div>\\n        <label (click)=\\\"select($event)\\\" [class]=\\\"labelStyleClass\\\"\\n            [ngClass]=\\\"{'p-radiobutton-label':true, 'p-radiobutton-label-active':rb.checked, 'p-disabled':disabled, 'p-radiobutton-label-focus':focused}\\\"\\n            *ngIf=\\\"label\\\" [attr.for]=\\\"inputId\\\">{{label}}</label>\\n    \",\n      providers: [RADIO_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: RadioControlRegistry\n    }];\n  }, {\n    onClick: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    disabled: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    formControlName: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    labelStyleClass: [{\n      type: Input\n    }],\n    inputViewChild: [{\n      type: ViewChild,\n      args: ['rb']\n    }]\n  });\n})();\n\nvar RadioButtonModule = function RadioButtonModule() {\n  _classCallCheck(this, RadioButtonModule);\n};\n\nRadioButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RadioButtonModule\n});\nRadioButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RadioButtonModule_Factory(t) {\n    return new (t || RadioButtonModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RadioButtonModule, {\n    declarations: function declarations() {\n      return [RadioButton];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [RadioButton];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RadioButtonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [RadioButton],\n      declarations: [RadioButton]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RADIO_VALUE_ACCESSOR, RadioButton, RadioButtonModule, RadioControlRegistry };","map":{"version":3,"sources":["../../src/app/components/radiobutton/radiobutton.ts","../../src/app/components/radiobutton/primeng-radiobutton.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,ElementRef,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy, Injectable, Injector, OnInit, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl} from '@angular/forms';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButton),\n    multi: true\n};\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RadioControlRegistry {\n    private accessors: any[] = [];\n\n    add(control: NgControl, accessor: RadioButton) {\n        this.accessors.push([control, accessor]);\n    }\n\n    remove(accessor: RadioButton) {\n        this.accessors = this.accessors.filter((c) => {\n            return c[1] !== accessor;\n        })\n    }\n\n    select(accessor: RadioButton) {\n        this.accessors.forEach((c) => {\n            if (this.isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].writeValue(accessor.value);\n            }\n        });\n    }\n\n    private isSameGroup(controlPair: [NgControl, RadioButton], accessor: RadioButton): boolean {\n        if (!controlPair[0].control) {\n            return false;\n        }\n\n        return controlPair[0].control.root === accessor.control.control.root && controlPair[1].name === accessor.name;\n    }\n}\n\n@Component({\n    selector: 'p-radioButton',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-radiobutton p-component':true,'p-radiobutton-checked': checked, 'p-radiobutton-disabled': disabled, 'p-radiobutton-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #rb type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [attr.value]=\"value\" [attr.tabindex]=\"tabindex\" [attr.aria-checked]=\"checked\" [attr.aria-label]=\"ariaLabel\"\n                    [attr.aria-labelledby]=\"ariaLabelledBy\" [checked]=\"checked\" (change)=\"onChange($event)\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\">\n            </div>\n            <div (click)=\"handleClick($event, rb, true)\" [ngClass]=\"{'p-radiobutton-box':true, 'p-highlight': checked, 'p-disabled': disabled, 'p-focus': focused}\">\n                <span class=\"p-radiobutton-icon\"></span>\n            </div>\n        </div>\n        <label (click)=\"select($event)\" [class]=\"labelStyleClass\"\n            [ngClass]=\"{'p-radiobutton-label':true, 'p-radiobutton-label-active':rb.checked, 'p-disabled':disabled, 'p-radiobutton-label-focus':focused}\"\n            *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [RADIO_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButton implements ControlValueAccessor, OnInit, OnDestroy {\n\n    @Input() value: any;\n\n    @Input() formControlName: string;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n\n    @Input() label: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() ariaLabel: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelStyleClass: string;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('rb') inputViewChild: ElementRef;\n\n    public onModelChange: Function = () => {};\n\n    public onModelTouched: Function = () => {};\n\n    public checked: boolean;\n\n    public focused: boolean;\n\n    control: NgControl;\n\n    constructor(public cd: ChangeDetectorRef, private injector: Injector, private registry: RadioControlRegistry) {}\n\n    ngOnInit() {\n        if (this.formControlName) {\n            this.control = this.injector.get(NgControl);\n            this.checkName();\n            this.registry.add(this.control, this);\n        }\n    }\n    \n    handleClick(event, radioButton, focus) {\n        event.preventDefault();\n\n        if (this.disabled) {\n            return;\n        }\n\n        this.select(event);\n\n        if (focus) {\n            radioButton.focus();\n        }\n    }\n    \n    select(event) {\n        if (!this.disabled) {\n            this.inputViewChild.nativeElement.checked = true;\n            this.checked = true;\n            this.onModelChange(this.value);\n            \n            if (this.formControlName) {\n                this.registry.select(this);\n            }\n\n            this.onClick.emit(event);\n        }\n    }\n\n    writeValue(value: any) : void {\n        this.checked = (value == this.value);\n\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\n            this.inputViewChild.nativeElement.checked = this.checked;\n        }\n\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    onChange(event) {\n        this.select(event);\n    }\n\n    focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    ngOnDestroy() {\n        if (this.formControlName) {\n            this.registry.remove(this);\n        }\n    }\n\n    private checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this.throwNameError();\n        }\n        if (!this.name && this.formControlName) {\n            this.name = this.formControlName;\n        }\n    }\n\n    private throwNameError() {\n        throw new Error(`\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName=\"food\" name=\"food\"></p-radioButton>\n        `);\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [RadioButton],\n    declarations: [RadioButton]\n})\nexport class RadioButtonModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}