import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PageNotificationService } from './../../page-notification/page-notification.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../../page-notification/page-notification.service';
import * as ɵngcc2 from 'primeng/multiselect';
import * as ɵngcc3 from '@angular/forms';

const _c0 = function () { return { width: "100%" }; };
const _c1 = function () { return { standalone: true }; };
export class ShowColumn {
    constructor(pageNotificationService) {
        this.pageNotificationService = pageNotificationService;
        /**
         * lista de colunas disponívels na tabela
         * @type {Array}
         */
        this.options = [];
        /**
         * Valores do select de colunas
         * @type {Array}
         */
        this.values = [];
        /**
         * Último valor válido para o select.
         * @type {Array}
         */
        this.lastValue = [];
        /**
         * Evento para atualizar a visibilidade das colunas da tabela
         * @type {EventEmitter}
         */
        this.updateVisibleColumns = new EventEmitter();
    }
    ngOnInit() {
        this.columns.forEach((column) => {
            const col = { field: column.field, filterType: column.filterType, header: column.header };
            this.options.push(col);
            this.values.push(col);
            this.lastValue.push(col);
        });
    }
    mostrarColunas(event) {
        if (this.values.length) {
            this.lastValue = event.value;
            this.updateVisibleColumns.emit(this.values);
        }
        else {
            this.lastValue.map((item) => this.values.push(item));
            this.pageNotificationService.addErrorMessage('Não é possível exibir menos de uma coluna');
        }
    }
}
ShowColumn.ɵfac = function ShowColumn_Factory(t) { return new (t || ShowColumn)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PageNotificationService)); };
ShowColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShowColumn, selectors: [["basis-show-column"]], inputs: { columns: "columns" }, outputs: { updateVisibleColumns: "updateVisibleColumns" }, decls: 1, vars: 9, consts: [["defaultLabel", "Selecionar colunas", 1, "column", 3, "optionLabel", "displaySelectedLabel", "ngModelOptions", "options", "ngModel", "onChange", "ngModelChange"]], template: function ShowColumn_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p-multiSelect", 0);
        ɵngcc0.ɵɵlistener("onChange", function ShowColumn_Template_p_multiSelect_onChange_0_listener($event) { return ctx.mostrarColunas($event); })("ngModelChange", function ShowColumn_Template_p_multiSelect_ngModelChange_0_listener($event) { return ctx.values = $event; });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(7, _c0));
        ɵngcc0.ɵɵproperty("optionLabel", "header")("displaySelectedLabel", false)("ngModelOptions", ɵngcc0.ɵɵpureFunction0(8, _c1))("options", ctx.options)("ngModel", ctx.values);
    } }, directives: [ɵngcc2.MultiSelect, ɵngcc3.NgControlStatus, ɵngcc3.NgModel], encapsulation: 2 });
ShowColumn.ctorParameters = () => [
    { type: PageNotificationService }
];
ShowColumn.propDecorators = {
    columns: [{ type: Input }],
    updateVisibleColumns: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShowColumn, [{
        type: Component,
        args: [{
                selector: 'basis-show-column',
                template: "<p-multiSelect\n    class=\"column\"\n    defaultLabel=\"Selecionar colunas\"\n    [optionLabel]=\"'header'\"\n    [displaySelectedLabel]=\"false\"\n    [ngModelOptions]=\"{ standalone: true }\"\n    (onChange)=\"mostrarColunas($event)\"\n    [options]=\"options\"\n    [(ngModel)]=\"values\"\n    [style]=\"{ width: '100%' }\">\n</p-multiSelect>\n"
            }]
    }], function () { return [{ type: ɵngcc1.PageNotificationService }]; }, { updateVisibleColumns: [{
            type: Output
        }], columns: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcmltZW5nLWNvbXBvbmVudHMvc3JjL2xpYi9kYXRhdGFibGUvc2hvdy1jb2x1bW4vc2hvdy1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDOzs7Ozs7OztBQU05RixNQUFNLE9BQU8sVUFBVTtBQUFHLElBZ0N0QixZQUFvQix1QkFBZ0Q7QUFBSSxRQUFwRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0FBQUMsUUF4QnJFO0FBQ0o7QUFDSTtBQUVKLFdBRE87QUFDUCxRQUFJLFlBQU8sR0FBVSxFQUFFLENBQUM7QUFDeEIsUUFDSTtBQUNKO0FBQ0k7QUFFSixXQURPO0FBQ1AsUUFBSSxXQUFNLEdBQVUsRUFBRSxDQUFDO0FBQ3ZCLFFBQ0k7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQVksY0FBUyxHQUFVLEVBQUUsQ0FBQztBQUNsQyxRQUNJO0FBQ0o7QUFDSTtBQUVKLFdBRE87QUFDUCxRQUFjLHlCQUFvQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzNFLElBQzJFLENBQUM7QUFDNUUsSUFDSSxRQUFRO0FBQUssUUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO0FBQ3hDLFlBQVksTUFBTSxHQUFHLEdBQUcsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBQyxDQUFDO0FBQ3BHLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNqQyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLGNBQWMsQ0FBQyxLQUFLO0FBQ3hCLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUNoQyxZQUFZLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUN6QyxZQUFZLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELFNBQUc7QUFBQyxhQUFLO0FBQ1QsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNqRSxZQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUM3RixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7c0NBeERDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsbUJBQW1CLGtCQUM3QjttVkFBMkMsY0FDOUM7Ozs7Ozs7dUdBQ0k7QUFBQztBQUFvQyxZQU5qQyx1QkFBdUI7QUFBRztBQUFHO0FBQThCLHNCQVkvRCxLQUFLO0FBQUssbUNBd0JWLE1BQU07QUFBSTs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgUXVlcnlMaXN0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFnZU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLy4uLy4uL3BhZ2Utbm90aWZpY2F0aW9uL3BhZ2Utbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2Jhc2lzLXNob3ctY29sdW1uJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2hvdy1jb2x1bW4uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNob3dDb2x1bW4gaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgLyoqXG4gICAgICogYXRyaWJ1dG8gcXVlIHJlcHJlc2VudGEgYXMgY29sdW5hcyBkYSB0YWJlbGFcbiAgICAgKiBAdHlwZSB7UXVlcnlMaXN0fVxuICAgICAqL1xuICAgIEBJbnB1dCgpIGNvbHVtbnM6IFF1ZXJ5TGlzdDxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogbGlzdGEgZGUgY29sdW5hcyBkaXNwb27DrXZlbHMgbmEgdGFiZWxhXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIG9wdGlvbnM6IGFueVtdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBWYWxvcmVzIGRvIHNlbGVjdCBkZSBjb2x1bmFzXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHZhbHVlczogYW55W10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIMOabHRpbW8gdmFsb3IgdsOhbGlkbyBwYXJhIG8gc2VsZWN0LlxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICBwcml2YXRlIGxhc3RWYWx1ZTogYW55W10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50byBwYXJhIGF0dWFsaXphciBhIHZpc2liaWxpZGFkZSBkYXMgY29sdW5hcyBkYSB0YWJlbGFcbiAgICAgKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuICAgICAqL1xuICAgIEBPdXRwdXQoKSB1cGRhdGVWaXNpYmxlQ29sdW1uczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlOiBQYWdlTm90aWZpY2F0aW9uU2VydmljZSkge31cblxuICAgIG5nT25Jbml0ICgpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sID0ge2ZpZWxkOiBjb2x1bW4uZmllbGQsIGZpbHRlclR5cGU6IGNvbHVtbi5maWx0ZXJUeXBlLCBoZWFkZXI6IGNvbHVtbi5oZWFkZXJ9O1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnB1c2goY29sKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzLnB1c2goY29sKVxuICAgICAgICAgICAgdGhpcy5sYXN0VmFsdWUucHVzaChjb2wpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtb3N0cmFyQ29sdW5hcyhldmVudCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IGV2ZW50LnZhbHVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWaXNpYmxlQ29sdW1ucy5lbWl0KHRoaXMudmFsdWVzKTtcblx0XHR9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXN0VmFsdWUubWFwKChpdGVtKSA9PiB0aGlzLnZhbHVlcy5wdXNoKGl0ZW0pKTtcblx0XHRcdHRoaXMucGFnZU5vdGlmaWNhdGlvblNlcnZpY2UuYWRkRXJyb3JNZXNzYWdlKCdOw6NvIMOpIHBvc3PDrXZlbCBleGliaXIgbWVub3MgZGUgdW1hIGNvbHVuYScpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19