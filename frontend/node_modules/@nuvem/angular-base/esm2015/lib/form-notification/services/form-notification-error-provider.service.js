import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { FormNotificationService } from './form-notification.service';
import { FieldFormNotification } from '../types/field-form-notification.type';
import * as i0 from "@angular/core";
import * as i1 from "./form-notification.service";
/**
 * Provedor de error para criação de erros de notificação.
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './form-notification.service';
export class FormNotificationErrorProvider {
    /**
     * Método construtor
     * @param {FormtNotificationService} formNotificationService
     * @constructor
     */
    constructor(formNotificationService) {
        this.formNotificationService = formNotificationService;
    }
    /**
     * Método responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    shouldHandle(error) {
        return error instanceof HttpErrorResponse &&
            error.headers.get('Content-Type') === 'application/problem+json' &&
            error.error && (error.error.violations || error.error.fieldErrors);
    }
    /**
     * Método para emissão de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error) {
        if (error.error.violations) {
            this.violation(error.url, error.error.violations);
        }
        if (error.error.fieldErrors) {
            this.violation(error.url, error.error.fieldErrors);
        }
    }
    /**
     * Método iteração de violações e emissão de erros
     * @param values
     */
    violation(form, values) {
        values.forEach(violation => this.formNotificationService.notify(new FieldFormNotification(form, violation.field, violation.message)));
    }
}
FormNotificationErrorProvider.ɵfac = function FormNotificationErrorProvider_Factory(t) { return new (t || FormNotificationErrorProvider)(ɵngcc0.ɵɵinject(ɵngcc1.FormNotificationService)); };
FormNotificationErrorProvider.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormNotificationErrorProvider_Factory() { return new FormNotificationErrorProvider(i0.ɵɵinject(i1.FormNotificationService)); }, token: FormNotificationErrorProvider, providedIn: "root" });
FormNotificationErrorProvider.ctorParameters = () => [
    { type: FormNotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationErrorProvider, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.FormNotificationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24tZXJyb3ItcHJvdmlkZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvZm9ybS1ub3RpZmljYXRpb24vc2VydmljZXMvZm9ybS1ub3RpZmljYXRpb24tZXJyb3ItcHJvdmlkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXRFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzlFO0FBRWdDO0FBRGhDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUlILE1BQU0sT0FBTyw2QkFBNkI7QUFBRyxJQUV6QztBQUNKO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFlBQW9CLHVCQUFnRDtBQUFJLFFBQXBELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7QUFBQyxJQUFHLENBQUM7QUFDN0UsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksWUFBWSxDQUFDLEtBQWdDO0FBQUksUUFDN0MsT0FBTyxLQUFLLFlBQVksaUJBQWlCO0FBQ2pELFlBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssMEJBQTBCO0FBQzVFLFlBQVksS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDL0UsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksTUFBTSxDQUFDLEtBQXdCO0FBQUksUUFDL0IsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTtBQUNwQyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzlELFNBQVM7QUFDVCxRQUFRLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUU7QUFDckMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSTtBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxTQUFTLENBQUMsSUFBWSxFQUFFLE1BQThDO0FBQzFFLFFBQVEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUN2QixJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUMvQixJQUFJLHFCQUFxQixDQUNyQixJQUFJLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLElBQUksQ0FBQztBQUNMOzZMQUNBO0FBQUMsNFFBL0NJO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBR2lELFlBWHBELHVCQUF1QjtDQVM1QixEQVQrQjtRQVNyQixFQUFFLE1BQU0sZUFDckI7Ozs7O3dGQVZvQztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBGb3JtTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vZm9ybS1ub3RpZmljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBFcnJvclByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vZXJyb3IvcHJvdmlkZXJzL2Vycm9yLnByb3ZpZGVyJztcbmltcG9ydCB7IEZpZWxkRm9ybU5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3R5cGVzL2ZpZWxkLWZvcm0tbm90aWZpY2F0aW9uLnR5cGUnO1xuXG4vKipcbiAqIFByb3ZlZG9yIGRlIGVycm9yIHBhcmEgY3JpYcOnw6NvIGRlIGVycm9zIGRlIG5vdGlmaWNhw6fDo28uXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybU5vdGlmaWNhdGlvbkVycm9yUHJvdmlkZXIgaW1wbGVtZW50cyBFcnJvclByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gY29uc3RydXRvclxuICAgICAqIEBwYXJhbSB7Rm9ybXROb3RpZmljYXRpb25TZXJ2aWNlfSBmb3JtTm90aWZpY2F0aW9uU2VydmljZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybU5vdGlmaWNhdGlvblNlcnZpY2U6IEZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlKSB7IH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgaWRlbnRpZmljYcOnw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7RXJyb3IgfCBIdHRwRXJyb3JSZXNwb25zZX0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAgICovXG4gICAgc2hvdWxkSGFuZGxlKGVycm9yOiBFcnJvciB8IEh0dHBFcnJvclJlc3BvbnNlKTogQm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlICYmXG4gICAgICAgICAgICBlcnJvci5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgPT09ICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nICYmXG4gICAgICAgICAgICBlcnJvci5lcnJvciAmJiAoZXJyb3IuZXJyb3IudmlvbGF0aW9ucyB8fCBlcnJvci5lcnJvci5maWVsZEVycm9ycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBwYXJhIGVtaXNzw6NvIGRlIGVycm9zXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhhbmRsZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkIHtcbiAgICAgICAgaWYgKGVycm9yLmVycm9yLnZpb2xhdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMudmlvbGF0aW9uKGVycm9yLnVybCwgZXJyb3IuZXJyb3IudmlvbGF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yLmVycm9yLmZpZWxkRXJyb3JzKSB7XG4gICAgICAgICAgICB0aGlzLnZpb2xhdGlvbihlcnJvci51cmwsIGVycm9yLmVycm9yLmZpZWxkRXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gaXRlcmHDp8OjbyBkZSB2aW9sYcOnw7VlcyBlIGVtaXNzw6NvIGRlIGVycm9zXG4gICAgICogQHBhcmFtIHZhbHVlc1xuICAgICAqL1xuICAgIHZpb2xhdGlvbihmb3JtOiBzdHJpbmcsIHZhbHVlczogKHsgZmllbGQ6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nIH0pW10pIHtcbiAgICAgICAgdmFsdWVzLmZvckVhY2godmlvbGF0aW9uID0+XG4gICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZmljYXRpb25TZXJ2aWNlLm5vdGlmeShcbiAgICAgICAgICAgICAgICBuZXcgRmllbGRGb3JtTm90aWZpY2F0aW9uKFxuICAgICAgICAgICAgICAgICAgICBmb3JtLCB2aW9sYXRpb24uZmllbGQsIHZpb2xhdGlvbi5tZXNzYWdlKSkpO1xuICAgIH1cblxufVxuIl19