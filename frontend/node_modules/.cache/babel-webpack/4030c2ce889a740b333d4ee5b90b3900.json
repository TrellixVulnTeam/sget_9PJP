{"ast":null,"code":"import _classCallCheck from \"/home/basis/template/p-lc-aprd_codigo_fonte/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/template/p-lc-aprd_codigo_fonte/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Input, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { PrimeTemplate } from 'primeng/api';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"mask\"];\n\nfunction BlockUI_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c1 = function _c1(a0) {\n  return {\n    \"p-blockui-document\": a0,\n    \"p-blockui p-component-overlay\": true\n  };\n};\n\nvar _c2 = function _c2(a0) {\n  return {\n    display: a0\n  };\n};\n\nvar _c3 = [\"*\"];\n\nvar BlockUI = /*#__PURE__*/function () {\n  function BlockUI(el, cd) {\n    _classCallCheck(this, BlockUI);\n\n    this.el = el;\n    this.cd = cd;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n  }\n\n  _createClass(BlockUI, [{\n    key: \"blocked\",\n    get: function get() {\n      return this._blocked;\n    },\n    set: function set(val) {\n      this._blocked = val;\n\n      if (this.mask && this.mask.nativeElement) {\n        if (this._blocked) this.block();else this.unblock();\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.target && !this.target.getBlockableElement) {\n        throw 'Target of BlockUI must implement BlockableUI interface';\n      }\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'content':\n            _this.contentTemplate = item.template;\n            break;\n\n          default:\n            _this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      if (this.target) {\n        this.target.getBlockableElement().appendChild(this.mask.nativeElement);\n        this.target.getBlockableElement().style.position = 'relative';\n      } else {\n        document.body.appendChild(this.mask.nativeElement);\n      }\n\n      if (this.autoZIndex) {\n        this.mask.nativeElement.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n      }\n    }\n  }, {\n    key: \"unblock\",\n    value: function unblock() {\n      this.el.nativeElement.appendChild(this.mask.nativeElement);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unblock();\n    }\n  }]);\n\n  return BlockUI;\n}();\n\nBlockUI.ɵfac = function BlockUI_Factory(t) {\n  return new (t || BlockUI)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nBlockUI.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BlockUI,\n  selectors: [[\"p-blockUI\"]],\n  contentQueries: function BlockUI_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function BlockUI_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mask = _t.first);\n    }\n  },\n  inputs: {\n    autoZIndex: \"autoZIndex\",\n    baseZIndex: \"baseZIndex\",\n    blocked: \"blocked\",\n    target: \"target\",\n    styleClass: \"styleClass\"\n  },\n  ngContentSelectors: _c3,\n  decls: 4,\n  vars: 9,\n  consts: [[3, \"ngClass\", \"ngStyle\"], [\"mask\", \"\"], [4, \"ngTemplateOutlet\"]],\n  template: function BlockUI_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵtemplate(3, BlockUI_ng_container_3_Template, 1, 0, \"ng-container\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(5, _c1, !ctx.target))(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(7, _c2, ctx.blocked ? \"flex\" : \"none\"));\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate);\n    }\n  },\n  directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet],\n  styles: [\".p-blockui{align-items:center;background-color:transparent;display:flex;height:100%;justify-content:center;left:0;top:0;transition-property:background-color;width:100%}.p-blockui,.p-blockui.p-component-overlay{position:absolute}.p-blockui-document.p-component-overlay{position:fixed}.p-blockui-leave.p-component-overlay{background-color:transparent}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nBlockUI.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nBlockUI.propDecorators = {\n  target: [{\n    type: Input\n  }],\n  autoZIndex: [{\n    type: Input\n  }],\n  baseZIndex: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }],\n  mask: [{\n    type: ViewChild,\n    args: ['mask']\n  }],\n  blocked: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUI, [{\n    type: Component,\n    args: [{\n      selector: 'p-blockUI',\n      template: \"\\n        <div #mask [class]=\\\"styleClass\\\" [ngClass]=\\\"{'p-blockui-document':!target, 'p-blockui p-component-overlay': true}\\\" [ngStyle]=\\\"{display: blocked ? 'flex' : 'none'}\\\">\\n            <ng-content></ng-content>\\n            <ng-container *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-container>\\n        </div>\\n    \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".p-blockui{align-items:center;background-color:transparent;display:flex;height:100%;justify-content:center;left:0;top:0;transition-property:background-color;width:100%}.p-blockui,.p-blockui.p-component-overlay{position:absolute}.p-blockui-document.p-component-overlay{position:fixed}.p-blockui-leave.p-component-overlay{background-color:transparent}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    autoZIndex: [{\n      type: Input\n    }],\n    baseZIndex: [{\n      type: Input\n    }],\n    blocked: [{\n      type: Input\n    }],\n    target: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    mask: [{\n      type: ViewChild,\n      args: ['mask']\n    }]\n  });\n})();\n\nvar BlockUIModule = function BlockUIModule() {\n  _classCallCheck(this, BlockUIModule);\n};\n\nBlockUIModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BlockUIModule\n});\nBlockUIModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BlockUIModule_Factory(t) {\n    return new (t || BlockUIModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIModule, {\n    declarations: function declarations() {\n      return [BlockUI];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [BlockUI];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [BlockUI],\n      declarations: [BlockUI]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockUI, BlockUIModule };","map":{"version":3,"sources":["../../src/app/components/blockui/blockui.ts","../../src/app/components/blockui/primeng-blockui.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,AfterViewInit,OnDestroy,ElementRef,ViewChild,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, ContentChildren, QueryList, TemplateRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {PrimeTemplate} from 'primeng/api';\n\n@Component({\n    selector: 'p-blockUI',\n    template: `\n        <div #mask [class]=\"styleClass\" [ngClass]=\"{'p-blockui-document':!target, 'p-blockui p-component-overlay': true}\" [ngStyle]=\"{display: blocked ? 'flex' : 'none'}\">\n            <ng-content></ng-content>\n            <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./blockui.css']\n})\nexport class BlockUI implements AfterViewInit,OnDestroy {\n\n    @Input() target: any;\n    \n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n    \n    @Input() styleClass: string;\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @ViewChild('mask') mask: ElementRef;\n    \n    _blocked: boolean;\n\n    contentTemplate: TemplateRef<any>;\n        \n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n    \n    @Input() get blocked(): boolean {\n        return this._blocked;\n    }\n    \n    set blocked(val: boolean) {\n        this._blocked = val;\n        \n        if (this.mask && this.mask.nativeElement) {\n            if (this._blocked)\n                this.block();\n            else\n                this.unblock();\n        }\n    }\n    \n    ngAfterViewInit() {\n        if (this.target && !this.target.getBlockableElement) {\n            throw 'Target of BlockUI must implement BlockableUI interface';\n        }\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n                \n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n        \n    block() {\n        if (this.target) {\n            this.target.getBlockableElement().appendChild(this.mask.nativeElement);\n            this.target.getBlockableElement().style.position = 'relative';\n        }\n        else {\n            document.body.appendChild(this.mask.nativeElement);\n        }\n        \n        if (this.autoZIndex) {\n            this.mask.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n    \n    unblock() {\n        this.el.nativeElement.appendChild(this.mask.nativeElement);\n    }\n    \n    ngOnDestroy() {\n        this.unblock();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [BlockUI],\n    declarations: [BlockUI]\n})\nexport class BlockUIModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}