import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PageNotificationService } from './../../page-notification/page-notification.service';
export class ShowColumn {
    constructor(pageNotificationService) {
        this.pageNotificationService = pageNotificationService;
        /**
         * lista de colunas disponívels na tabela
         * @type {Array}
         */
        this.options = [];
        /**
         * Valores do select de colunas
         * @type {Array}
         */
        this.values = [];
        /**
         * Último valor válido para o select.
         * @type {Array}
         */
        this.lastValue = [];
        /**
         * Evento para atualizar a visibilidade das colunas da tabela
         * @type {EventEmitter}
         */
        this.updateVisibleColumns = new EventEmitter();
    }
    ngOnInit() {
        this.columns.forEach((column) => {
            const col = { field: column.field, filterType: column.filterType, header: column.header };
            this.options.push(col);
            this.values.push(col);
            this.lastValue.push(col);
        });
    }
    mostrarColunas(event) {
        if (this.values.length) {
            this.lastValue = event.value;
            this.updateVisibleColumns.emit(this.values);
        }
        else {
            this.lastValue.map((item) => this.values.push(item));
            this.pageNotificationService.addErrorMessage('Não é possível exibir menos de uma coluna');
        }
    }
}
ShowColumn.decorators = [
    { type: Component, args: [{
                selector: 'basis-show-column',
                template: "<p-multiSelect\n    class=\"column\"\n    defaultLabel=\"Selecionar colunas\"\n    [optionLabel]=\"'header'\"\n    [displaySelectedLabel]=\"false\"\n    [ngModelOptions]=\"{ standalone: true }\"\n    (onChange)=\"mostrarColunas($event)\"\n    [options]=\"options\"\n    [(ngModel)]=\"values\"\n    [style]=\"{ width: '100%' }\">\n</p-multiSelect>\n"
            },] }
];
ShowColumn.ctorParameters = () => [
    { type: PageNotificationService }
];
ShowColumn.propDecorators = {
    columns: [{ type: Input }],
    updateVisibleColumns: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJpbWVuZy1jb21wb25lbnRzL3NyYy9saWIvZGF0YXRhYmxlL3Nob3ctY29sdW1uL3Nob3ctY29sdW1uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQU05RixNQUFNLE9BQU8sVUFBVTtJQWdDbkIsWUFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUF4QnBFOzs7V0FHRztRQUNILFlBQU8sR0FBVSxFQUFFLENBQUM7UUFFcEI7OztXQUdHO1FBQ0gsV0FBTSxHQUFVLEVBQUUsQ0FBQztRQUVuQjs7O1dBR0c7UUFDSyxjQUFTLEdBQVUsRUFBRSxDQUFDO1FBRTlCOzs7V0FHRztRQUNPLHlCQUFvQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRUEsQ0FBQztJQUV4RSxRQUFRO1FBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUM1QixNQUFNLEdBQUcsR0FBRyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFDLENBQUM7WUFDeEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQUs7UUFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDN0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckQ7YUFBTTtZQUNHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUNwRjtJQUNMLENBQUM7OztZQXZESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0Isd1dBQTJDO2FBQzlDOzs7WUFMUSx1QkFBdUI7OztzQkFZM0IsS0FBSzttQ0F3QkwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgUXVlcnlMaXN0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFnZU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLy4uLy4uL3BhZ2Utbm90aWZpY2F0aW9uL3BhZ2Utbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2Jhc2lzLXNob3ctY29sdW1uJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2hvdy1jb2x1bW4uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNob3dDb2x1bW4gaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgLyoqXG4gICAgICogYXRyaWJ1dG8gcXVlIHJlcHJlc2VudGEgYXMgY29sdW5hcyBkYSB0YWJlbGFcbiAgICAgKiBAdHlwZSB7UXVlcnlMaXN0fVxuICAgICAqL1xuICAgIEBJbnB1dCgpIGNvbHVtbnM6IFF1ZXJ5TGlzdDxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogbGlzdGEgZGUgY29sdW5hcyBkaXNwb27DrXZlbHMgbmEgdGFiZWxhXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIG9wdGlvbnM6IGFueVtdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBWYWxvcmVzIGRvIHNlbGVjdCBkZSBjb2x1bmFzXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHZhbHVlczogYW55W10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIMOabHRpbW8gdmFsb3IgdsOhbGlkbyBwYXJhIG8gc2VsZWN0LlxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICBwcml2YXRlIGxhc3RWYWx1ZTogYW55W10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50byBwYXJhIGF0dWFsaXphciBhIHZpc2liaWxpZGFkZSBkYXMgY29sdW5hcyBkYSB0YWJlbGFcbiAgICAgKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuICAgICAqL1xuICAgIEBPdXRwdXQoKSB1cGRhdGVWaXNpYmxlQ29sdW1uczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlOiBQYWdlTm90aWZpY2F0aW9uU2VydmljZSkge31cblxuICAgIG5nT25Jbml0ICgpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sID0ge2ZpZWxkOiBjb2x1bW4uZmllbGQsIGZpbHRlclR5cGU6IGNvbHVtbi5maWx0ZXJUeXBlLCBoZWFkZXI6IGNvbHVtbi5oZWFkZXJ9O1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnB1c2goY29sKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzLnB1c2goY29sKVxuICAgICAgICAgICAgdGhpcy5sYXN0VmFsdWUucHVzaChjb2wpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtb3N0cmFyQ29sdW5hcyhldmVudCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RWYWx1ZSA9IGV2ZW50LnZhbHVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWaXNpYmxlQ29sdW1ucy5lbWl0KHRoaXMudmFsdWVzKTtcblx0XHR9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXN0VmFsdWUubWFwKChpdGVtKSA9PiB0aGlzLnZhbHVlcy5wdXNoKGl0ZW0pKTtcblx0XHRcdHRoaXMucGFnZU5vdGlmaWNhdGlvblNlcnZpY2UuYWRkRXJyb3JNZXNzYWdlKCdOw6NvIMOpIHBvc3PDrXZlbCBleGliaXIgbWVub3MgZGUgdW1hIGNvbHVuYScpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19