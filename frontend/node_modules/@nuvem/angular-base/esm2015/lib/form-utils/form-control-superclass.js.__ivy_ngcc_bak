import { Directive } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { DirectiveSuperclass } from "./directive-superclass";
export function noop() { }
;
/**
 * Use in the `providers` of a component that implements `ControlValueAccessor` to reduce some boilerplate.
 *
 * ```ts
 * @Component({ providers: [provideValueAccessor(MyFormControl)] }
 * class MyFormControl extends BaseFormControl {
 *   // ...
 * }
 * ```
 */
export function provideValueAccessor(type) {
    return {
        provide: NG_VALUE_ACCESSOR,
        useExisting: type,
        multi: true,
    };
}
/**
 * Extend this when creating a form control to reduce some boilerplate. **Warning:** You _must_ include a constructor in your subclass.
 *
 * This example allows 2-way binding to a number via `[(ngModel)]`, `[formControl]`, or any other technique that leverages the `ControlValueAccessor` interface.
 * ```ts
 * @Component({
 *   template: `
 *     <button (click)="increment()" [disabled]="isDisabled">{{ counter }}</button>
 *   `,
 *   providers: [provideValueAccessor(CounterComponent)],
 * })
 * class CounterComponent extends FormControlSuperclass<number> {
 *   counter = 0;
 *
 *   // This looks unnecessary, but is required for Angular to provide `Injector`
 *   constructor(injector: Injector) {
 *     super(injector);
 *   }
 *
 *   handleIncomingValue(value: number) {
 *     this.counter = value;
 *   }
 *
 *   increment() {
 *     this.emitOutgoingValue(++this.counter);
 *     this.onTouched();
 *   }
 * }
 * ```
 */
export class FormControlSuperclass extends DirectiveSuperclass {
    constructor() {
        super(...arguments);
        /** Call this to emit a new value when it changes. */
        this.emitOutgoingValue = noop;
        /** Call this to "commit" a change, traditionally done e.g. on blur. */
        this.onTouched = noop;
        /** You can bind to this in your template as needed. */
        this.isDisabled = false;
    }
    /** Called as angular propagates value changes to this `ControlValueAccessor`. You normally do not need to use it. */
    writeValue(value) {
        this.handleIncomingValue(value);
        this.changeDetectorRef.markForCheck();
    }
    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */
    registerOnChange(fn) {
        this.emitOutgoingValue = fn;
    }
    /** Called as angular sets up the binding to this `ControlValueAccessor`. You normally do not need to use it. */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.changeDetectorRef.markForCheck();
    }
}
FormControlSuperclass.decorators = [
    { type: Directive }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLXN1cGVyY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9mb3JtLXV0aWxzL2Zvcm0tY29udHJvbC1zdXBlcmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBUSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTdELE1BQU0sVUFBVSxJQUFJLEtBQUssQ0FBQztBQUFBLENBQUM7QUFFM0I7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLElBQWU7SUFDaEQsT0FBTztRQUNILE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsV0FBVyxFQUFFLElBQUk7UUFDakIsS0FBSyxFQUFFLElBQUk7S0FDZCxDQUFDO0FBQ04sQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTZCRztBQUVILE1BQU0sT0FBZ0IscUJBQXlCLFNBQVEsbUJBQW1CO0lBRDFFOztRQUdJLHFEQUFxRDtRQUNyRCxzQkFBaUIsR0FBdUIsSUFBSSxDQUFDO1FBRTdDLHVFQUF1RTtRQUN2RSxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBRWpCLHVEQUF1RDtRQUN2RCxlQUFVLEdBQUcsS0FBSyxDQUFDO0lBMEJ2QixDQUFDO0lBckJHLHFIQUFxSDtJQUNySCxVQUFVLENBQUMsS0FBUTtRQUNmLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUVELGdIQUFnSDtJQUNoSCxnQkFBZ0IsQ0FBQyxFQUFzQjtRQUNuQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxnSEFBZ0g7SUFDaEgsaUJBQWlCLENBQUMsRUFBZ0I7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELHdIQUF3SDtJQUN4SCxnQkFBZ0IsQ0FBQyxVQUFtQjtRQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7O1lBbkNKLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlLCBEaXJlY3RpdmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmVTdXBlcmNsYXNzIH0gZnJvbSBcIi4vZGlyZWN0aXZlLXN1cGVyY2xhc3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH07XG5cbi8qKlxuICogVXNlIGluIHRoZSBgcHJvdmlkZXJzYCBvZiBhIGNvbXBvbmVudCB0aGF0IGltcGxlbWVudHMgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCB0byByZWR1Y2Ugc29tZSBib2lsZXJwbGF0ZS5cbiAqXG4gKiBgYGB0c1xuICogQENvbXBvbmVudCh7IHByb3ZpZGVyczogW3Byb3ZpZGVWYWx1ZUFjY2Vzc29yKE15Rm9ybUNvbnRyb2wpXSB9XG4gKiBjbGFzcyBNeUZvcm1Db250cm9sIGV4dGVuZHMgQmFzZUZvcm1Db250cm9sIHtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVWYWx1ZUFjY2Vzc29yKHR5cGU6IFR5cGU8YW55Pikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICB1c2VFeGlzdGluZzogdHlwZSxcbiAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBFeHRlbmQgdGhpcyB3aGVuIGNyZWF0aW5nIGEgZm9ybSBjb250cm9sIHRvIHJlZHVjZSBzb21lIGJvaWxlcnBsYXRlLiAqKldhcm5pbmc6KiogWW91IF9tdXN0XyBpbmNsdWRlIGEgY29uc3RydWN0b3IgaW4geW91ciBzdWJjbGFzcy5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgYWxsb3dzIDItd2F5IGJpbmRpbmcgdG8gYSBudW1iZXIgdmlhIGBbKG5nTW9kZWwpXWAsIGBbZm9ybUNvbnRyb2xdYCwgb3IgYW55IG90aGVyIHRlY2huaXF1ZSB0aGF0IGxldmVyYWdlcyB0aGUgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYCBpbnRlcmZhY2UuXG4gKiBgYGB0c1xuICogQENvbXBvbmVudCh7XG4gKiAgIHRlbXBsYXRlOiBgXG4gKiAgICAgPGJ1dHRvbiAoY2xpY2spPVwiaW5jcmVtZW50KClcIiBbZGlzYWJsZWRdPVwiaXNEaXNhYmxlZFwiPnt7IGNvdW50ZXIgfX08L2J1dHRvbj5cbiAqICAgYCxcbiAqICAgcHJvdmlkZXJzOiBbcHJvdmlkZVZhbHVlQWNjZXNzb3IoQ291bnRlckNvbXBvbmVudCldLFxuICogfSlcbiAqIGNsYXNzIENvdW50ZXJDb21wb25lbnQgZXh0ZW5kcyBGb3JtQ29udHJvbFN1cGVyY2xhc3M8bnVtYmVyPiB7XG4gKiAgIGNvdW50ZXIgPSAwO1xuICpcbiAqICAgLy8gVGhpcyBsb29rcyB1bm5lY2Vzc2FyeSwgYnV0IGlzIHJlcXVpcmVkIGZvciBBbmd1bGFyIHRvIHByb3ZpZGUgYEluamVjdG9yYFxuICogICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAqICAgICBzdXBlcihpbmplY3Rvcik7XG4gKiAgIH1cbiAqXG4gKiAgIGhhbmRsZUluY29taW5nVmFsdWUodmFsdWU6IG51bWJlcikge1xuICogICAgIHRoaXMuY291bnRlciA9IHZhbHVlO1xuICogICB9XG4gKlxuICogICBpbmNyZW1lbnQoKSB7XG4gKiAgICAgdGhpcy5lbWl0T3V0Z29pbmdWYWx1ZSgrK3RoaXMuY291bnRlcik7XG4gKiAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZvcm1Db250cm9sU3VwZXJjbGFzczxUPiBleHRlbmRzIERpcmVjdGl2ZVN1cGVyY2xhc3NcbiAgICBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICAvKiogQ2FsbCB0aGlzIHRvIGVtaXQgYSBuZXcgdmFsdWUgd2hlbiBpdCBjaGFuZ2VzLiAqL1xuICAgIGVtaXRPdXRnb2luZ1ZhbHVlOiAodmFsdWU6IFQpID0+IHZvaWQgPSBub29wO1xuXG4gICAgLyoqIENhbGwgdGhpcyB0byBcImNvbW1pdFwiIGEgY2hhbmdlLCB0cmFkaXRpb25hbGx5IGRvbmUgZS5nLiBvbiBibHVyLiAqL1xuICAgIG9uVG91Y2hlZCA9IG5vb3A7XG5cbiAgICAvKiogWW91IGNhbiBiaW5kIHRvIHRoaXMgaW4geW91ciB0ZW1wbGF0ZSBhcyBuZWVkZWQuICovXG4gICAgaXNEaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgLyoqIEltcGxlbWVudCB0aGlzIHRvIGhhbmRsZSBhIG5ldyB2YWx1ZSBjb21pbmcgaW4gZnJvbSBvdXRzaWRlLiAqL1xuICAgIGFic3RyYWN0IGhhbmRsZUluY29taW5nVmFsdWUodmFsdWU6IFQpOiB2b2lkO1xuXG4gICAgLyoqIENhbGxlZCBhcyBhbmd1bGFyIHByb3BhZ2F0ZXMgdmFsdWUgY2hhbmdlcyB0byB0aGlzIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAuIFlvdSBub3JtYWxseSBkbyBub3QgbmVlZCB0byB1c2UgaXQuICovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogVCkge1xuICAgICAgICB0aGlzLmhhbmRsZUluY29taW5nVmFsdWUodmFsdWUpO1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cblxuICAgIC8qKiBDYWxsZWQgYXMgYW5ndWxhciBzZXRzIHVwIHRoZSBiaW5kaW5nIHRvIHRoaXMgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYC4gWW91IG5vcm1hbGx5IGRvIG5vdCBuZWVkIHRvIHVzZSBpdC4gKi9cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IFQpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5lbWl0T3V0Z29pbmdWYWx1ZSA9IGZuO1xuICAgIH1cblxuICAgIC8qKiBDYWxsZWQgYXMgYW5ndWxhciBzZXRzIHVwIHRoZSBiaW5kaW5nIHRvIHRoaXMgYENvbnRyb2xWYWx1ZUFjY2Vzc29yYC4gWW91IG5vcm1hbGx5IGRvIG5vdCBuZWVkIHRvIHVzZSBpdC4gKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogVm9pZEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gICAgfVxuXG4gICAgLyoqIENhbGxlZCBhcyBhbmd1bGFyIHByb3BhZ2F0ZXMgZGlzYWJsZWQgY2hhbmdlcyB0byB0aGlzIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAuIFlvdSBub3JtYWxseSBkbyBub3QgbmVlZCB0byB1c2UgaXQuICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuaXNEaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxufVxuIl19