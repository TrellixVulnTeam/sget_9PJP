{"version":3,"file":"injectable-superclass.d.ts","sources":["injectable-superclass.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy } from \"@angular/core\";\nimport { Observable, Unsubscribable } from \"rxjs\";\n/**\n * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.\n *\n * ```ts\n * @Injectable()\n * // or @Component() (also consider DirectiveSuperclass)\n * // or @Directive() (also consider DirectiveSuperclass)\n * // or @Pipe()\n * class MyThing extends InjectableSuperclass {\n *   constructor(somethingObservable: Observable) {\n *     super();\n *     this.subscribeTo(somethingObservable);\n *   }\n *\n *   ngOnDestroy() {\n *     // if you override ngOnDestroy, be sure to call this too\n *     super.ngOnDestroy();\n *   }\n * }\n * ```\n */\nexport declare abstract class InjectableSuperclass implements Unsubscribable, OnDestroy {\n    private subscriptions;\n    destruction$: Observable<undefined>;\n    private destructionSubject;\n    constructor();\n    subscribeTo<T>(observable: Observable<T>, next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): void;\n    unsubscribe(): void;\n    private bind;\n    ngOnDestroy(): void;\n}\n"]}