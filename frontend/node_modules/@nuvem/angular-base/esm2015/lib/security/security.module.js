import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LogoutDirective } from './authentication/logout.directive';
import { UserDirective } from './authentication/user.directive';
import { LoginSuccessComponent } from './authentication/login-success.component';
import { HasRoleDirective } from './authentication/authorization/has-role.directive';
import { RouterModule } from '@angular/router';
import { HttpClientModule } from '@angular/common/http';
import { HideWhileLoginComponent } from './authentication/hide-while-login.component';
import { AUTH_CONFIG } from './config/auth-config';
import { AuthorizationService } from './authentication/authorization/authorization.service';
import { AuthenticationService } from './authentication/authentication.service';
import { Authorization } from './authentication/authorization/authorization';
import { Authentication } from './authentication/authentication';
import { NotAuthenticatedErrorProvider } from './authentication/not-authenticated-error-provider.service';
import { ErrorProvider } from '../error/providers/error.provider';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { JWTAuthInterceptor } from './token/jwt-auth.interceptor';
import { Token } from './token/token';
import { JWTTokenService } from './token/jwt-token.service';
/**
 * O modulo de segurança contem funcionalidades para autenticação, autorização, redirecionamento
 * para login, gerenciamento de tokens JWT e obtenção e armazenamento de dados de usuário.
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export class SecurityModule {
    /**
     * forRoot method
     * @public
     * @static
     * @returns ModuleWithProviders
     */
    static forRoot(config) {
        return {
            ngModule: SecurityModule,
            providers: [
                { provide: AUTH_CONFIG, useValue: config },
                config.tokenStorageIndex ?
                    [
                        { provide: Token, useClass: JWTTokenService },
                        { provide: HTTP_INTERCEPTORS, useClass: JWTAuthInterceptor, multi: true }
                    ] : []
            ]
        };
    }
}
SecurityModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SecurityModule });
SecurityModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SecurityModule_Factory(t) { return new (t || SecurityModule)(); }, providers: [
        AuthorizationService,
        AuthenticationService,
        { provide: ErrorProvider, useClass: NotAuthenticatedErrorProvider, multi: true },
        { provide: Authorization, useClass: AuthorizationService },
        { provide: Authentication, useClass: AuthenticationService }
    ], imports: [[
            CommonModule,
            RouterModule,
            HttpClientModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SecurityModule, { declarations: function () { return [LogoutDirective,
        UserDirective,
        LoginSuccessComponent,
        HasRoleDirective,
        HideWhileLoginComponent]; }, imports: function () { return [CommonModule,
        RouterModule,
        HttpClientModule]; }, exports: function () { return [LogoutDirective,
        UserDirective,
        LoginSuccessComponent,
        HasRoleDirective,
        HideWhileLoginComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SecurityModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    HttpClientModule
                ],
                declarations: [
                    LogoutDirective,
                    UserDirective,
                    LoginSuccessComponent,
                    HasRoleDirective,
                    HideWhileLoginComponent
                ],
                providers: [
                    AuthorizationService,
                    AuthenticationService,
                    { provide: ErrorProvider, useClass: NotAuthenticatedErrorProvider, multi: true },
                    { provide: Authorization, useClass: AuthorizationService },
                    { provide: Authentication, useClass: AuthenticationService }
                ],
                exports: [
                    LogoutDirective,
                    UserDirective,
                    LoginSuccessComponent,
                    HasRoleDirective,
                    HideWhileLoginComponent
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9zZWN1cml0eS9zZWN1cml0eS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDakYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDckYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxXQUFXLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM1RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBQzFHLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUU1RDtBQUNBO0FBQWlHO0FBQ1A7QUFDakYsR0FDTjs7QUE2QkgsTUFBTSxPQUFPLGNBQWM7QUFDM0IsSUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFrQjtBQUFJLFFBQ2pDLE9BQU87QUFBRSxZQUNMLFFBQVEsRUFBRSxjQUFjO0FBQUUsWUFDMUIsU0FBUyxFQUFFO0FBQ3ZCLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtBQUMxRCxnQkFBZ0IsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFBQyxvQkFDekI7QUFBRSx3QkFDQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTtBQUNqRSx3QkFBb0IsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDN0YscUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDeEIsYUFBYTtBQUNiLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMOzBDQWpEQyxRQUFRLFNBQUM7SUFDTixPQUFPLEVBQUUsc0JBQ0wsWUFBWSxzQkFDWixZQUFZLHNCQUNaLGdCQUFnQixrQkFDbkI7U0FDRCxZQUFZLEVBQUU7ZUFDVixlQUFlO3FCQUNmLGFBQWEsc0JBQ2IscUJBQXFCO1NBQ3JCLGdCQUFnQixzQkFDaEI7RUFBdUIsa0JBQzFCLGtCQUNELFNBQVMsRUFBRTtFQUNQO0dBQW9CLHNCQUNwQjtvQkFBcUI7Z0JBQ3JCLEVBQUUsT0FBTyxFQUFFO1dBQWEsRUFBRTtNQUFRLEVBQUUsNkJBQTZCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxzQkFDaEYsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxzQkFDMUQsRUFBRTtBQUFPLEVBQUUsY0FBYyxFQUFFO0dBQVEsRUFBRSxxQkFBcUIsRUFBRTtlQUMvRDtPQUNELE9BQU8sRUFBRSxzQkFDTCxlQUFlLHNCQUNmO01BQWE7TUFDYixxQkFBcUIsc0JBQ3JCLGdCQUFnQjtTQUNoQjtTQUF1QixrQkFDMUI7VUFDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTG9nb3V0RGlyZWN0aXZlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi9sb2dvdXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFVzZXJEaXJlY3RpdmUgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL3VzZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IExvZ2luU3VjY2Vzc0NvbXBvbmVudCB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vbG9naW4tc3VjY2Vzcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGFzUm9sZURpcmVjdGl2ZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbi9oYXMtcm9sZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIaWRlV2hpbGVMb2dpbkNvbXBvbmVudCB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vaGlkZS13aGlsZS1sb2dpbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQVVUSF9DT05GSUcsIEF1dGhDb25maWcgfSBmcm9tICcuL2NvbmZpZy9hdXRoLWNvbmZpZyc7XG5pbXBvcnQgeyBBdXRob3JpemF0aW9uU2VydmljZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vYXV0aG9yaXphdGlvbi9hdXRob3JpemF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGhvcml6YXRpb24gfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL2F1dGhvcml6YXRpb24vYXV0aG9yaXphdGlvbic7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4vYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24nO1xuaW1wb3J0IHsgTm90QXV0aGVudGljYXRlZEVycm9yUHJvdmlkZXIgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL25vdC1hdXRoZW50aWNhdGVkLWVycm9yLXByb3ZpZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXJyb3JQcm92aWRlciB9IGZyb20gJy4uL2Vycm9yL3Byb3ZpZGVycy9lcnJvci5wcm92aWRlcic7XG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEpXVEF1dGhJbnRlcmNlcHRvciB9IGZyb20gJy4vdG9rZW4vand0LWF1dGguaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuL3Rva2VuL3Rva2VuJztcbmltcG9ydCB7IEpXVFRva2VuU2VydmljZSB9IGZyb20gJy4vdG9rZW4vand0LXRva2VuLnNlcnZpY2UnO1xuXG4vKipcbiAqIE8gbW9kdWxvIGRlIHNlZ3VyYW7Dp2EgY29udGVtIGZ1bmNpb25hbGlkYWRlcyBwYXJhIGF1dGVudGljYcOnw6NvLCBhdXRvcml6YcOnw6NvLCByZWRpcmVjaW9uYW1lbnRvIFxuICogcGFyYSBsb2dpbiwgZ2VyZW5jaWFtZW50byBkZSB0b2tlbnMgSldUIGUgb2J0ZW7Dp8OjbyBlIGFybWF6ZW5hbWVudG8gZGUgZGFkb3MgZGUgdXN1w6FyaW8uXG4gKiBAY2xhc3NcbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgUm91dGVyTW9kdWxlLFxuICAgICAgICBIdHRwQ2xpZW50TW9kdWxlXG4gICAgXSxcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgTG9nb3V0RGlyZWN0aXZlLFxuICAgICAgICBVc2VyRGlyZWN0aXZlLFxuICAgICAgICBMb2dpblN1Y2Nlc3NDb21wb25lbnQsXG4gICAgICAgIEhhc1JvbGVEaXJlY3RpdmUsXG4gICAgICAgIEhpZGVXaGlsZUxvZ2luQ29tcG9uZW50XG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQXV0aG9yaXphdGlvblNlcnZpY2UsXG4gICAgICAgIEF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgeyBwcm92aWRlOiBFcnJvclByb3ZpZGVyLCB1c2VDbGFzczogTm90QXV0aGVudGljYXRlZEVycm9yUHJvdmlkZXIsIG11bHRpOiB0cnVlIH0sXG4gICAgICAgIHsgcHJvdmlkZTogQXV0aG9yaXphdGlvbiwgdXNlQ2xhc3M6IEF1dGhvcml6YXRpb25TZXJ2aWNlIH0sXG4gICAgICAgIHsgcHJvdmlkZTogQXV0aGVudGljYXRpb24sIHVzZUNsYXNzOiBBdXRoZW50aWNhdGlvblNlcnZpY2UgfVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBMb2dvdXREaXJlY3RpdmUsXG4gICAgICAgIFVzZXJEaXJlY3RpdmUsXG4gICAgICAgIExvZ2luU3VjY2Vzc0NvbXBvbmVudCxcbiAgICAgICAgSGFzUm9sZURpcmVjdGl2ZSxcbiAgICAgICAgSGlkZVdoaWxlTG9naW5Db21wb25lbnRcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFNlY3VyaXR5TW9kdWxlIHtcblxuICAgIC8qKlxuICAgICAqIGZvclJvb3QgbWV0aG9kXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcmV0dXJucyBNb2R1bGVXaXRoUHJvdmlkZXJzXG4gICAgICovXG4gICAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBBdXRoQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxTZWN1cml0eU1vZHVsZT4ge1xuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIG5nTW9kdWxlOiBTZWN1cml0eU1vZHVsZSwgXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEFVVEhfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH0sXG4gICAgICAgICAgICAgICAgY29uZmlnLnRva2VuU3RvcmFnZUluZGV4ID8gXG4gICAgICAgICAgICAgICAgICBbIFxuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFRva2VuLCB1c2VDbGFzczogSldUVG9rZW5TZXJ2aWNlIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBKV1RBdXRoSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgIF0gOiBbXVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cblxufVxuIl19