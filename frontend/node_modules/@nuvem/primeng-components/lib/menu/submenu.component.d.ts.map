{"version":3,"file":"submenu.component.d.ts","sources":["submenu.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { MenusService } from './menu.service';\nimport { Subscription } from 'rxjs';\nimport { Router } from '@angular/router';\nexport declare class SubMenuComponent {\n    menuService: MenusService;\n    router: Router;\n    item: any;\n    root: boolean;\n    visible: boolean;\n    parentKey: string;\n    index: number;\n    active: boolean;\n    _reset: boolean;\n    _parentActive: boolean;\n    activeIndex: number;\n    key: string;\n    menuSourceSubscription: Subscription;\n    menuResetSubscription: Subscription;\n    constructor(menuService: MenusService, router: Router);\n    updateActiveStateFromRoute(): void;\n    /**\n     * Alterar o menu root entre aberto e fechado\n     */\n    private rootMenuToggle;\n    /**\n     * Activa o menu por index e desativa o item ativo\n     * @param index\n     */\n    private activeMenuByIndex;\n    /**\n     * Verifica se foi informado um comando para o item de menu e executa caso necessário\n     * @param item menu\n     */\n    private execCommand;\n    /**\n     * Esconte o menu caso este não possua itens\n     * @param item menu\n     */\n    private hideMenu;\n    itemClick(event: Event): boolean;\n    onMouseEnter(): void;\n    isActive(index: number): boolean;\n    get reset(): boolean;\n    set reset(val: boolean);\n    get parentActive(): boolean;\n    set parentActive(val: boolean);\n    removeActiveInk(event: Event): void;\n    ngOnDestroy(): void;\n}\n"]}