import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 *
 * Class CommonMaskService serviço para inserção de mascara de data em campos input
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export class CommonMaskService {
    constructor() {
        /**
         * DATE_SEPARATOR property
         * @type {string}
         */
        this.DATE_SEPARATOR = '/';
    }
    /**
     * Metodo para formatar valor digitado no padrão dd/mm/yyyy
     * @param $event
     * @returns void
     */
    dateMask($event) {
        if ($event.target.value) {
            let date = $event.target.value.replace(/[^0-9]/g, '').substr(0, 8);
            if (date.length >= 3) {
                date = date.replace(/^(\d{2})(\d{1,2})/, '$1' + this.DATE_SEPARATOR + '$2');
            }
            if (date.length >= 6) {
                date = date.replace(/^(\S{5})(\d{1,4})/, '$1' + this.DATE_SEPARATOR + '$2');
            }
            $event.target.value = date;
        }
    }
}
CommonMaskService.ɵfac = function CommonMaskService_Factory(t) { return new (t || CommonMaskService)(); };
CommonMaskService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CommonMaskService_Factory() { return new CommonMaskService(); }, token: CommonMaskService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CommonMaskService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLW1hc2suc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvY29tbW9uLW1hc2svY29tbW9uLW1hc2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBVSxHQUNQOztBQUlILE1BQU0sT0FBTyxpQkFBaUI7QUFDOUIsSUFKQTtBQUNFLFFBSUU7QUFDSjtBQUNJO0FBRUosV0FETztBQUNQLFFBQXFCLG1CQUFjLEdBQUcsR0FBRyxDQUFDO0FBQzFDLEtBcUJDO0FBQ0QsSUFyQkk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxRQUFRLENBQUMsTUFBTTtBQUNuQixRQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7QUFDakMsWUFBWSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0UsWUFDWSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ2xDLGdCQUFjLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzFGLGFBQWE7QUFDYixZQUNZLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFDbEMsZ0JBQWMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDMUYsYUFBYTtBQUNiLFlBQ1ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ3ZDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDswR0FBQztBQUNEOzZDQWhDQyxVQUFVLFNBQUMsa0JBQ1YsVUFBVSxFQUFFLE1BQU07RUFDbkI7Ozs7Z0RBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKlxuICogQ2xhc3MgQ29tbW9uTWFza1NlcnZpY2Ugc2VydmnDp28gcGFyYSBpbnNlcsOnw6NvIGRlIG1hc2NhcmEgZGUgZGF0YSBlbSBjYW1wb3MgaW5wdXRcbiAqIEBjbGFzcyBcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENvbW1vbk1hc2tTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIERBVEVfU0VQQVJBVE9SIHByb3BlcnR5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IERBVEVfU0VQQVJBVE9SID0gJy8nO1xuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHBhcmEgZm9ybWF0YXIgdmFsb3IgZGlnaXRhZG8gbm8gcGFkcsOjbyBkZC9tbS95eXl5XG4gICAgICogQHBhcmFtICRldmVudFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBkYXRlTWFzaygkZXZlbnQpIHtcbiAgICAgICAgaWYgKCRldmVudC50YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBkYXRlID0gJGV2ZW50LnRhcmdldC52YWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpLnN1YnN0cigwLCA4KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGUubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgZGF0ZSA9IGRhdGUucmVwbGFjZSgvXihcXGR7Mn0pKFxcZHsxLDJ9KS8sICckMScgKyB0aGlzLkRBVEVfU0VQQVJBVE9SICsgJyQyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYXRlLmxlbmd0aCA+PSA2KSB7XG4gICAgICAgICAgICAgIGRhdGUgPSBkYXRlLnJlcGxhY2UoL14oXFxTezV9KShcXGR7MSw0fSkvLCAnJDEnICsgdGhpcy5EQVRFX1NFUEFSQVRPUiArICckMicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkZXZlbnQudGFyZ2V0LnZhbHVlID0gZGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==