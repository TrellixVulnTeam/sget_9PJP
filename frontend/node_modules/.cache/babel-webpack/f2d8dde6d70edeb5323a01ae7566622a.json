{"ast":null,"code":"import _toConsumableArray from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, ElementRef, NgZone, Input, Output, ViewChild, ContentChildren, ChangeDetectorRef, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { FilterService, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport { RippleModule } from 'primeng/ripple';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'primeng/api';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from 'primeng/paginator';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from 'primeng/ripple';\nvar _c0 = [\"container\"];\nvar _c1 = [\"resizeHelper\"];\nvar _c2 = [\"reorderIndicatorUp\"];\nvar _c3 = [\"reorderIndicatorDown\"];\nvar _c4 = [\"table\"];\nvar _c5 = [\"scrollableView\"];\nvar _c6 = [\"scrollableFrozenView\"];\n\nfunction TreeTable_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵelement(2, \"i\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassMap(\"p-treetable-loading-icon pi-spin \" + ctx_r1.loadingIcon);\n  }\n}\n\nfunction TreeTable_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtemplate(1, TreeTable_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.captionTemplate);\n  }\n}\n\nfunction TreeTable_p_paginator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"p-paginator\", 16);\n    ɵngcc0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onPageChange($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"rows\", ctx_r3.rows)(\"first\", ctx_r3.first)(\"totalRecords\", ctx_r3.totalRecords)(\"pageLinkSize\", ctx_r3.pageLinks)(\"alwaysShow\", ctx_r3.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r3.rowsPerPageOptions)(\"templateLeft\", ctx_r3.paginatorLeftTemplate)(\"templateRight\", ctx_r3.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r3.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r3.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r3.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r3.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r3.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r3.showJumpToPageDropdown)(\"showPageLinks\", ctx_r3.showPageLinks);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c7 = function _c7(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction TreeTable_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 17);\n    ɵngcc0.ɵɵelementStart(1, \"table\", 18, 19);\n    ɵngcc0.ɵɵtemplate(3, TreeTable_div_5_ng_container_3_Template, 1, 0, \"ng-container\", 20);\n    ɵngcc0.ɵɵelementStart(4, \"thead\", 21);\n    ɵngcc0.ɵɵtemplate(5, TreeTable_div_5_ng_container_5_Template, 1, 0, \"ng-container\", 20);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(6, \"tbody\", 22);\n    ɵngcc0.ɵɵelementStart(7, \"tfoot\", 23);\n    ɵngcc0.ɵɵtemplate(8, TreeTable_div_5_ng_container_8_Template, 1, 0, \"ng-container\", 20);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.tableStyleClass)(\"ngStyle\", ctx_r4.tableStyle);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.colGroupTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(10, _c7, ctx_r4.columns));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.headerTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(12, _c7, ctx_r4.columns));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.bodyTemplate);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.footerTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(14, _c7, ctx_r4.columns));\n  }\n}\n\nvar _c8 = function _c8(a0) {\n  return {\n    width: a0\n  };\n};\n\nfunction TreeTable_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 28, 29);\n  }\n\n  if (rf & 2) {\n    var ctx_r18 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ttScrollableView\", ctx_r18.frozenColumns)(\"frozen\", true)(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(4, _c8, ctx_r18.frozenWidth))(\"scrollHeight\", ctx_r18.scrollHeight);\n  }\n}\n\nvar _c9 = function _c9(a0, a1) {\n  return {\n    left: a0,\n    width: a1\n  };\n};\n\nfunction TreeTable_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 24);\n    ɵngcc0.ɵɵtemplate(1, TreeTable_div_6_div_1_Template, 2, 6, \"div\", 25);\n    ɵngcc0.ɵɵelement(2, \"div\", 26, 27);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.frozenColumns || ctx_r5.frozenBodyTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ttScrollableView\", ctx_r5.columns)(\"frozen\", false)(\"scrollHeight\", ctx_r5.scrollHeight)(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(5, _c9, ctx_r5.frozenWidth, \"calc(100% - \" + ctx_r5.frozenWidth + \")\"));\n  }\n}\n\nfunction TreeTable_p_paginator_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"p-paginator\", 30);\n    ɵngcc0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.onPageChange($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"rows\", ctx_r6.rows)(\"first\", ctx_r6.first)(\"totalRecords\", ctx_r6.totalRecords)(\"pageLinkSize\", ctx_r6.pageLinks)(\"alwaysShow\", ctx_r6.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r6.rowsPerPageOptions)(\"templateLeft\", ctx_r6.paginatorLeftTemplate)(\"templateRight\", ctx_r6.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r6.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r6.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r6.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r6.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r6.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r6.showJumpToPageDropdown)(\"showPageLinks\", ctx_r6.showPageLinks);\n  }\n}\n\nfunction TreeTable_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 31);\n    ɵngcc0.ɵɵtemplate(1, TreeTable_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.summaryTemplate);\n  }\n}\n\nfunction TreeTable_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 32, 33);\n  }\n}\n\nfunction TreeTable_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 34, 35);\n  }\n}\n\nfunction TreeTable_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 36, 37);\n  }\n}\n\nvar _c10 = function _c10(a1, a2, a3, a4, a5) {\n  return {\n    \"p-treetable p-component\": true,\n    \"p-treetable-hoverable-rows\": a1,\n    \"p-treetable-auto-layout\": a2,\n    \"p-treetable-resizable\": a3,\n    \"p-treetable-resizable-fit\": a4,\n    \"p-treetable-flex-scrollable\": a5\n  };\n};\n\nvar _c11 = [\"pTreeTableBody\", \"\"];\n\nfunction TTBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c12 = function _c12(a0, a1, a2, a3) {\n  return {\n    $implicit: a0,\n    node: a1,\n    rowData: a2,\n    columns: a3\n  };\n};\n\nfunction TTBody_ng_container_0_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TTBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var serializedNode_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction4(2, _c12, serializedNode_r4, serializedNode_r4.node, serializedNode_r4.node.data, ctx_r6.columns));\n  }\n}\n\nfunction TTBody_ng_container_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TTBody_ng_container_0_ng_template_1_ng_container_0_Template, 2, 7, \"ng-container\", 0);\n  }\n\n  if (rf & 2) {\n    var serializedNode_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"ngIf\", serializedNode_r4.visible);\n  }\n}\n\nfunction TTBody_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TTBody_ng_container_0_ng_template_1_Template, 1, 1, \"ng-template\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.tt.serializedValue)(\"ngForTrackBy\", ctx_r0.tt.rowTrackBy);\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TTBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var serializedNode_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r12.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction4(2, _c12, serializedNode_r10, serializedNode_r10.node, serializedNode_r10.node.data, ctx_r12.columns));\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TTBody_ng_container_1_ng_template_1_ng_container_0_Template, 2, 7, \"ng-container\", 0);\n  }\n\n  if (rf & 2) {\n    var serializedNode_r10 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"ngIf\", serializedNode_r10.visible);\n  }\n}\n\nfunction TTBody_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TTBody_ng_container_1_ng_template_1_Template, 1, 1, \"ng-template\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r1.tt.serializedValue)(\"cdkVirtualForTrackBy\", ctx_r1.tt.rowTrackBy)(\"cdkVirtualForTemplateCacheSize\", 0);\n  }\n}\n\nfunction TTBody_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c13 = function _c13(a0, a1) {\n  return {\n    $implicit: a0,\n    frozen: a1\n  };\n};\n\nfunction TTBody_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TTBody_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tt.emptyMessageTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(2, _c13, ctx_r2.columns, ctx_r2.frozen));\n  }\n}\n\nvar _c14 = [\"scrollHeader\"];\nvar _c15 = [\"scrollHeaderBox\"];\nvar _c16 = [\"scrollBody\"];\nvar _c17 = [\"scrollTable\"];\nvar _c18 = [\"loadingTable\"];\nvar _c19 = [\"scrollFooter\"];\nvar _c20 = [\"scrollFooterBox\"];\nvar _c21 = [\"scrollableAligner\"];\nvar _c22 = [\"ttScrollableView\", \"\"];\n\nfunction TTScrollableView_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_8_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_8_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 16, 17);\n  }\n}\n\nvar _c23 = function _c23(a0, a1) {\n  return {\n    \"max-height\": a0,\n    \"overflow-y\": a1\n  };\n};\n\nfunction TTScrollableView_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 10, 11);\n    ɵngcc0.ɵɵelementStart(3, \"table\", 12, 13);\n    ɵngcc0.ɵɵtemplate(5, TTScrollableView_ng_container_8_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    ɵngcc0.ɵɵelement(6, \"tbody\", 14);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(7, TTScrollableView_ng_container_8_div_7_Template, 2, 0, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.tt.scrollHeight !== \"flex\" ? ctx_r4.scrollHeight : undefined, !ctx_r4.frozen && ctx_r4.tt.scrollHeight ? \"scroll\" : undefined));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassMap(ctx_r4.tt.tableStyleClass);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r4.tt.tableStyle);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.frozen ? ctx_r4.tt.frozenColGroupTemplate || ctx_r4.tt.colGroupTemplate : ctx_r4.tt.colGroupTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(13, _c7, ctx_r4.columns));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.frozen ? ctx_r4.tt.frozenBodyTemplate || ctx_r4.tt.bodyTemplate : ctx_r4.tt.bodyTemplate)(\"frozen\", ctx_r4.frozen);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.frozen);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 16, 17);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 18);\n    ɵngcc0.ɵɵelementStart(1, \"table\", 12, 13);\n    ɵngcc0.ɵɵtemplate(3, TTScrollableView_ng_template_9_ng_container_3_Template, 1, 0, \"ng-container\", 5);\n    ɵngcc0.ɵɵelement(4, \"tbody\", 14);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(5, TTScrollableView_ng_template_9_div_5_Template, 2, 0, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r6.tt.scrollHeight !== \"flex\" ? ctx_r6.scrollHeight : undefined);\n    ɵngcc0.ɵɵproperty(\"itemSize\", ctx_r6.tt.virtualRowHeight)(\"minBufferPx\", ctx_r6.tt.minBufferPx)(\"maxBufferPx\", ctx_r6.tt.maxBufferPx);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(ctx_r6.tt.tableStyleClass);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r6.tt.tableStyle);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.frozen ? ctx_r6.tt.frozenColGroupTemplate || ctx_r6.tt.colGroupTemplate : ctx_r6.tt.colGroupTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(14, _c7, ctx_r6.columns));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"pTreeTableBody\", ctx_r6.columns)(\"pTreeTableBodyTemplate\", ctx_r6.frozen ? ctx_r6.tt.frozenBodyTemplate || ctx_r6.tt.bodyTemplate : ctx_r6.tt.bodyTemplate)(\"frozen\", ctx_r6.frozen);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.frozen);\n  }\n}\n\nfunction TTScrollableView_div_11_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_div_11_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19, 20);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 21, 22);\n    ɵngcc0.ɵɵelementStart(4, \"table\", 23);\n    ɵngcc0.ɵɵtemplate(5, TTScrollableView_div_11_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementStart(6, \"tfoot\", 24);\n    ɵngcc0.ɵɵtemplate(7, TTScrollableView_div_11_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r7.tt.tableStyleClass)(\"ngStyle\", ctx_r7.tt.tableStyle);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenColGroupTemplate || ctx_r7.tt.colGroupTemplate : ctx_r7.tt.colGroupTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(6, _c7, ctx_r7.columns));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenFooterTemplate || ctx_r7.tt.footerTemplate : ctx_r7.tt.footerTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(8, _c7, ctx_r7.columns));\n  }\n}\n\nvar _c24 = function _c24(a0, a1, a2) {\n  return {\n    \"pi-sort-amount-up-alt\": a0,\n    \"pi-sort-amount-down\": a1,\n    \"pi-sort-alt\": a2\n  };\n};\n\nvar _c25 = [\"box\"];\n\nvar _c26 = function _c26(a1, a2) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-disabled\": a2\n  };\n};\n\nvar _c27 = function _c27(a0, a1) {\n  return {\n    \"pi-check\": a0,\n    \"pi-minus\": a1\n  };\n};\n\nvar _c28 = function _c28(a0) {\n  return {\n    \"pi pi-check\": a0\n  };\n};\n\nfunction TreeTableCellEditor_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.inputTemplate);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.outputTemplate);\n  }\n}\n\nvar TreeTableService = /*#__PURE__*/function () {\n  function TreeTableService() {\n    _classCallCheck(this, TreeTableService);\n\n    this.sortSource = new Subject();\n    this.selectionSource = new Subject();\n    this.contextMenuSource = new Subject();\n    this.uiUpdateSource = new Subject();\n    this.totalRecordsSource = new Subject();\n    this.sortSource$ = this.sortSource.asObservable();\n    this.selectionSource$ = this.selectionSource.asObservable();\n    this.contextMenuSource$ = this.contextMenuSource.asObservable();\n    this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n  }\n\n  _createClass(TreeTableService, [{\n    key: \"onSort\",\n    value: function onSort(sortMeta) {\n      this.sortSource.next(sortMeta);\n    }\n  }, {\n    key: \"onSelectionChange\",\n    value: function onSelectionChange() {\n      this.selectionSource.next();\n    }\n  }, {\n    key: \"onContextMenu\",\n    value: function onContextMenu(node) {\n      this.contextMenuSource.next(node);\n    }\n  }, {\n    key: \"onUIUpdate\",\n    value: function onUIUpdate(value) {\n      this.uiUpdateSource.next(value);\n    }\n  }, {\n    key: \"onTotalRecordsChange\",\n    value: function onTotalRecordsChange(value) {\n      this.totalRecordsSource.next(value);\n    }\n  }]);\n\n  return TreeTableService;\n}();\n\nTreeTableService.ɵfac = function TreeTableService_Factory(t) {\n  return new (t || TreeTableService)();\n};\n\nTreeTableService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TreeTableService,\n  factory: TreeTableService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeTableService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar TreeTable = /*#__PURE__*/function () {\n  function TreeTable(el, zone, tableService, filterService) {\n    _classCallCheck(this, TreeTable);\n\n    this.el = el;\n    this.zone = zone;\n    this.tableService = tableService;\n    this.filterService = filterService;\n    this.lazy = false;\n    this.lazyLoadOnInit = true;\n    this.first = 0;\n    this.pageLinks = 5;\n    this.alwaysShowPaginator = true;\n    this.paginatorPosition = 'bottom';\n    this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n    this.showFirstLastIcon = true;\n    this.showPageLinks = true;\n    this.defaultSortOrder = 1;\n    this.sortMode = 'single';\n    this.resetPageOnSort = true;\n    this.selectionChange = new EventEmitter();\n    this.contextMenuSelectionChange = new EventEmitter();\n    this.contextMenuSelectionMode = \"separate\";\n    this.compareSelectionBy = 'deepEquals';\n    this.loadingIcon = 'pi pi-spinner';\n    this.showLoader = true;\n    this.virtualScrollDelay = 150;\n    this.virtualRowHeight = 28;\n    this.columnResizeMode = 'fit';\n\n    this.rowTrackBy = function (index, item) {\n      return item;\n    };\n\n    this.filters = {};\n    this.filterDelay = 300;\n    this.filterMode = 'lenient';\n    this.onFilter = new EventEmitter();\n    this.onNodeExpand = new EventEmitter();\n    this.onNodeCollapse = new EventEmitter();\n    this.onPage = new EventEmitter();\n    this.onSort = new EventEmitter();\n    this.onLazyLoad = new EventEmitter();\n    this.sortFunction = new EventEmitter();\n    this.onColResize = new EventEmitter();\n    this.onColReorder = new EventEmitter();\n    this.onNodeSelect = new EventEmitter();\n    this.onNodeUnselect = new EventEmitter();\n    this.onContextMenuSelect = new EventEmitter();\n    this.onHeaderCheckboxToggle = new EventEmitter();\n    this.onEditInit = new EventEmitter();\n    this.onEditComplete = new EventEmitter();\n    this.onEditCancel = new EventEmitter();\n    this._value = [];\n    this._totalRecords = 0;\n    this._sortOrder = 1;\n    this.selectionKeys = {};\n  }\n\n  _createClass(TreeTable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.lazy && this.lazyLoadOnInit) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      }\n\n      this.initialized = true;\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'caption':\n            _this.captionTemplate = item.template;\n            break;\n\n          case 'header':\n            _this.headerTemplate = item.template;\n            break;\n\n          case 'body':\n            _this.bodyTemplate = item.template;\n            break;\n\n          case 'loadingbody':\n            _this.loadingBodyTemplate = item.template;\n            break;\n\n          case 'footer':\n            _this.footerTemplate = item.template;\n            break;\n\n          case 'summary':\n            _this.summaryTemplate = item.template;\n            break;\n\n          case 'colgroup':\n            _this.colGroupTemplate = item.template;\n            break;\n\n          case 'emptymessage':\n            _this.emptyMessageTemplate = item.template;\n            break;\n\n          case 'paginatorleft':\n            _this.paginatorLeftTemplate = item.template;\n            break;\n\n          case 'paginatorright':\n            _this.paginatorRightTemplate = item.template;\n            break;\n\n          case 'paginatordropdownitem':\n            _this.paginatorDropdownItemTemplate = item.template;\n            break;\n\n          case 'frozenheader':\n            _this.frozenHeaderTemplate = item.template;\n            break;\n\n          case 'frozenbody':\n            _this.frozenBodyTemplate = item.template;\n            break;\n\n          case 'frozenfooter':\n            _this.frozenFooterTemplate = item.template;\n            break;\n\n          case 'frozencolgroup':\n            _this.frozenColGroupTemplate = item.template;\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(simpleChange) {\n      if (simpleChange.value) {\n        this._value = simpleChange.value.currentValue;\n\n        if (!this.lazy) {\n          this.totalRecords = this._value ? this._value.length : 0;\n          if (this.sortMode == 'single' && this.sortField) this.sortSingle();else if (this.sortMode == 'multiple' && this.multiSortMeta) this.sortMultiple();else if (this.hasFilter()) //sort already filters\n            this._filter();\n        }\n\n        this.updateSerializedValue();\n        this.tableService.onUIUpdate(this.value);\n      }\n\n      if (simpleChange.sortField) {\n        this._sortField = simpleChange.sortField.currentValue; //avoid triggering lazy load prior to lazy initialization at onInit\n\n        if (!this.lazy || this.initialized) {\n          if (this.sortMode === 'single') {\n            this.sortSingle();\n          }\n        }\n      }\n\n      if (simpleChange.sortOrder) {\n        this._sortOrder = simpleChange.sortOrder.currentValue; //avoid triggering lazy load prior to lazy initialization at onInit\n\n        if (!this.lazy || this.initialized) {\n          if (this.sortMode === 'single') {\n            this.sortSingle();\n          }\n        }\n      }\n\n      if (simpleChange.multiSortMeta) {\n        this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n\n        if (this.sortMode === 'multiple') {\n          this.sortMultiple();\n        }\n      }\n\n      if (simpleChange.selection) {\n        this._selection = simpleChange.selection.currentValue;\n\n        if (!this.preventSelectionSetterPropagation) {\n          this.updateSelectionKeys();\n          this.tableService.onSelectionChange();\n        }\n\n        this.preventSelectionSetterPropagation = false;\n      }\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(val) {\n      this._value = val;\n    }\n  }, {\n    key: \"updateSerializedValue\",\n    value: function updateSerializedValue() {\n      this.serializedValue = [];\n      if (this.paginator) this.serializePageNodes();else this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n    }\n  }, {\n    key: \"serializeNodes\",\n    value: function serializeNodes(parent, nodes, level, visible) {\n      if (nodes && nodes.length) {\n        var _iterator = _createForOfIteratorHelper(nodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n            node.parent = parent;\n            var rowNode = {\n              node: node,\n              parent: parent,\n              level: level,\n              visible: visible && (parent ? parent.expanded : true)\n            };\n            this.serializedValue.push(rowNode);\n\n            if (rowNode.visible && node.expanded) {\n              this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"serializePageNodes\",\n    value: function serializePageNodes() {\n      var data = this.filteredNodes || this.value;\n      this.serializedValue = [];\n\n      if (data && data.length) {\n        var first = this.lazy ? 0 : this.first;\n\n        for (var i = first; i < first + this.rows; i++) {\n          var node = data[i];\n\n          if (node) {\n            this.serializedValue.push({\n              node: node,\n              parent: null,\n              level: 0,\n              visible: true\n            });\n            this.serializeNodes(node, node.children, 1, true);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"totalRecords\",\n    get: function get() {\n      return this._totalRecords;\n    },\n    set: function set(val) {\n      this._totalRecords = val;\n      this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n  }, {\n    key: \"sortField\",\n    get: function get() {\n      return this._sortField;\n    },\n    set: function set(val) {\n      this._sortField = val;\n    }\n  }, {\n    key: \"sortOrder\",\n    get: function get() {\n      return this._sortOrder;\n    },\n    set: function set(val) {\n      this._sortOrder = val;\n    }\n  }, {\n    key: \"multiSortMeta\",\n    get: function get() {\n      return this._multiSortMeta;\n    },\n    set: function set(val) {\n      this._multiSortMeta = val;\n    }\n  }, {\n    key: \"selection\",\n    get: function get() {\n      return this._selection;\n    },\n    set: function set(val) {\n      this._selection = val;\n    }\n  }, {\n    key: \"updateSelectionKeys\",\n    value: function updateSelectionKeys() {\n      if (this.dataKey && this._selection) {\n        this.selectionKeys = {};\n\n        if (Array.isArray(this._selection)) {\n          var _iterator2 = _createForOfIteratorHelper(this._selection),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var node = _step2.value;\n              this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        } else {\n          this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n        }\n      }\n    }\n  }, {\n    key: \"onPageChange\",\n    value: function onPageChange(event) {\n      this.first = event.first;\n      this.rows = event.rows;\n      if (this.lazy) this.onLazyLoad.emit(this.createLazyLoadMetadata());else this.serializePageNodes();\n      this.onPage.emit({\n        first: this.first,\n        rows: this.rows\n      });\n      this.tableService.onUIUpdate(this.value);\n\n      if (this.scrollable) {\n        this.resetScrollTop();\n      }\n    }\n  }, {\n    key: \"sort\",\n    value: function sort(event) {\n      var originalEvent = event.originalEvent;\n\n      if (this.sortMode === 'single') {\n        this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n        this._sortField = event.field;\n        this.sortSingle();\n\n        if (this.resetPageOnSort && this.scrollable) {\n          this.resetScrollTop();\n        }\n      }\n\n      if (this.sortMode === 'multiple') {\n        var metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n        var sortMeta = this.getSortMeta(event.field);\n\n        if (sortMeta) {\n          if (!metaKey) {\n            this._multiSortMeta = [{\n              field: event.field,\n              order: sortMeta.order * -1\n            }];\n\n            if (this.resetPageOnSort && this.scrollable) {\n              this.resetScrollTop();\n            }\n          } else {\n            sortMeta.order = sortMeta.order * -1;\n          }\n        } else {\n          if (!metaKey || !this.multiSortMeta) {\n            this._multiSortMeta = [];\n\n            if (this.resetPageOnSort && this.scrollable) {\n              this.resetScrollTop();\n            }\n          }\n\n          this.multiSortMeta.push({\n            field: event.field,\n            order: this.defaultSortOrder\n          });\n        }\n\n        this.sortMultiple();\n      }\n    }\n  }, {\n    key: \"sortSingle\",\n    value: function sortSingle() {\n      if (this.sortField && this.sortOrder) {\n        if (this.lazy) {\n          this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        } else if (this.value) {\n          this.sortNodes(this.value);\n\n          if (this.hasFilter()) {\n            this._filter();\n          }\n        }\n\n        var sortMeta = {\n          field: this.sortField,\n          order: this.sortOrder\n        };\n        this.onSort.emit(sortMeta);\n        this.tableService.onSort(sortMeta);\n        this.updateSerializedValue();\n      }\n    }\n  }, {\n    key: \"sortNodes\",\n    value: function sortNodes(nodes) {\n      var _this2 = this;\n\n      if (!nodes || nodes.length === 0) {\n        return;\n      }\n\n      if (this.customSort) {\n        this.sortFunction.emit({\n          data: nodes,\n          mode: this.sortMode,\n          field: this.sortField,\n          order: this.sortOrder\n        });\n      } else {\n        nodes.sort(function (node1, node2) {\n          var value1 = ObjectUtils.resolveFieldData(node1.data, _this2.sortField);\n          var value2 = ObjectUtils.resolveFieldData(node2.data, _this2.sortField);\n          var result = null;\n          if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2, undefined, {\n            numeric: true\n          });else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n          return _this2.sortOrder * result;\n        });\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(nodes),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var node = _step3.value;\n          this.sortNodes(node.children);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"sortMultiple\",\n    value: function sortMultiple() {\n      if (this.multiSortMeta) {\n        if (this.lazy) {\n          this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        } else if (this.value) {\n          this.sortMultipleNodes(this.value);\n\n          if (this.hasFilter()) {\n            this._filter();\n          }\n        }\n\n        this.onSort.emit({\n          multisortmeta: this.multiSortMeta\n        });\n        this.updateSerializedValue();\n        this.tableService.onSort(this.multiSortMeta);\n      }\n    }\n  }, {\n    key: \"sortMultipleNodes\",\n    value: function sortMultipleNodes(nodes) {\n      var _this3 = this;\n\n      if (!nodes || nodes.length === 0) {\n        return;\n      }\n\n      if (this.customSort) {\n        this.sortFunction.emit({\n          data: this.value,\n          mode: this.sortMode,\n          multiSortMeta: this.multiSortMeta\n        });\n      } else {\n        nodes.sort(function (node1, node2) {\n          return _this3.multisortField(node1, node2, _this3.multiSortMeta, 0);\n        });\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(nodes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var node = _step4.value;\n          this.sortMultipleNodes(node.children);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"multisortField\",\n    value: function multisortField(node1, node2, multiSortMeta, index) {\n      var value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n      var value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n      var result = null;\n      if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;\n\n      if (typeof value1 == 'string' || value1 instanceof String) {\n        if (value1.localeCompare && value1 != value2) {\n          return multiSortMeta[index].order * value1.localeCompare(value2, undefined, {\n            numeric: true\n          });\n        }\n      } else {\n        result = value1 < value2 ? -1 : 1;\n      }\n\n      if (value1 == value2) {\n        return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n      }\n\n      return multiSortMeta[index].order * result;\n    }\n  }, {\n    key: \"getSortMeta\",\n    value: function getSortMeta(field) {\n      if (this.multiSortMeta && this.multiSortMeta.length) {\n        for (var i = 0; i < this.multiSortMeta.length; i++) {\n          if (this.multiSortMeta[i].field === field) {\n            return this.multiSortMeta[i];\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"isSorted\",\n    value: function isSorted(field) {\n      if (this.sortMode === 'single') {\n        return this.sortField && this.sortField === field;\n      } else if (this.sortMode === 'multiple') {\n        var sorted = false;\n\n        if (this.multiSortMeta) {\n          for (var i = 0; i < this.multiSortMeta.length; i++) {\n            if (this.multiSortMeta[i].field == field) {\n              sorted = true;\n              break;\n            }\n          }\n        }\n\n        return sorted;\n      }\n    }\n  }, {\n    key: \"createLazyLoadMetadata\",\n    value: function createLazyLoadMetadata() {\n      return {\n        first: this.first,\n        rows: this.rows,\n        sortField: this.sortField,\n        sortOrder: this.sortOrder,\n        filters: this.filters,\n        globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n        multiSortMeta: this.multiSortMeta\n      };\n    }\n  }, {\n    key: \"resetScrollTop\",\n    value: function resetScrollTop() {\n      if (this.virtualScroll) this.scrollToVirtualIndex(0);else this.scrollTo({\n        top: 0\n      });\n    }\n  }, {\n    key: \"scrollToVirtualIndex\",\n    value: function scrollToVirtualIndex(index) {\n      if (this.scrollableViewChild) {\n        this.scrollableViewChild.scrollToVirtualIndex(index);\n      }\n\n      if (this.scrollableFrozenViewChild) {\n        this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n      }\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      if (this.scrollableViewChild) {\n        this.scrollableViewChild.scrollTo(options);\n      }\n\n      if (this.scrollableFrozenViewChild) {\n        this.scrollableFrozenViewChild.scrollTo(options);\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      var data = this.filteredNodes || this.value;\n      return data == null || data.length == 0;\n    }\n  }, {\n    key: \"getBlockableElement\",\n    value: function getBlockableElement() {\n      return this.el.nativeElement.children[0];\n    }\n  }, {\n    key: \"onColumnResizeBegin\",\n    value: function onColumnResizeBegin(event) {\n      var containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n      this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft;\n      event.preventDefault();\n    }\n  }, {\n    key: \"onColumnResize\",\n    value: function onColumnResize(event) {\n      var containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n      DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n      this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n      this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n      this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft + 'px';\n      this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n  }, {\n    key: \"onColumnResizeEnd\",\n    value: function onColumnResizeEnd(event, column) {\n      var delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n      var columnWidth = column.offsetWidth;\n      var newColumnWidth = columnWidth + delta;\n      var minWidth = column.style.minWidth || 15;\n\n      if (columnWidth + delta > parseInt(minWidth)) {\n        if (this.columnResizeMode === 'fit') {\n          var nextColumn = column.nextElementSibling;\n\n          while (!nextColumn.offsetParent) {\n            nextColumn = nextColumn.nextElementSibling;\n          }\n\n          if (nextColumn) {\n            var nextColumnWidth = nextColumn.offsetWidth - delta;\n            var nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n            if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n              if (this.scrollable) {\n                var scrollableView = this.findParentScrollableView(column);\n                var scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\n                var scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                var scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                var resizeColumnIndex = DomHandler.index(column);\n                this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              } else {\n                column.style.width = newColumnWidth + 'px';\n\n                if (nextColumn) {\n                  nextColumn.style.width = nextColumnWidth + 'px';\n                }\n              }\n            }\n          }\n        } else if (this.columnResizeMode === 'expand') {\n          if (this.scrollable) {\n            var _scrollableView = this.findParentScrollableView(column);\n\n            var scrollableBody = DomHandler.findSingle(_scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(_scrollableView, 'cdk-virtual-scroll-viewport');\n            var scrollableHeader = DomHandler.findSingle(_scrollableView, '.p-treetable-scrollable-header');\n            var scrollableFooter = DomHandler.findSingle(_scrollableView, '.p-treetable-scrollable-footer');\n\n            var _scrollableBodyTable = DomHandler.findSingle(_scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(_scrollableView, 'cdk-virtual-scroll-viewport table');\n\n            var _scrollableHeaderTable = DomHandler.findSingle(_scrollableView, 'table.p-treetable-scrollable-header-table');\n\n            var _scrollableFooterTable = DomHandler.findSingle(_scrollableView, 'table.p-treetable-scrollable-footer-table');\n\n            _scrollableBodyTable.style.width = _scrollableBodyTable.offsetWidth + delta + 'px';\n            _scrollableHeaderTable.style.width = _scrollableHeaderTable.offsetWidth + delta + 'px';\n\n            if (_scrollableFooterTable) {\n              _scrollableFooterTable.style.width = _scrollableFooterTable.offsetWidth + delta + 'px';\n            }\n\n            var _resizeColumnIndex = DomHandler.index(column);\n\n            var scrollableBodyTableWidth = column ? _scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n            var scrollableHeaderTableWidth = column ? _scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n            var isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n            var setWidth = function setWidth(container, table, width, isContainerInViewport) {\n              if (container && table) {\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n                table.style.width = width + 'px';\n              }\n            };\n\n            setWidth(scrollableBody, _scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n            setWidth(scrollableHeader, _scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n            setWidth(scrollableFooter, _scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n            this.resizeColGroup(_scrollableHeaderTable, _resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(_scrollableBodyTable, _resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(_scrollableFooterTable, _resizeColumnIndex, newColumnWidth, null);\n          } else {\n            this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n            column.style.width = newColumnWidth + 'px';\n            var containerWidth = this.tableViewChild.nativeElement.style.width;\n            this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n          }\n        }\n\n        this.onColResize.emit({\n          element: column,\n          delta: delta\n        });\n      }\n\n      this.resizeHelperViewChild.nativeElement.style.display = 'none';\n      DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n  }, {\n    key: \"findParentScrollableView\",\n    value: function findParentScrollableView(column) {\n      if (column) {\n        var parent = column.parentElement;\n\n        while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n          parent = parent.parentElement;\n        }\n\n        return parent;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"resizeColGroup\",\n    value: function resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n      if (table) {\n        var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n        if (colGroup) {\n          var col = colGroup.children[resizeColumnIndex];\n          var nextCol = col.nextElementSibling;\n          col.style.width = newColumnWidth + 'px';\n\n          if (nextCol && nextColumnWidth) {\n            nextCol.style.width = nextColumnWidth + 'px';\n          }\n        } else {\n          throw \"Scrollable tables require a colgroup to support resizable columns\";\n        }\n      }\n    }\n  }, {\n    key: \"onColumnDragStart\",\n    value: function onColumnDragStart(event, columnElement) {\n      this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n      this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n      this.draggedColumn = columnElement;\n      event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n  }, {\n    key: \"onColumnDragEnter\",\n    value: function onColumnDragEnter(event, dropHeader) {\n      if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n        event.preventDefault();\n        var containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n        var dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n        if (this.draggedColumn != dropHeader) {\n          var targetLeft = dropHeaderOffset.left - containerOffset.left;\n          var targetTop = containerOffset.top - dropHeaderOffset.top;\n          var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n          this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n          if (event.pageX > columnCenter) {\n            this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n            this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n            this.dropPosition = 1;\n          } else {\n            this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n            this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n            this.dropPosition = -1;\n          }\n\n          this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n          this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n        } else {\n          event.dataTransfer.dropEffect = 'none';\n        }\n      }\n    }\n  }, {\n    key: \"onColumnDragLeave\",\n    value: function onColumnDragLeave(event) {\n      if (this.reorderableColumns && this.draggedColumn) {\n        event.preventDefault();\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n      }\n    }\n  }, {\n    key: \"onColumnDrop\",\n    value: function onColumnDrop(event, dropColumn) {\n      event.preventDefault();\n\n      if (this.draggedColumn) {\n        var dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n        var dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n        var allowDrop = dragIndex != dropIndex;\n\n        if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {\n          allowDrop = false;\n        }\n\n        if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n          dropIndex = dropIndex + 1;\n        }\n\n        if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n          dropIndex = dropIndex - 1;\n        }\n\n        if (allowDrop) {\n          ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n          this.onColReorder.emit({\n            dragIndex: dragIndex,\n            dropIndex: dropIndex,\n            columns: this.columns\n          });\n        }\n\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        this.draggedColumn.draggable = false;\n        this.draggedColumn = null;\n        this.dropPosition = null;\n      }\n    }\n  }, {\n    key: \"handleRowClick\",\n    value: function handleRowClick(event) {\n      var targetNode = event.originalEvent.target.nodeName;\n\n      if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n        return;\n      }\n\n      if (this.selectionMode) {\n        this.preventSelectionSetterPropagation = true;\n        var rowNode = event.rowNode;\n        var selected = this.isSelected(rowNode.node);\n        var metaSelection = this.rowTouched ? false : this.metaKeySelection;\n        var dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n        if (metaSelection) {\n          var metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              this._selection = null;\n              this.selectionKeys = {};\n              this.selectionChange.emit(null);\n            } else {\n              var selectionIndex = this.findIndexInSelection(rowNode.node);\n              this._selection = this.selection.filter(function (val, i) {\n                return i != selectionIndex;\n              });\n              this.selectionChange.emit(this.selection);\n\n              if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n              }\n            }\n\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n          } else {\n            if (this.isSingleSelectionMode()) {\n              this._selection = rowNode.node;\n              this.selectionChange.emit(rowNode.node);\n\n              if (dataKeyValue) {\n                this.selectionKeys = {};\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            } else if (this.isMultipleSelectionMode()) {\n              if (metaKey) {\n                this._selection = this.selection || [];\n              } else {\n                this._selection = [];\n                this.selectionKeys = {};\n              }\n\n              this._selection = [].concat(_toConsumableArray(this.selection), [rowNode.node]);\n              this.selectionChange.emit(this.selection);\n\n              if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            }\n\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n          }\n        } else {\n          if (this.selectionMode === 'single') {\n            if (selected) {\n              this._selection = null;\n              this.selectionKeys = {};\n              this.selectionChange.emit(this.selection);\n              this.onNodeUnselect.emit({\n                originalEvent: event.originalEvent,\n                node: rowNode.node,\n                type: 'row'\n              });\n            } else {\n              this._selection = rowNode.node;\n              this.selectionChange.emit(this.selection);\n              this.onNodeSelect.emit({\n                originalEvent: event.originalEvent,\n                node: rowNode.node,\n                type: 'row',\n                index: event.rowIndex\n              });\n\n              if (dataKeyValue) {\n                this.selectionKeys = {};\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            }\n          } else if (this.selectionMode === 'multiple') {\n            if (selected) {\n              var _selectionIndex = this.findIndexInSelection(rowNode.node);\n\n              this._selection = this.selection.filter(function (val, i) {\n                return i != _selectionIndex;\n              });\n              this.selectionChange.emit(this.selection);\n              this.onNodeUnselect.emit({\n                originalEvent: event.originalEvent,\n                node: rowNode.node,\n                type: 'row'\n              });\n\n              if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n              }\n            } else {\n              this._selection = this.selection ? [].concat(_toConsumableArray(this.selection), [rowNode.node]) : [rowNode.node];\n              this.selectionChange.emit(this.selection);\n              this.onNodeSelect.emit({\n                originalEvent: event.originalEvent,\n                node: rowNode.node,\n                type: 'row',\n                index: event.rowIndex\n              });\n\n              if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            }\n          }\n        }\n\n        this.tableService.onSelectionChange();\n      }\n\n      this.rowTouched = false;\n    }\n  }, {\n    key: \"handleRowTouchEnd\",\n    value: function handleRowTouchEnd(event) {\n      this.rowTouched = true;\n    }\n  }, {\n    key: \"handleRowRightClick\",\n    value: function handleRowRightClick(event) {\n      if (this.contextMenu) {\n        var node = event.rowNode.node;\n\n        if (this.contextMenuSelectionMode === 'separate') {\n          this.contextMenuSelection = node;\n          this.contextMenuSelectionChange.emit(node);\n          this.onContextMenuSelect.emit({\n            originalEvent: event.originalEvent,\n            node: node\n          });\n          this.contextMenu.show(event.originalEvent);\n          this.tableService.onContextMenu(node);\n        } else if (this.contextMenuSelectionMode === 'joint') {\n          this.preventSelectionSetterPropagation = true;\n          var selected = this.isSelected(node);\n          var dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n          if (!selected) {\n            if (this.isSingleSelectionMode()) {\n              this.selection = node;\n              this.selectionChange.emit(node);\n            } else if (this.isMultipleSelectionMode()) {\n              this.selection = [node];\n              this.selectionChange.emit(this.selection);\n            }\n\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n\n          this.contextMenu.show(event.originalEvent);\n          this.onContextMenuSelect.emit({\n            originalEvent: event.originalEvent,\n            node: node\n          });\n        }\n      }\n    }\n  }, {\n    key: \"toggleNodeWithCheckbox\",\n    value: function toggleNodeWithCheckbox(event) {\n      this.selection = this.selection || [];\n      this.preventSelectionSetterPropagation = true;\n      var node = event.rowNode.node;\n      var selected = this.isSelected(node);\n\n      if (selected) {\n        this.propagateSelectionDown(node, false);\n\n        if (event.rowNode.parent) {\n          this.propagateSelectionUp(node.parent, false);\n        }\n\n        this.selectionChange.emit(this.selection);\n        this.onNodeUnselect.emit({\n          originalEvent: event,\n          node: node\n        });\n      } else {\n        this.propagateSelectionDown(node, true);\n\n        if (event.rowNode.parent) {\n          this.propagateSelectionUp(node.parent, true);\n        }\n\n        this.selectionChange.emit(this.selection);\n        this.onNodeSelect.emit({\n          originalEvent: event,\n          node: node\n        });\n      }\n\n      this.tableService.onSelectionChange();\n    }\n  }, {\n    key: \"toggleNodesWithCheckbox\",\n    value: function toggleNodesWithCheckbox(event, check) {\n      var data = this.filteredNodes || this.value;\n      this._selection = check && data ? data.slice() : [];\n\n      if (check) {\n        if (data && data.length) {\n          var _iterator5 = _createForOfIteratorHelper(data),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var node = _step5.value;\n              this.propagateSelectionDown(node, true);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      } else {\n        this._selection = [];\n        this.selectionKeys = {};\n      }\n\n      this.preventSelectionSetterPropagation = true;\n      this.selectionChange.emit(this._selection);\n      this.tableService.onSelectionChange();\n      this.onHeaderCheckboxToggle.emit({\n        originalEvent: event,\n        checked: check\n      });\n    }\n  }, {\n    key: \"propagateSelectionUp\",\n    value: function propagateSelectionUp(node, select) {\n      if (node.children && node.children.length) {\n        var selectedChildCount = 0;\n        var childPartialSelected = false;\n        var dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        var _iterator6 = _createForOfIteratorHelper(node.children),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var child = _step6.value;\n            if (this.isSelected(child)) selectedChildCount++;else if (child.partialSelected) childPartialSelected = true;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        if (select && selectedChildCount == node.children.length) {\n          this._selection = [].concat(_toConsumableArray(this.selection || []), [node]);\n          node.partialSelected = false;\n\n          if (dataKeyValue) {\n            this.selectionKeys[dataKeyValue] = 1;\n          }\n        } else {\n          if (!select) {\n            var index = this.findIndexInSelection(node);\n\n            if (index >= 0) {\n              this._selection = this.selection.filter(function (val, i) {\n                return i != index;\n              });\n\n              if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n              }\n            }\n          }\n\n          if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n        }\n      }\n\n      var parent = node.parent;\n\n      if (parent) {\n        this.propagateSelectionUp(parent, select);\n      }\n    }\n  }, {\n    key: \"propagateSelectionDown\",\n    value: function propagateSelectionDown(node, select) {\n      var index = this.findIndexInSelection(node);\n      var dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n      if (select && index == -1) {\n        this._selection = [].concat(_toConsumableArray(this.selection || []), [node]);\n\n        if (dataKeyValue) {\n          this.selectionKeys[dataKeyValue] = 1;\n        }\n      } else if (!select && index > -1) {\n        this._selection = this.selection.filter(function (val, i) {\n          return i != index;\n        });\n\n        if (dataKeyValue) {\n          delete this.selectionKeys[dataKeyValue];\n        }\n      }\n\n      node.partialSelected = false;\n\n      if (node.children && node.children.length) {\n        var _iterator7 = _createForOfIteratorHelper(node.children),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var child = _step7.value;\n            this.propagateSelectionDown(child, select);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(node) {\n      if (node && this.selection) {\n        if (this.dataKey) {\n          return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n        } else {\n          if (this.selection instanceof Array) return this.findIndexInSelection(node) > -1;else return this.equals(node, this.selection);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"findIndexInSelection\",\n    value: function findIndexInSelection(node) {\n      var index = -1;\n\n      if (this.selection && this.selection.length) {\n        for (var i = 0; i < this.selection.length; i++) {\n          if (this.equals(node, this.selection[i])) {\n            index = i;\n            break;\n          }\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"isSingleSelectionMode\",\n    value: function isSingleSelectionMode() {\n      return this.selectionMode === 'single';\n    }\n  }, {\n    key: \"isMultipleSelectionMode\",\n    value: function isMultipleSelectionMode() {\n      return this.selectionMode === 'multiple';\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(node1, node2) {\n      return this.compareSelectionBy === 'equals' ? node1 === node2 : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value, field, matchMode) {\n      var _this4 = this;\n\n      if (this.filterTimeout) {\n        clearTimeout(this.filterTimeout);\n      }\n\n      if (!this.isFilterBlank(value)) {\n        this.filters[field] = {\n          value: value,\n          matchMode: matchMode\n        };\n      } else if (this.filters[field]) {\n        delete this.filters[field];\n      }\n\n      this.filterTimeout = setTimeout(function () {\n        _this4._filter();\n\n        _this4.filterTimeout = null;\n      }, this.filterDelay);\n    }\n  }, {\n    key: \"filterGlobal\",\n    value: function filterGlobal(value, matchMode) {\n      this.filter(value, 'global', matchMode);\n    }\n  }, {\n    key: \"isFilterBlank\",\n    value: function isFilterBlank(filter) {\n      if (filter !== null && filter !== undefined) {\n        if (typeof filter === 'string' && filter.trim().length == 0 || filter instanceof Array && filter.length == 0) return true;else return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_filter\",\n    value: function _filter() {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else {\n        if (!this.value) {\n          return;\n        }\n\n        if (!this.hasFilter()) {\n          this.filteredNodes = null;\n\n          if (this.paginator) {\n            this.totalRecords = this.value ? this.value.length : 0;\n          }\n        } else {\n          var globalFilterFieldsArray;\n\n          if (this.filters['global']) {\n            if (!this.columns && !this.globalFilterFields) throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');else globalFilterFieldsArray = this.globalFilterFields || this.columns;\n          }\n\n          this.filteredNodes = [];\n          var isStrictMode = this.filterMode === 'strict';\n          var isValueChanged = false;\n\n          var _iterator8 = _createForOfIteratorHelper(this.value),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var node = _step8.value;\n              var copyNode = Object.assign({}, node);\n              var localMatch = true;\n              var globalMatch = false;\n              var paramsWithoutNode = void 0;\n\n              for (var prop in this.filters) {\n                if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                  var filterMeta = this.filters[prop];\n                  var filterField = prop;\n                  var filterValue = filterMeta.value;\n                  var filterMatchMode = filterMeta.matchMode || 'startsWith';\n                  var filterConstraint = this.filterService.filters[filterMatchMode];\n                  paramsWithoutNode = {\n                    filterField: filterField,\n                    filterValue: filterValue,\n                    filterConstraint: filterConstraint,\n                    isStrictMode: isStrictMode\n                  };\n\n                  if (isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                    localMatch = false;\n                  }\n\n                  if (!localMatch) {\n                    break;\n                  }\n                }\n              }\n\n              if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                for (var j = 0; j < globalFilterFieldsArray.length; j++) {\n                  var copyNodeForGlobal = Object.assign({}, copyNode);\n\n                  var _filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n\n                  var _filterValue = this.filters['global'].value;\n                  var _filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n                  paramsWithoutNode = {\n                    filterField: _filterField,\n                    filterValue: _filterValue,\n                    filterConstraint: _filterConstraint,\n                    isStrictMode: isStrictMode\n                  };\n\n                  if (isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode))) {\n                    globalMatch = true;\n                    copyNode = copyNodeForGlobal;\n                  }\n                }\n              }\n\n              var matches = localMatch;\n\n              if (this.filters['global']) {\n                matches = localMatch && globalMatch;\n              }\n\n              if (matches) {\n                this.filteredNodes.push(copyNode);\n              }\n\n              isValueChanged = isValueChanged || !localMatch || globalMatch || localMatch && this.filteredNodes.length > 0 || !globalMatch && this.filteredNodes.length === 0;\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          if (!isValueChanged) {\n            this.filteredNodes = null;\n          }\n\n          if (this.paginator) {\n            this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n          }\n        }\n      }\n\n      this.first = 0;\n      var filteredValue = this.filteredNodes || this.value;\n      this.onFilter.emit({\n        filters: this.filters,\n        filteredValue: filteredValue\n      });\n      this.tableService.onUIUpdate(filteredValue);\n      this.updateSerializedValue();\n\n      if (this.scrollable) {\n        this.resetScrollTop();\n      }\n    }\n  }, {\n    key: \"findFilteredNodes\",\n    value: function findFilteredNodes(node, paramsWithoutNode) {\n      if (node) {\n        var matched = false;\n\n        if (node.children) {\n          var childNodes = _toConsumableArray(node.children);\n\n          node.children = [];\n\n          var _iterator9 = _createForOfIteratorHelper(childNodes),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var childNode = _step9.value;\n              var copyChildNode = Object.assign({}, childNode);\n\n              if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                matched = true;\n                node.children.push(copyChildNode);\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n\n        if (matched) {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isFilterMatched\",\n    value: function isFilterMatched(node, _ref) {\n      var filterField = _ref.filterField,\n          filterValue = _ref.filterValue,\n          filterConstraint = _ref.filterConstraint,\n          isStrictMode = _ref.isStrictMode;\n      var matched = false;\n      var dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n\n      if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n        matched = true;\n      }\n\n      if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n        matched = this.findFilteredNodes(node, {\n          filterField: filterField,\n          filterValue: filterValue,\n          filterConstraint: filterConstraint,\n          isStrictMode: isStrictMode\n        }) || matched;\n      }\n\n      return matched;\n    }\n  }, {\n    key: \"isNodeLeaf\",\n    value: function isNodeLeaf(node) {\n      return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n  }, {\n    key: \"hasFilter\",\n    value: function hasFilter() {\n      var empty = true;\n\n      for (var prop in this.filters) {\n        if (this.filters.hasOwnProperty(prop)) {\n          empty = false;\n          break;\n        }\n      }\n\n      return !empty;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._sortField = null;\n      this._sortOrder = 1;\n      this._multiSortMeta = null;\n      this.tableService.onSort(null);\n      this.filteredNodes = null;\n      this.filters = {};\n      this.first = 0;\n\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else {\n        this.totalRecords = this._value ? this._value.length : 0;\n      }\n    }\n  }, {\n    key: \"updateEditingCell\",\n    value: function updateEditingCell(cell, data, field) {\n      this.editingCell = cell;\n      this.editingCellData = data;\n      this.editingCellField = field;\n      this.bindDocumentEditListener();\n    }\n  }, {\n    key: \"isEditingCellValid\",\n    value: function isEditingCellValid() {\n      return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n    }\n  }, {\n    key: \"bindDocumentEditListener\",\n    value: function bindDocumentEditListener() {\n      var _this5 = this;\n\n      if (!this.documentEditListener) {\n        this.documentEditListener = function (event) {\n          if (_this5.editingCell && !_this5.editingCellClick && _this5.isEditingCellValid()) {\n            DomHandler.removeClass(_this5.editingCell, 'p-cell-editing');\n            _this5.editingCell = null;\n\n            _this5.onEditComplete.emit({\n              field: _this5.editingCellField,\n              data: _this5.editingCellData\n            });\n\n            _this5.unbindDocumentEditListener();\n          }\n\n          _this5.editingCellClick = false;\n        };\n\n        document.addEventListener('click', this.documentEditListener);\n      }\n    }\n  }, {\n    key: \"unbindDocumentEditListener\",\n    value: function unbindDocumentEditListener() {\n      if (this.documentEditListener) {\n        document.removeEventListener('click', this.documentEditListener);\n        this.documentEditListener = null;\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unbindDocumentEditListener();\n      this.editingCell = null;\n      this.initialized = null;\n    }\n  }]);\n\n  return TreeTable;\n}();\n\nTreeTable.ɵfac = function TreeTable_Factory(t) {\n  return new (t || TreeTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(TreeTableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FilterService));\n};\n\nTreeTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeTable,\n  selectors: [[\"p-treeTable\"]],\n  contentQueries: function TreeTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function TreeTable_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(_c1, 1);\n      ɵngcc0.ɵɵviewQuery(_c2, 1);\n      ɵngcc0.ɵɵviewQuery(_c3, 1);\n      ɵngcc0.ɵɵviewQuery(_c4, 1);\n      ɵngcc0.ɵɵviewQuery(_c5, 1);\n      ɵngcc0.ɵɵviewQuery(_c6, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollableViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollableFrozenViewChild = _t.first);\n    }\n  },\n  inputs: {\n    lazy: \"lazy\",\n    lazyLoadOnInit: \"lazyLoadOnInit\",\n    first: \"first\",\n    pageLinks: \"pageLinks\",\n    alwaysShowPaginator: \"alwaysShowPaginator\",\n    paginatorPosition: \"paginatorPosition\",\n    currentPageReportTemplate: \"currentPageReportTemplate\",\n    showFirstLastIcon: \"showFirstLastIcon\",\n    showPageLinks: \"showPageLinks\",\n    defaultSortOrder: \"defaultSortOrder\",\n    sortMode: \"sortMode\",\n    resetPageOnSort: \"resetPageOnSort\",\n    contextMenuSelectionMode: \"contextMenuSelectionMode\",\n    compareSelectionBy: \"compareSelectionBy\",\n    loadingIcon: \"loadingIcon\",\n    showLoader: \"showLoader\",\n    virtualScrollDelay: \"virtualScrollDelay\",\n    virtualRowHeight: \"virtualRowHeight\",\n    columnResizeMode: \"columnResizeMode\",\n    rowTrackBy: \"rowTrackBy\",\n    filters: \"filters\",\n    filterDelay: \"filterDelay\",\n    filterMode: \"filterMode\",\n    totalRecords: \"totalRecords\",\n    value: \"value\",\n    sortField: \"sortField\",\n    sortOrder: \"sortOrder\",\n    multiSortMeta: \"multiSortMeta\",\n    selection: \"selection\",\n    rows: \"rows\",\n    contextMenuSelection: \"contextMenuSelection\",\n    columns: \"columns\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    tableStyle: \"tableStyle\",\n    tableStyleClass: \"tableStyleClass\",\n    autoLayout: \"autoLayout\",\n    paginator: \"paginator\",\n    rowsPerPageOptions: \"rowsPerPageOptions\",\n    paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n    showCurrentPageReport: \"showCurrentPageReport\",\n    showJumpToPageDropdown: \"showJumpToPageDropdown\",\n    customSort: \"customSort\",\n    selectionMode: \"selectionMode\",\n    dataKey: \"dataKey\",\n    metaKeySelection: \"metaKeySelection\",\n    rowHover: \"rowHover\",\n    loading: \"loading\",\n    scrollable: \"scrollable\",\n    scrollHeight: \"scrollHeight\",\n    virtualScroll: \"virtualScroll\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\",\n    frozenWidth: \"frozenWidth\",\n    frozenColumns: \"frozenColumns\",\n    resizableColumns: \"resizableColumns\",\n    reorderableColumns: \"reorderableColumns\",\n    contextMenu: \"contextMenu\",\n    globalFilterFields: \"globalFilterFields\",\n    filterLocale: \"filterLocale\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    contextMenuSelectionChange: \"contextMenuSelectionChange\",\n    onFilter: \"onFilter\",\n    onNodeExpand: \"onNodeExpand\",\n    onNodeCollapse: \"onNodeCollapse\",\n    onPage: \"onPage\",\n    onSort: \"onSort\",\n    onLazyLoad: \"onLazyLoad\",\n    sortFunction: \"sortFunction\",\n    onColResize: \"onColResize\",\n    onColReorder: \"onColReorder\",\n    onNodeSelect: \"onNodeSelect\",\n    onNodeUnselect: \"onNodeUnselect\",\n    onContextMenuSelect: \"onContextMenuSelect\",\n    onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\",\n    onEditInit: \"onEditInit\",\n    onEditComplete: \"onEditComplete\",\n    onEditCancel: \"onEditCancel\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TreeTableService]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[\"data-scrollselectors\", \".p-treetable-scrollable-body\", 3, \"ngStyle\", \"ngClass\"], [\"container\", \"\"], [\"class\", \"p-treetable-loading\", 4, \"ngIf\"], [\"class\", \"p-treetable-header\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-wrapper\", 4, \"ngIf\"], [\"class\", \"p-treetable-scrollable-wrapper\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-footer\", 4, \"ngIf\"], [\"class\", \"p-column-resizer-helper\", \"style\", \"display:none\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-down p-treetable-reorder-indicator-up\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-up p-treetable-reorder-indicator-down\", 4, \"ngIf\"], [1, \"p-treetable-loading\"], [1, \"p-treetable-loading-overlay\", \"p-component-overlay\"], [1, \"p-treetable-header\"], [4, \"ngTemplateOutlet\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-wrapper\"], [3, \"ngClass\", \"ngStyle\"], [\"table\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\"], [1, \"p-treetable-tfoot\"], [1, \"p-treetable-scrollable-wrapper\"], [\"class\", \"p-treetable-scrollable-view p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-view\", 3, \"ttScrollableView\", \"frozen\", \"scrollHeight\", \"ngStyle\"], [\"scrollableView\", \"\"], [1, \"p-treetable-scrollable-view\", \"p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\"], [\"scrollableFrozenView\", \"\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-footer\"], [1, \"p-column-resizer-helper\", 2, \"display\", \"none\"], [\"resizeHelper\", \"\"], [1, \"pi\", \"pi-arrow-down\", \"p-treetable-reorder-indicator-up\"], [\"reorderIndicatorUp\", \"\"], [1, \"pi\", \"pi-arrow-up\", \"p-treetable-reorder-indicator-down\"], [\"reorderIndicatorDown\", \"\"]],\n  template: function TreeTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵtemplate(2, TreeTable_div_2_Template, 3, 2, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(3, TreeTable_div_3_Template, 2, 1, \"div\", 3);\n      ɵngcc0.ɵɵtemplate(4, TreeTable_p_paginator_4_Template, 1, 15, \"p-paginator\", 4);\n      ɵngcc0.ɵɵtemplate(5, TreeTable_div_5_Template, 9, 16, \"div\", 5);\n      ɵngcc0.ɵɵtemplate(6, TreeTable_div_6_Template, 4, 8, \"div\", 6);\n      ɵngcc0.ɵɵtemplate(7, TreeTable_p_paginator_7_Template, 1, 15, \"p-paginator\", 7);\n      ɵngcc0.ɵɵtemplate(8, TreeTable_div_8_Template, 2, 1, \"div\", 8);\n      ɵngcc0.ɵɵtemplate(9, TreeTable_div_9_Template, 2, 0, \"div\", 9);\n      ɵngcc0.ɵɵtemplate(10, TreeTable_span_10_Template, 2, 0, \"span\", 10);\n      ɵngcc0.ɵɵtemplate(11, TreeTable_span_11_Template, 2, 0, \"span\", 11);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ɵngcc0.ɵɵpureFunction5(14, _c10, ctx.rowHover || ctx.selectionMode === \"single\" || ctx.selectionMode === \"multiple\", ctx.autoLayout, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === \"fit\", ctx.scrollable && ctx.scrollHeight === \"flex\"));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.showLoader);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.captionTemplate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.scrollable);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.scrollable);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.summaryTemplate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.resizableColumns);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc2.NgStyle, ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc3.Paginator, TTBody, TTScrollableView];\n  },\n  styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;table-layout:fixed;width:100%}.p-treetable .p-sortable-column{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-badge,.p-treetable .p-sortable-column .p-sortable-column-icon{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{align-items:center;display:inline-flex;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:inline-flex;justify-content:center;overflow:hidden;position:relative;user-select:none}.p-treetable-toggler,p-treetabletoggler+p-treetablecheckbox+span,p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-footer,.p-treetable-scrollable-header{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-view,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper{display:flex;flex:1;flex-direction:column;height:100%}.p-treetable-flex-scrollable .p-treetable-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-tbody>tr>td,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-thead>tr>th{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{border:1px solid transparent;cursor:col-resize;display:block;height:100%;margin:0;padding:0;position:absolute!important;right:0;top:0;width:.5rem}.p-treetable .p-column-resizer-helper{display:none;position:absolute;width:1px;z-index:10}.p-treetable .p-row-editor-cancel,.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-toggler{align-items:center;display:inline-flex;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-down,.p-treetable-reorder-indicator-up{display:none;position:absolute}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{align-items:center;display:flex;justify-content:center;position:absolute;z-index:2}\"],\n  encapsulation: 2\n});\n\nTreeTable.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: TreeTableService\n  }, {\n    type: FilterService\n  }];\n};\n\nTreeTable.propDecorators = {\n  columns: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  tableStyle: [{\n    type: Input\n  }],\n  tableStyleClass: [{\n    type: Input\n  }],\n  autoLayout: [{\n    type: Input\n  }],\n  lazy: [{\n    type: Input\n  }],\n  lazyLoadOnInit: [{\n    type: Input\n  }],\n  paginator: [{\n    type: Input\n  }],\n  rows: [{\n    type: Input\n  }],\n  first: [{\n    type: Input\n  }],\n  pageLinks: [{\n    type: Input\n  }],\n  rowsPerPageOptions: [{\n    type: Input\n  }],\n  alwaysShowPaginator: [{\n    type: Input\n  }],\n  paginatorPosition: [{\n    type: Input\n  }],\n  paginatorDropdownAppendTo: [{\n    type: Input\n  }],\n  currentPageReportTemplate: [{\n    type: Input\n  }],\n  showCurrentPageReport: [{\n    type: Input\n  }],\n  showJumpToPageDropdown: [{\n    type: Input\n  }],\n  showFirstLastIcon: [{\n    type: Input\n  }],\n  showPageLinks: [{\n    type: Input\n  }],\n  defaultSortOrder: [{\n    type: Input\n  }],\n  sortMode: [{\n    type: Input\n  }],\n  resetPageOnSort: [{\n    type: Input\n  }],\n  customSort: [{\n    type: Input\n  }],\n  selectionMode: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  contextMenuSelection: [{\n    type: Input\n  }],\n  contextMenuSelectionChange: [{\n    type: Output\n  }],\n  contextMenuSelectionMode: [{\n    type: Input\n  }],\n  dataKey: [{\n    type: Input\n  }],\n  metaKeySelection: [{\n    type: Input\n  }],\n  compareSelectionBy: [{\n    type: Input\n  }],\n  rowHover: [{\n    type: Input\n  }],\n  loading: [{\n    type: Input\n  }],\n  loadingIcon: [{\n    type: Input\n  }],\n  showLoader: [{\n    type: Input\n  }],\n  scrollable: [{\n    type: Input\n  }],\n  scrollHeight: [{\n    type: Input\n  }],\n  virtualScroll: [{\n    type: Input\n  }],\n  virtualScrollDelay: [{\n    type: Input\n  }],\n  virtualRowHeight: [{\n    type: Input\n  }],\n  minBufferPx: [{\n    type: Input\n  }],\n  maxBufferPx: [{\n    type: Input\n  }],\n  frozenWidth: [{\n    type: Input\n  }],\n  frozenColumns: [{\n    type: Input\n  }],\n  resizableColumns: [{\n    type: Input\n  }],\n  columnResizeMode: [{\n    type: Input\n  }],\n  reorderableColumns: [{\n    type: Input\n  }],\n  contextMenu: [{\n    type: Input\n  }],\n  rowTrackBy: [{\n    type: Input\n  }],\n  filters: [{\n    type: Input\n  }],\n  globalFilterFields: [{\n    type: Input\n  }],\n  filterDelay: [{\n    type: Input\n  }],\n  filterMode: [{\n    type: Input\n  }],\n  filterLocale: [{\n    type: Input\n  }],\n  onFilter: [{\n    type: Output\n  }],\n  onNodeExpand: [{\n    type: Output\n  }],\n  onNodeCollapse: [{\n    type: Output\n  }],\n  onPage: [{\n    type: Output\n  }],\n  onSort: [{\n    type: Output\n  }],\n  onLazyLoad: [{\n    type: Output\n  }],\n  sortFunction: [{\n    type: Output\n  }],\n  onColResize: [{\n    type: Output\n  }],\n  onColReorder: [{\n    type: Output\n  }],\n  onNodeSelect: [{\n    type: Output\n  }],\n  onNodeUnselect: [{\n    type: Output\n  }],\n  onContextMenuSelect: [{\n    type: Output\n  }],\n  onHeaderCheckboxToggle: [{\n    type: Output\n  }],\n  onEditInit: [{\n    type: Output\n  }],\n  onEditComplete: [{\n    type: Output\n  }],\n  onEditCancel: [{\n    type: Output\n  }],\n  containerViewChild: [{\n    type: ViewChild,\n    args: ['container']\n  }],\n  resizeHelperViewChild: [{\n    type: ViewChild,\n    args: ['resizeHelper']\n  }],\n  reorderIndicatorUpViewChild: [{\n    type: ViewChild,\n    args: ['reorderIndicatorUp']\n  }],\n  reorderIndicatorDownViewChild: [{\n    type: ViewChild,\n    args: ['reorderIndicatorDown']\n  }],\n  tableViewChild: [{\n    type: ViewChild,\n    args: ['table']\n  }],\n  scrollableViewChild: [{\n    type: ViewChild,\n    args: ['scrollableView']\n  }],\n  scrollableFrozenViewChild: [{\n    type: ViewChild,\n    args: ['scrollableFrozenView']\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }],\n  value: [{\n    type: Input\n  }],\n  totalRecords: [{\n    type: Input\n  }],\n  sortField: [{\n    type: Input\n  }],\n  sortOrder: [{\n    type: Input\n  }],\n  multiSortMeta: [{\n    type: Input\n  }],\n  selection: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeTable, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTable',\n      template: \"\\n        <div #container [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" data-scrollselectors=\\\".p-treetable-scrollable-body\\\"\\n                [ngClass]=\\\"{'p-treetable p-component': true,\\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\\n                'p-treetable-auto-layout': autoLayout,\\n                'p-treetable-resizable': resizableColumns,\\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\\\">\\n            <div class=\\\"p-treetable-loading\\\" *ngIf=\\\"loading && showLoader\\\">\\n                <div class=\\\"p-treetable-loading-overlay p-component-overlay\\\">\\n                    <i [class]=\\\"'p-treetable-loading-icon pi-spin ' + loadingIcon\\\"></i>\\n                </div>\\n            </div>\\n            <div *ngIf=\\\"captionTemplate\\\" class=\\\"p-treetable-header\\\">\\n                <ng-container *ngTemplateOutlet=\\\"captionTemplate\\\"></ng-container>\\n            </div>\\n            <p-paginator [rows]=\\\"rows\\\" [first]=\\\"first\\\" [totalRecords]=\\\"totalRecords\\\" [pageLinkSize]=\\\"pageLinks\\\" styleClass=\\\"p-paginator-top\\\" [alwaysShow]=\\\"alwaysShowPaginator\\\"\\n                (onPageChange)=\\\"onPageChange($event)\\\" [rowsPerPageOptions]=\\\"rowsPerPageOptions\\\" *ngIf=\\\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\\\"\\n                [templateLeft]=\\\"paginatorLeftTemplate\\\" [templateRight]=\\\"paginatorRightTemplate\\\" [dropdownAppendTo]=\\\"paginatorDropdownAppendTo\\\"\\n                [currentPageReportTemplate]=\\\"currentPageReportTemplate\\\" [showFirstLastIcon]=\\\"showFirstLastIcon\\\" [dropdownItemTemplate]=\\\"paginatorDropdownItemTemplate\\\" [showCurrentPageReport]=\\\"showCurrentPageReport\\\" [showJumpToPageDropdown]=\\\"showJumpToPageDropdown\\\" [showPageLinks]=\\\"showPageLinks\\\"></p-paginator>\\n\\n            <div class=\\\"p-treetable-wrapper\\\" *ngIf=\\\"!scrollable\\\">\\n                <table #table [ngClass]=\\\"tableStyleClass\\\" [ngStyle]=\\\"tableStyle\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <thead class=\\\"p-treetable-thead\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"headerTemplate; context: {$implicit: columns}\\\"></ng-container>\\n                    </thead>\\n                    <tbody class=\\\"p-treetable-tbody\\\" [pTreeTableBody]=\\\"columns\\\" [pTreeTableBodyTemplate]=\\\"bodyTemplate\\\"></tbody>\\n                    <tfoot class=\\\"p-treetable-tfoot\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"footerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </tfoot>\\n                </table>\\n            </div>\\n\\n            <div class=\\\"p-treetable-scrollable-wrapper\\\" *ngIf=\\\"scrollable\\\">\\n               <div class=\\\"p-treetable-scrollable-view p-treetable-frozen-view\\\" *ngIf=\\\"frozenColumns||frozenBodyTemplate\\\" #scrollableFrozenView [ttScrollableView]=\\\"frozenColumns\\\" [frozen]=\\\"true\\\" [ngStyle]=\\\"{width: frozenWidth}\\\" [scrollHeight]=\\\"scrollHeight\\\"></div>\\n               <div class=\\\"p-treetable-scrollable-view\\\" #scrollableView [ttScrollableView]=\\\"columns\\\" [frozen]=\\\"false\\\" [scrollHeight]=\\\"scrollHeight\\\" [ngStyle]=\\\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\\\"></div>\\n            </div>\\n\\n            <p-paginator [rows]=\\\"rows\\\" [first]=\\\"first\\\" [totalRecords]=\\\"totalRecords\\\" [pageLinkSize]=\\\"pageLinks\\\" styleClass=\\\"p-paginator-bottom\\\" [alwaysShow]=\\\"alwaysShowPaginator\\\"\\n                (onPageChange)=\\\"onPageChange($event)\\\" [rowsPerPageOptions]=\\\"rowsPerPageOptions\\\" *ngIf=\\\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\\\"\\n                [templateLeft]=\\\"paginatorLeftTemplate\\\" [templateRight]=\\\"paginatorRightTemplate\\\" [dropdownAppendTo]=\\\"paginatorDropdownAppendTo\\\"\\n                [currentPageReportTemplate]=\\\"currentPageReportTemplate\\\" [showFirstLastIcon]=\\\"showFirstLastIcon\\\" [dropdownItemTemplate]=\\\"paginatorDropdownItemTemplate\\\" [showCurrentPageReport]=\\\"showCurrentPageReport\\\" [showJumpToPageDropdown]=\\\"showJumpToPageDropdown\\\" [showPageLinks]=\\\"showPageLinks\\\"></p-paginator>\\n            <div *ngIf=\\\"summaryTemplate\\\" class=\\\"p-treetable-footer\\\">\\n                <ng-container *ngTemplateOutlet=\\\"summaryTemplate\\\"></ng-container>\\n            </div>\\n\\n            <div #resizeHelper class=\\\"p-column-resizer-helper\\\" style=\\\"display:none\\\" *ngIf=\\\"resizableColumns\\\"></div>\\n\\n            <span #reorderIndicatorUp class=\\\"pi pi-arrow-down p-treetable-reorder-indicator-up\\\" *ngIf=\\\"reorderableColumns\\\"></span>\\n            <span #reorderIndicatorDown class=\\\"pi pi-arrow-up p-treetable-reorder-indicator-down\\\" *ngIf=\\\"reorderableColumns\\\"></span>\\n        </div>\\n    \",\n      providers: [TreeTableService],\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;table-layout:fixed;width:100%}.p-treetable .p-sortable-column{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-badge,.p-treetable .p-sortable-column .p-sortable-column-icon{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{align-items:center;display:inline-flex;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:inline-flex;justify-content:center;overflow:hidden;position:relative;user-select:none}.p-treetable-toggler,p-treetabletoggler+p-treetablecheckbox+span,p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-footer,.p-treetable-scrollable-header{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-view,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper{display:flex;flex:1;flex-direction:column;height:100%}.p-treetable-flex-scrollable .p-treetable-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-tbody>tr>td,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-thead>tr>th{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{border:1px solid transparent;cursor:col-resize;display:block;height:100%;margin:0;padding:0;position:absolute!important;right:0;top:0;width:.5rem}.p-treetable .p-column-resizer-helper{display:none;position:absolute;width:1px;z-index:10}.p-treetable .p-row-editor-cancel,.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-toggler{align-items:center;display:inline-flex;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-down,.p-treetable-reorder-indicator-up{display:none;position:absolute}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{align-items:center;display:flex;justify-content:center;position:absolute;z-index:2}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: TreeTableService\n    }, {\n      type: ɵngcc1.FilterService\n    }];\n  }, {\n    lazy: [{\n      type: Input\n    }],\n    lazyLoadOnInit: [{\n      type: Input\n    }],\n    first: [{\n      type: Input\n    }],\n    pageLinks: [{\n      type: Input\n    }],\n    alwaysShowPaginator: [{\n      type: Input\n    }],\n    paginatorPosition: [{\n      type: Input\n    }],\n    currentPageReportTemplate: [{\n      type: Input\n    }],\n    showFirstLastIcon: [{\n      type: Input\n    }],\n    showPageLinks: [{\n      type: Input\n    }],\n    defaultSortOrder: [{\n      type: Input\n    }],\n    sortMode: [{\n      type: Input\n    }],\n    resetPageOnSort: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionMode: [{\n      type: Input\n    }],\n    compareSelectionBy: [{\n      type: Input\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    showLoader: [{\n      type: Input\n    }],\n    virtualScrollDelay: [{\n      type: Input\n    }],\n    virtualRowHeight: [{\n      type: Input\n    }],\n    columnResizeMode: [{\n      type: Input\n    }],\n    rowTrackBy: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    filterDelay: [{\n      type: Input\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onPage: [{\n      type: Output\n    }],\n    onSort: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    sortFunction: [{\n      type: Output\n    }],\n    onColResize: [{\n      type: Output\n    }],\n    onColReorder: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onContextMenuSelect: [{\n      type: Output\n    }],\n    onHeaderCheckboxToggle: [{\n      type: Output\n    }],\n    onEditInit: [{\n      type: Output\n    }],\n    onEditComplete: [{\n      type: Output\n    }],\n    onEditCancel: [{\n      type: Output\n    }],\n    totalRecords: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    sortField: [{\n      type: Input\n    }],\n    sortOrder: [{\n      type: Input\n    }],\n    multiSortMeta: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    contextMenuSelection: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    tableStyle: [{\n      type: Input\n    }],\n    tableStyleClass: [{\n      type: Input\n    }],\n    autoLayout: [{\n      type: Input\n    }],\n    paginator: [{\n      type: Input\n    }],\n    rowsPerPageOptions: [{\n      type: Input\n    }],\n    paginatorDropdownAppendTo: [{\n      type: Input\n    }],\n    showCurrentPageReport: [{\n      type: Input\n    }],\n    showJumpToPageDropdown: [{\n      type: Input\n    }],\n    customSort: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    dataKey: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input\n    }],\n    rowHover: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    scrollable: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }],\n    frozenWidth: [{\n      type: Input\n    }],\n    frozenColumns: [{\n      type: Input\n    }],\n    resizableColumns: [{\n      type: Input\n    }],\n    reorderableColumns: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    globalFilterFields: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    containerViewChild: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    resizeHelperViewChild: [{\n      type: ViewChild,\n      args: ['resizeHelper']\n    }],\n    reorderIndicatorUpViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorUp']\n    }],\n    reorderIndicatorDownViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorDown']\n    }],\n    tableViewChild: [{\n      type: ViewChild,\n      args: ['table']\n    }],\n    scrollableViewChild: [{\n      type: ViewChild,\n      args: ['scrollableView']\n    }],\n    scrollableFrozenViewChild: [{\n      type: ViewChild,\n      args: ['scrollableFrozenView']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\nvar TTBody = /*#__PURE__*/function () {\n  function TTBody(tt, treeTableService, cd) {\n    var _this6 = this;\n\n    _classCallCheck(this, TTBody);\n\n    this.tt = tt;\n    this.treeTableService = treeTableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(function () {\n      if (_this6.tt.virtualScroll) {\n        _this6.cd.detectChanges();\n      }\n    });\n  }\n\n  _createClass(TTBody, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return TTBody;\n}();\n\nTTBody.ɵfac = function TTBody_Factory(t) {\n  return new (t || TTBody)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(TreeTableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTTBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TTBody,\n  selectors: [[\"\", \"pTreeTableBody\", \"\"]],\n  inputs: {\n    columns: [\"pTreeTableBody\", \"columns\"],\n    template: [\"pTreeTableBodyTemplate\", \"template\"],\n    frozen: \"frozen\"\n  },\n  attrs: _c11,\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"ngFor\", \"\", 3, \"ngForOf\", \"ngForTrackBy\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"cdkVirtualFor\", \"\", 3, \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplateCacheSize\"]],\n  template: function TTBody_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TTBody_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, TTBody_ng_container_1_Template, 2, 3, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(2, TTBody_ng_container_2_Template, 2, 5, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tt.virtualScroll);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tt.isEmpty());\n    }\n  },\n  directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc2.NgTemplateOutlet, ɵngcc4.CdkVirtualForOf],\n  encapsulation: 2\n});\n\nTTBody.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTTBody.propDecorators = {\n  columns: [{\n    type: Input,\n    args: [\"pTreeTableBody\"]\n  }],\n  template: [{\n    type: Input,\n    args: [\"pTreeTableBodyTemplate\"]\n  }],\n  frozen: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTBody, [{\n    type: Component,\n    args: [{\n      selector: '[pTreeTableBody]',\n      template: \"\\n        <ng-container *ngIf=\\\"!tt.virtualScroll\\\">\\n            <ng-template ngFor let-serializedNode let-rowIndex=\\\"index\\\" [ngForOf]=\\\"tt.serializedValue\\\" [ngForTrackBy]=\\\"tt.rowTrackBy\\\">\\n                <ng-container *ngIf=\\\"serializedNode.visible\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\\\"></ng-container>\\n                </ng-container>\\n            </ng-template>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"tt.virtualScroll\\\">\\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\\\"index\\\" [cdkVirtualForOf]=\\\"tt.serializedValue\\\" [cdkVirtualForTrackBy]=\\\"tt.rowTrackBy\\\" [cdkVirtualForTemplateCacheSize]=\\\"0\\\">\\n                <ng-container *ngIf=\\\"serializedNode.visible\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\\\"></ng-container>\\n                </ng-container>\\n            </ng-template>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"tt.isEmpty()\\\">\\n            <ng-container *ngTemplateOutlet=\\\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\\\"></ng-container>\\n        </ng-container>\\n    \",\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: [\"pTreeTableBody\"]\n    }],\n    template: [{\n      type: Input,\n      args: [\"pTreeTableBodyTemplate\"]\n    }],\n    frozen: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTScrollableView = /*#__PURE__*/function () {\n  function TTScrollableView(tt, el, zone) {\n    _classCallCheck(this, TTScrollableView);\n\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  _createClass(TTScrollableView, [{\n    key: \"scrollHeight\",\n    get: function get() {\n      return this._scrollHeight;\n    },\n    set: function set(val) {\n      this._scrollHeight = val;\n\n      if (val != null && (val.includes('%') || val.includes('calc'))) {\n        console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n      }\n\n      if (this.tt.virtualScroll && this.virtualScrollBody) {\n        this.virtualScrollBody.ngOnInit();\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (!this.frozen) {\n        if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n          DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n        }\n\n        var frozenView = this.el.nativeElement.previousElementSibling;\n\n        if (frozenView) {\n          if (this.tt.virtualScroll) this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');else this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n        }\n\n        var scrollBarWidth = DomHandler.calculateScrollbarWidth();\n        this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n        if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n          this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n        }\n      } else {\n        if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n          this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n        }\n      }\n\n      this.bindEvents();\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      var _this7 = this;\n\n      this.zone.runOutsideAngular(function () {\n        if (_this7.scrollHeaderViewChild && _this7.scrollHeaderViewChild.nativeElement) {\n          _this7.headerScrollListener = _this7.onHeaderScroll.bind(_this7);\n\n          _this7.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', _this7.headerScrollListener);\n        }\n\n        if (_this7.scrollFooterViewChild && _this7.scrollFooterViewChild.nativeElement) {\n          _this7.footerScrollListener = _this7.onFooterScroll.bind(_this7);\n\n          _this7.scrollFooterViewChild.nativeElement.addEventListener('scroll', _this7.footerScrollListener);\n        }\n\n        if (!_this7.frozen) {\n          _this7.bodyScrollListener = _this7.onBodyScroll.bind(_this7);\n          if (_this7.tt.virtualScroll) _this7.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', _this7.bodyScrollListener);else _this7.scrollBodyViewChild.nativeElement.addEventListener('scroll', _this7.bodyScrollListener);\n        }\n      });\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n      }\n\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n      }\n\n      if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n        this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n      }\n\n      if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n        this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n      }\n    }\n  }, {\n    key: \"onHeaderScroll\",\n    value: function onHeaderScroll() {\n      var scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n      this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n      }\n\n      this.preventBodyScrollPropagation = true;\n    }\n  }, {\n    key: \"onFooterScroll\",\n    value: function onFooterScroll() {\n      var scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n      this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n      }\n\n      this.preventBodyScrollPropagation = true;\n    }\n  }, {\n    key: \"onBodyScroll\",\n    value: function onBodyScroll(event) {\n      if (this.preventBodyScrollPropagation) {\n        this.preventBodyScrollPropagation = false;\n        return;\n      }\n\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n      }\n\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n      }\n\n      if (this.frozenSiblingBody) {\n        this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n      }\n    }\n  }, {\n    key: \"scrollToVirtualIndex\",\n    value: function scrollToVirtualIndex(index) {\n      if (this.virtualScrollBody) {\n        this.virtualScrollBody.scrollToIndex(index);\n      }\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      if (this.virtualScrollBody) {\n        this.virtualScrollBody.scrollTo(options);\n      } else {\n        if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n          this.scrollBodyViewChild.nativeElement.scrollTo(options);\n        } else {\n          this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n          this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unbindEvents();\n      this.frozenSiblingBody = null;\n    }\n  }]);\n\n  return TTScrollableView;\n}();\n\nTTScrollableView.ɵfac = function TTScrollableView_Factory(t) {\n  return new (t || TTScrollableView)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nTTScrollableView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TTScrollableView,\n  selectors: [[\"\", \"ttScrollableView\", \"\"]],\n  viewQuery: function TTScrollableView_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c14, 1);\n      ɵngcc0.ɵɵviewQuery(_c15, 1);\n      ɵngcc0.ɵɵviewQuery(_c16, 1);\n      ɵngcc0.ɵɵviewQuery(_c17, 1);\n      ɵngcc0.ɵɵviewQuery(_c18, 1);\n      ɵngcc0.ɵɵviewQuery(_c19, 1);\n      ɵngcc0.ɵɵviewQuery(_c20, 1);\n      ɵngcc0.ɵɵviewQuery(_c21, 1);\n      ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollLoadingTableViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualScrollBody = _t.first);\n    }\n  },\n  inputs: {\n    scrollHeight: \"scrollHeight\",\n    columns: [\"ttScrollableView\", \"columns\"],\n    frozen: \"frozen\"\n  },\n  attrs: _c22,\n  decls: 12,\n  vars: 13,\n  consts: [[1, \"p-treetable-scrollable-header\"], [\"scrollHeader\", \"\"], [1, \"p-treetable-scrollable-header-box\"], [\"scrollHeaderBox\", \"\"], [1, \"p-treetable-scrollable-header-table\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [4, \"ngIf\", \"ngIfElse\"], [\"virtualScrollTemplate\", \"\"], [\"class\", \"p-treetable-scrollable-footer\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-body\", 3, \"ngStyle\"], [\"scrollBody\", \"\"], [3, \"ngStyle\"], [\"scrollTable\", \"\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\"], [\"style\", \"background-color:transparent\", 4, \"ngIf\"], [2, \"background-color\", \"transparent\"], [\"scrollableAligner\", \"\"], [1, \"p-treetable-virtual-scrollable-body\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [1, \"p-treetable-scrollable-footer\"], [\"scrollFooter\", \"\"], [1, \"p-treetable-scrollable-footer-box\"], [\"scrollFooterBox\", \"\"], [1, \"p-treetable-scrollable-footer-table\", 3, \"ngClass\", \"ngStyle\"], [1, \"p-treetable-tfoot\"]],\n  template: function TTScrollableView_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n      ɵngcc0.ɵɵelementStart(4, \"table\", 4);\n      ɵngcc0.ɵɵtemplate(5, TTScrollableView_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n      ɵngcc0.ɵɵelementStart(6, \"thead\", 6);\n      ɵngcc0.ɵɵtemplate(7, TTScrollableView_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(8, TTScrollableView_ng_container_8_Template, 8, 15, \"ng-container\", 7);\n      ɵngcc0.ɵɵtemplate(9, TTScrollableView_ng_template_9_Template, 6, 16, \"ng-template\", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵtemplate(11, TTScrollableView_div_11_Template, 8, 10, \"div\", 9);\n    }\n\n    if (rf & 2) {\n      var _r5 = ɵngcc0.ɵɵreference(10);\n\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tt.tableStyleClass)(\"ngStyle\", ctx.tt.tableStyle);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenColGroupTemplate || ctx.tt.colGroupTemplate : ctx.tt.colGroupTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(9, _c7, ctx.columns));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenHeaderTemplate || ctx.tt.headerTemplate : ctx.tt.headerTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(11, _c7, ctx.columns));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll)(\"ngIfElse\", _r5);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tt.footerTemplate);\n    }\n  },\n  directives: [ɵngcc2.NgClass, ɵngcc2.NgStyle, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgIf, TTBody, ɵngcc4.CdkVirtualScrollViewport, ɵngcc4.CdkFixedSizeVirtualScroll],\n  encapsulation: 2\n});\n\nTTScrollableView.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nTTScrollableView.propDecorators = {\n  columns: [{\n    type: Input,\n    args: [\"ttScrollableView\"]\n  }],\n  frozen: [{\n    type: Input\n  }],\n  scrollHeaderViewChild: [{\n    type: ViewChild,\n    args: ['scrollHeader']\n  }],\n  scrollHeaderBoxViewChild: [{\n    type: ViewChild,\n    args: ['scrollHeaderBox']\n  }],\n  scrollBodyViewChild: [{\n    type: ViewChild,\n    args: ['scrollBody']\n  }],\n  scrollTableViewChild: [{\n    type: ViewChild,\n    args: ['scrollTable']\n  }],\n  scrollLoadingTableViewChild: [{\n    type: ViewChild,\n    args: ['loadingTable']\n  }],\n  scrollFooterViewChild: [{\n    type: ViewChild,\n    args: ['scrollFooter']\n  }],\n  scrollFooterBoxViewChild: [{\n    type: ViewChild,\n    args: ['scrollFooterBox']\n  }],\n  scrollableAlignerViewChild: [{\n    type: ViewChild,\n    args: ['scrollableAligner']\n  }],\n  virtualScrollBody: [{\n    type: ViewChild,\n    args: [CdkVirtualScrollViewport]\n  }],\n  scrollHeight: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTScrollableView, [{\n    type: Component,\n    args: [{\n      selector: '[ttScrollableView]',\n      template: \"\\n        <div #scrollHeader class=\\\"p-treetable-scrollable-header\\\">\\n            <div #scrollHeaderBox class=\\\"p-treetable-scrollable-header-box\\\">\\n                <table class=\\\"p-treetable-scrollable-header-table\\\" [ngClass]=\\\"tt.tableStyleClass\\\" [ngStyle]=\\\"tt.tableStyle\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <thead class=\\\"p-treetable-thead\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </thead>\\n                </table>\\n            </div>\\n        </div>\\n        <ng-container *ngIf=\\\"!tt.virtualScroll; else virtualScrollTemplate\\\">\\n            <div #scrollBody class=\\\"p-treetable-scrollable-body\\\" [ngStyle]=\\\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\\\">\\n                <table #scrollTable [class]=\\\"tt.tableStyleClass\\\" [ngStyle]=\\\"tt.tableStyle\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <tbody class=\\\"p-treetable-tbody\\\" [pTreeTableBody]=\\\"columns\\\" [pTreeTableBodyTemplate]=\\\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\\\" [frozen]=\\\"frozen\\\"></tbody>\\n                </table>\\n                <div #scrollableAligner style=\\\"background-color:transparent\\\" *ngIf=\\\"frozen\\\"></div>\\n            </div>\\n        </ng-container>\\n        <ng-template #virtualScrollTemplate>\\n            <cdk-virtual-scroll-viewport [itemSize]=\\\"tt.virtualRowHeight\\\" [style.height]=\\\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\\\"\\n                    [minBufferPx]=\\\"tt.minBufferPx\\\" [maxBufferPx]=\\\"tt.maxBufferPx\\\" class=\\\"p-treetable-virtual-scrollable-body\\\">\\n                <table #scrollTable [class]=\\\"tt.tableStyleClass\\\" [ngStyle]=\\\"tt.tableStyle\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <tbody class=\\\"p-treetable-tbody\\\" [pTreeTableBody]=\\\"columns\\\" [pTreeTableBodyTemplate]=\\\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\\\" [frozen]=\\\"frozen\\\"></tbody>\\n                </table>\\n                <div #scrollableAligner style=\\\"background-color:transparent\\\" *ngIf=\\\"frozen\\\"></div>\\n            </cdk-virtual-scroll-viewport>\\n        </ng-template>\\n        <div #scrollFooter *ngIf=\\\"tt.footerTemplate\\\" class=\\\"p-treetable-scrollable-footer\\\">\\n            <div #scrollFooterBox class=\\\"p-treetable-scrollable-footer-box\\\">\\n                <table class=\\\"p-treetable-scrollable-footer-table\\\" [ngClass]=\\\"tt.tableStyleClass\\\" [ngStyle]=\\\"tt.tableStyle\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <tfoot class=\\\"p-treetable-tfoot\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </div>\\n    \",\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    scrollHeight: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input,\n      args: [\"ttScrollableView\"]\n    }],\n    frozen: [{\n      type: Input\n    }],\n    scrollHeaderViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeader']\n    }],\n    scrollHeaderBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeaderBox']\n    }],\n    scrollBodyViewChild: [{\n      type: ViewChild,\n      args: ['scrollBody']\n    }],\n    scrollTableViewChild: [{\n      type: ViewChild,\n      args: ['scrollTable']\n    }],\n    scrollLoadingTableViewChild: [{\n      type: ViewChild,\n      args: ['loadingTable']\n    }],\n    scrollFooterViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooter']\n    }],\n    scrollFooterBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooterBox']\n    }],\n    scrollableAlignerViewChild: [{\n      type: ViewChild,\n      args: ['scrollableAligner']\n    }],\n    virtualScrollBody: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport]\n    }]\n  });\n})();\n\nvar TTSortableColumn = /*#__PURE__*/function () {\n  function TTSortableColumn(tt) {\n    var _this8 = this;\n\n    _classCallCheck(this, TTSortableColumn);\n\n    this.tt = tt;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.sortSource$.subscribe(function (sortMeta) {\n        _this8.updateSortState();\n      });\n    }\n  }\n\n  _createClass(TTSortableColumn, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.isEnabled()) {\n        this.updateSortState();\n      }\n    }\n  }, {\n    key: \"updateSortState\",\n    value: function updateSortState() {\n      this.sorted = this.tt.isSorted(this.field);\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (this.isEnabled()) {\n        this.updateSortState();\n        this.tt.sort({\n          originalEvent: event,\n          field: this.field\n        });\n        DomHandler.clearSelection();\n      }\n    }\n  }, {\n    key: \"onEnterKey\",\n    value: function onEnterKey(event) {\n      this.onClick(event);\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.ttSortableColumnDisabled !== true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return TTSortableColumn;\n}();\n\nTTSortableColumn.ɵfac = function TTSortableColumn_Factory(t) {\n  return new (t || TTSortableColumn)(ɵngcc0.ɵɵdirectiveInject(TreeTable));\n};\n\nTTSortableColumn.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTSortableColumn,\n  selectors: [[\"\", \"ttSortableColumn\", \"\"]],\n  hostVars: 6,\n  hostBindings: function TTSortableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TTSortableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown.enter\", function TTSortableColumn_keydown_enter_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? \"0\" : null)(\"role\", \"columnheader\");\n      ɵngcc0.ɵɵclassProp(\"p-sortable-column\", ctx.isEnabled())(\"p-highlight\", ctx.sorted);\n    }\n  },\n  inputs: {\n    field: [\"ttSortableColumn\", \"field\"],\n    ttSortableColumnDisabled: \"ttSortableColumnDisabled\"\n  }\n});\n\nTTSortableColumn.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }];\n};\n\nTTSortableColumn.propDecorators = {\n  field: [{\n    type: Input,\n    args: [\"ttSortableColumn\"]\n  }],\n  ttSortableColumnDisabled: [{\n    type: Input\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  onEnterKey: [{\n    type: HostListener,\n    args: ['keydown.enter', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTSortableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSortableColumn]',\n      host: {\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }],\n    field: [{\n      type: Input,\n      args: [\"ttSortableColumn\"]\n    }],\n    ttSortableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTSortIcon = /*#__PURE__*/function () {\n  function TTSortIcon(tt, cd) {\n    var _this9 = this;\n\n    _classCallCheck(this, TTSortIcon);\n\n    this.tt = tt;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.sortSource$.subscribe(function (sortMeta) {\n      _this9.updateSortState();\n\n      _this9.cd.markForCheck();\n    });\n  }\n\n  _createClass(TTSortIcon, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.updateSortState();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"updateSortState\",\n    value: function updateSortState() {\n      if (this.tt.sortMode === 'single') {\n        this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n      } else if (this.tt.sortMode === 'multiple') {\n        var sortMeta = this.tt.getSortMeta(this.field);\n        this.sortOrder = sortMeta ? sortMeta.order : 0;\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return TTSortIcon;\n}();\n\nTTSortIcon.ɵfac = function TTSortIcon_Factory(t) {\n  return new (t || TTSortIcon)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTTSortIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TTSortIcon,\n  selectors: [[\"p-treeTableSortIcon\"]],\n  inputs: {\n    field: \"field\",\n    ariaLabelDesc: \"ariaLabelDesc\",\n    ariaLabelAsc: \"ariaLabelAsc\"\n  },\n  decls: 1,\n  vars: 5,\n  consts: [[1, \"p-sortable-column-icon\", \"pi\", \"pi-fw\", 3, \"ngClass\"]],\n  template: function TTSortIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"i\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(1, _c24, ctx.sortOrder === 1, ctx.sortOrder === -1, ctx.sortOrder === 0));\n    }\n  },\n  directives: [ɵngcc2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nTTSortIcon.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTTSortIcon.propDecorators = {\n  field: [{\n    type: Input\n  }],\n  ariaLabelDesc: [{\n    type: Input\n  }],\n  ariaLabelAsc: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTSortIcon, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableSortIcon',\n      template: \"\\n        <i class=\\\"p-sortable-column-icon pi pi-fw\\\" [ngClass]=\\\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\\\"></i>\\n    \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    field: [{\n      type: Input\n    }],\n    ariaLabelDesc: [{\n      type: Input\n    }],\n    ariaLabelAsc: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTResizableColumn = /*#__PURE__*/function () {\n  function TTResizableColumn(tt, el, zone) {\n    _classCallCheck(this, TTResizableColumn);\n\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  _createClass(TTResizableColumn, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this10 = this;\n\n      if (this.isEnabled()) {\n        DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n        this.resizer = document.createElement('span');\n        this.resizer.className = 'p-column-resizer';\n        this.el.nativeElement.appendChild(this.resizer);\n        this.zone.runOutsideAngular(function () {\n          _this10.resizerMouseDownListener = _this10.onMouseDown.bind(_this10);\n\n          _this10.resizer.addEventListener('mousedown', _this10.resizerMouseDownListener);\n        });\n      }\n    }\n  }, {\n    key: \"bindDocumentEvents\",\n    value: function bindDocumentEvents() {\n      var _this11 = this;\n\n      this.zone.runOutsideAngular(function () {\n        _this11.documentMouseMoveListener = _this11.onDocumentMouseMove.bind(_this11);\n        document.addEventListener('mousemove', _this11.documentMouseMoveListener);\n        _this11.documentMouseUpListener = _this11.onDocumentMouseUp.bind(_this11);\n        document.addEventListener('mouseup', _this11.documentMouseUpListener);\n      });\n    }\n  }, {\n    key: \"unbindDocumentEvents\",\n    value: function unbindDocumentEvents() {\n      if (this.documentMouseMoveListener) {\n        document.removeEventListener('mousemove', this.documentMouseMoveListener);\n        this.documentMouseMoveListener = null;\n      }\n\n      if (this.documentMouseUpListener) {\n        document.removeEventListener('mouseup', this.documentMouseUpListener);\n        this.documentMouseUpListener = null;\n      }\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(event) {\n      this.tt.onColumnResizeBegin(event);\n      this.bindDocumentEvents();\n    }\n  }, {\n    key: \"onDocumentMouseMove\",\n    value: function onDocumentMouseMove(event) {\n      this.tt.onColumnResize(event);\n    }\n  }, {\n    key: \"onDocumentMouseUp\",\n    value: function onDocumentMouseUp(event) {\n      this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n      this.unbindDocumentEvents();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.ttResizableColumnDisabled !== true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.resizerMouseDownListener) {\n        this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n      }\n\n      this.unbindDocumentEvents();\n    }\n  }]);\n\n  return TTResizableColumn;\n}();\n\nTTResizableColumn.ɵfac = function TTResizableColumn_Factory(t) {\n  return new (t || TTResizableColumn)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nTTResizableColumn.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTResizableColumn,\n  selectors: [[\"\", \"ttResizableColumn\", \"\"]],\n  inputs: {\n    ttResizableColumnDisabled: \"ttResizableColumnDisabled\"\n  }\n});\n\nTTResizableColumn.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nTTResizableColumn.propDecorators = {\n  ttResizableColumnDisabled: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTResizableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttResizableColumn]'\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    ttResizableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTReorderableColumn = /*#__PURE__*/function () {\n  function TTReorderableColumn(tt, el, zone) {\n    _classCallCheck(this, TTReorderableColumn);\n\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  _createClass(TTReorderableColumn, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.isEnabled()) {\n        this.bindEvents();\n      }\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      var _this12 = this;\n\n      this.zone.runOutsideAngular(function () {\n        _this12.mouseDownListener = _this12.onMouseDown.bind(_this12);\n\n        _this12.el.nativeElement.addEventListener('mousedown', _this12.mouseDownListener);\n\n        _this12.dragStartListener = _this12.onDragStart.bind(_this12);\n\n        _this12.el.nativeElement.addEventListener('dragstart', _this12.dragStartListener);\n\n        _this12.dragOverListener = _this12.onDragEnter.bind(_this12);\n\n        _this12.el.nativeElement.addEventListener('dragover', _this12.dragOverListener);\n\n        _this12.dragEnterListener = _this12.onDragEnter.bind(_this12);\n\n        _this12.el.nativeElement.addEventListener('dragenter', _this12.dragEnterListener);\n\n        _this12.dragLeaveListener = _this12.onDragLeave.bind(_this12);\n\n        _this12.el.nativeElement.addEventListener('dragleave', _this12.dragLeaveListener);\n      });\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      if (this.mouseDownListener) {\n        document.removeEventListener('mousedown', this.mouseDownListener);\n        this.mouseDownListener = null;\n      }\n\n      if (this.dragOverListener) {\n        document.removeEventListener('dragover', this.dragOverListener);\n        this.dragOverListener = null;\n      }\n\n      if (this.dragEnterListener) {\n        document.removeEventListener('dragenter', this.dragEnterListener);\n        this.dragEnterListener = null;\n      }\n\n      if (this.dragEnterListener) {\n        document.removeEventListener('dragenter', this.dragEnterListener);\n        this.dragEnterListener = null;\n      }\n\n      if (this.dragLeaveListener) {\n        document.removeEventListener('dragleave', this.dragLeaveListener);\n        this.dragLeaveListener = null;\n      }\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(event) {\n      if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer')) this.el.nativeElement.draggable = false;else this.el.nativeElement.draggable = true;\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(event) {\n      this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n  }, {\n    key: \"onDragOver\",\n    value: function onDragOver(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"onDragEnter\",\n    value: function onDragEnter(event) {\n      this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n  }, {\n    key: \"onDragLeave\",\n    value: function onDragLeave(event) {\n      this.tt.onColumnDragLeave(event);\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(event) {\n      if (this.isEnabled()) {\n        this.tt.onColumnDrop(event, this.el.nativeElement);\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.ttReorderableColumnDisabled !== true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unbindEvents();\n    }\n  }]);\n\n  return TTReorderableColumn;\n}();\n\nTTReorderableColumn.ɵfac = function TTReorderableColumn_Factory(t) {\n  return new (t || TTReorderableColumn)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nTTReorderableColumn.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTReorderableColumn,\n  selectors: [[\"\", \"ttReorderableColumn\", \"\"]],\n  hostBindings: function TTReorderableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"drop\", function TTReorderableColumn_drop_HostBindingHandler($event) {\n        return ctx.onDrop($event);\n      });\n    }\n  },\n  inputs: {\n    ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\"\n  }\n});\n\nTTReorderableColumn.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nTTReorderableColumn.propDecorators = {\n  ttReorderableColumnDisabled: [{\n    type: Input\n  }],\n  onDrop: [{\n    type: HostListener,\n    args: ['drop', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTReorderableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttReorderableColumn]'\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }],\n    ttReorderableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTSelectableRow = /*#__PURE__*/function () {\n  function TTSelectableRow(tt, tableService) {\n    var _this13 = this;\n\n    _classCallCheck(this, TTSelectableRow);\n\n    this.tt = tt;\n    this.tableService = tableService;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(function () {\n        _this13.selected = _this13.tt.isSelected(_this13.rowNode.node);\n      });\n    }\n  }\n\n  _createClass(TTSelectableRow, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.isEnabled()) {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (this.isEnabled()) {\n        this.tt.handleRowClick({\n          originalEvent: event,\n          rowNode: this.rowNode\n        });\n      }\n    }\n  }, {\n    key: \"onEnterKey\",\n    value: function onEnterKey(event) {\n      if (event.which === 13) {\n        this.onClick(event);\n      }\n    }\n  }, {\n    key: \"onTouchEnd\",\n    value: function onTouchEnd(event) {\n      if (this.isEnabled()) {\n        this.tt.handleRowTouchEnd(event);\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.ttSelectableRowDisabled !== true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return TTSelectableRow;\n}();\n\nTTSelectableRow.ɵfac = function TTSelectableRow_Factory(t) {\n  return new (t || TTSelectableRow)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(TreeTableService));\n};\n\nTTSelectableRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTSelectableRow,\n  selectors: [[\"\", \"ttSelectableRow\", \"\"]],\n  hostVars: 2,\n  hostBindings: function TTSelectableRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TTSelectableRow_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTSelectableRow_keydown_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      })(\"touchend\", function TTSelectableRow_touchend_HostBindingHandler($event) {\n        return ctx.onTouchEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRow\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n\nTTSelectableRow.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }];\n};\n\nTTSelectableRow.propDecorators = {\n  rowNode: [{\n    type: Input,\n    args: [\"ttSelectableRow\"]\n  }],\n  ttSelectableRowDisabled: [{\n    type: Input\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  onEnterKey: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }],\n  onTouchEnd: [{\n    type: HostListener,\n    args: ['touchend', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTSelectableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRow]',\n      host: {\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    onTouchEnd: [{\n      type: HostListener,\n      args: ['touchend', ['$event']]\n    }],\n    rowNode: [{\n      type: Input,\n      args: [\"ttSelectableRow\"]\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTSelectableRowDblClick = /*#__PURE__*/function () {\n  function TTSelectableRowDblClick(tt, tableService) {\n    var _this14 = this;\n\n    _classCallCheck(this, TTSelectableRowDblClick);\n\n    this.tt = tt;\n    this.tableService = tableService;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(function () {\n        _this14.selected = _this14.tt.isSelected(_this14.rowNode.node);\n      });\n    }\n  }\n\n  _createClass(TTSelectableRowDblClick, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.isEnabled()) {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (this.isEnabled()) {\n        this.tt.handleRowClick({\n          originalEvent: event,\n          rowNode: this.rowNode\n        });\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.ttSelectableRowDisabled !== true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return TTSelectableRowDblClick;\n}();\n\nTTSelectableRowDblClick.ɵfac = function TTSelectableRowDblClick_Factory(t) {\n  return new (t || TTSelectableRowDblClick)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(TreeTableService));\n};\n\nTTSelectableRowDblClick.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTSelectableRowDblClick,\n  selectors: [[\"\", \"ttSelectableRowDblClick\", \"\"]],\n  hostVars: 2,\n  hostBindings: function TTSelectableRowDblClick_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"dblclick\", function TTSelectableRowDblClick_dblclick_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n\nTTSelectableRowDblClick.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }];\n};\n\nTTSelectableRowDblClick.propDecorators = {\n  rowNode: [{\n    type: Input,\n    args: [\"ttSelectableRowDblClick\"]\n  }],\n  ttSelectableRowDisabled: [{\n    type: Input\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['dblclick', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTSelectableRowDblClick, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRowDblClick]',\n      host: {\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    onClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }],\n    rowNode: [{\n      type: Input,\n      args: [\"ttSelectableRowDblClick\"]\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTContextMenuRow = /*#__PURE__*/function () {\n  function TTContextMenuRow(tt, tableService, el) {\n    var _this15 = this;\n\n    _classCallCheck(this, TTContextMenuRow);\n\n    this.tt = tt;\n    this.tableService = tableService;\n    this.el = el;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.contextMenuSource$.subscribe(function (node) {\n        _this15.selected = _this15.tt.equals(_this15.rowNode.node, node);\n      });\n    }\n  }\n\n  _createClass(TTContextMenuRow, [{\n    key: \"onContextMenu\",\n    value: function onContextMenu(event) {\n      if (this.isEnabled()) {\n        this.tt.handleRowRightClick({\n          originalEvent: event,\n          rowNode: this.rowNode\n        });\n        this.el.nativeElement.focus();\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.ttContextMenuRowDisabled !== true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return TTContextMenuRow;\n}();\n\nTTContextMenuRow.ɵfac = function TTContextMenuRow_Factory(t) {\n  return new (t || TTContextMenuRow)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(TreeTableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nTTContextMenuRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTContextMenuRow,\n  selectors: [[\"\", \"ttContextMenuRow\", \"\"]],\n  hostVars: 3,\n  hostBindings: function TTContextMenuRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"contextmenu\", function TTContextMenuRow_contextmenu_HostBindingHandler($event) {\n        return ctx.onContextMenu($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? 0 : undefined);\n      ɵngcc0.ɵɵclassProp(\"p-highlight-contextmenu\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttContextMenuRow\", \"rowNode\"],\n    ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\"\n  }\n});\n\nTTContextMenuRow.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: ElementRef\n  }];\n};\n\nTTContextMenuRow.propDecorators = {\n  rowNode: [{\n    type: Input,\n    args: [\"ttContextMenuRow\"]\n  }],\n  ttContextMenuRowDisabled: [{\n    type: Input\n  }],\n  onContextMenu: [{\n    type: HostListener,\n    args: ['contextmenu', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTContextMenuRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttContextMenuRow]',\n      host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    onContextMenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }],\n    rowNode: [{\n      type: Input,\n      args: [\"ttContextMenuRow\"]\n    }],\n    ttContextMenuRowDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TTCheckbox = /*#__PURE__*/function () {\n  function TTCheckbox(tt, tableService, cd) {\n    var _this16 = this;\n\n    _classCallCheck(this, TTCheckbox);\n\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.selectionSource$.subscribe(function () {\n      _this16.checked = _this16.tt.isSelected(_this16.rowNode.node);\n\n      _this16.cd.markForCheck();\n    });\n  }\n\n  _createClass(TTCheckbox, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (!this.disabled) {\n        this.tt.toggleNodeWithCheckbox({\n          originalEvent: event,\n          rowNode: this.rowNode\n        });\n      }\n\n      DomHandler.clearSelection();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return TTCheckbox;\n}();\n\nTTCheckbox.ɵfac = function TTCheckbox_Factory(t) {\n  return new (t || TTCheckbox)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(TreeTableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTTCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TTCheckbox,\n  selectors: [[\"p-treeTableCheckbox\"]],\n  viewQuery: function TTCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c25, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    rowNode: [\"value\", \"rowNode\"]\n  },\n  decls: 6,\n  vars: 10,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"focus\", \"blur\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", \"pi\", 3, \"ngClass\"]],\n  template: function TTCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function TTCheckbox_Template_div_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"input\", 2);\n      ɵngcc0.ɵɵlistener(\"focus\", function TTCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n      ɵngcc0.ɵɵelement(5, \"span\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"checked\", ctx.checked);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(4, _c26, ctx.checked, ctx.disabled));\n      ɵngcc0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(7, _c27, ctx.checked, ctx.rowNode.node.partialSelected));\n    }\n  },\n  directives: [ɵngcc2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nTTCheckbox.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTTCheckbox.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  rowNode: [{\n    type: Input,\n    args: [\"value\"]\n  }],\n  boxViewChild: [{\n    type: ViewChild,\n    args: ['box']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCheckbox',\n      template: \"\\n        <div class=\\\"p-checkbox p-component\\\" (click)=\\\"onClick($event)\\\">\\n            <div class=\\\"p-hidden-accessible\\\">\\n                <input type=\\\"checkbox\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\">\\n            </div>\\n            <div #box [ngClass]=\\\"{'p-checkbox-box':true,\\n                'p-highlight':checked, 'p-disabled':disabled}\\\"  role=\\\"checkbox\\\" [attr.aria-checked]=\\\"checked\\\">\\n                <span class=\\\"p-checkbox-icon pi\\\" [ngClass]=\\\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\\\"></span>\\n            </div>\\n        </div>\\n    \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    rowNode: [{\n      type: Input,\n      args: [\"value\"]\n    }],\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\n\nvar TTHeaderCheckbox = /*#__PURE__*/function () {\n  function TTHeaderCheckbox(tt, tableService, cd) {\n    var _this17 = this;\n\n    _classCallCheck(this, TTHeaderCheckbox);\n\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(function () {\n      _this17.checked = _this17.updateCheckedState();\n    });\n    this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(function () {\n      _this17.checked = _this17.updateCheckedState();\n    });\n  }\n\n  _createClass(TTHeaderCheckbox, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.checked = this.updateCheckedState();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event, checked) {\n      if (this.tt.value && this.tt.value.length > 0) {\n        this.tt.toggleNodesWithCheckbox(event, !checked);\n      }\n\n      DomHandler.clearSelection();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.selectionChangeSubscription) {\n        this.selectionChangeSubscription.unsubscribe();\n      }\n\n      if (this.valueChangeSubscription) {\n        this.valueChangeSubscription.unsubscribe();\n      }\n    }\n  }, {\n    key: \"updateCheckedState\",\n    value: function updateCheckedState() {\n      this.cd.markForCheck();\n      var checked;\n      var data = this.tt.filteredNodes || this.tt.value;\n\n      if (data) {\n        var _iterator10 = _createForOfIteratorHelper(data),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var node = _step10.value;\n\n            if (this.tt.isSelected(node)) {\n              checked = true;\n            } else {\n              checked = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      } else {\n        checked = false;\n      }\n\n      return checked;\n    }\n  }]);\n\n  return TTHeaderCheckbox;\n}();\n\nTTHeaderCheckbox.ɵfac = function TTHeaderCheckbox_Factory(t) {\n  return new (t || TTHeaderCheckbox)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(TreeTableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTTHeaderCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TTHeaderCheckbox,\n  selectors: [[\"p-treeTableHeaderCheckbox\"]],\n  viewQuery: function TTHeaderCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c25, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n    }\n  },\n  decls: 7,\n  vars: 10,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"disabled\", \"focus\", \"blur\"], [\"cb\", \"\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"]],\n  template: function TTHeaderCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function TTHeaderCheckbox_Template_div_click_0_listener($event) {\n        ɵngcc0.ɵɵrestoreView(_r2);\n\n        var _r0 = ɵngcc0.ɵɵreference(3);\n\n        return ctx.onClick($event, _r0.checked);\n      });\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"input\", 2, 3);\n      ɵngcc0.ɵɵlistener(\"focus\", function TTHeaderCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTHeaderCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"div\", 4, 5);\n      ɵngcc0.ɵɵelement(6, \"span\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", !ctx.tt.value || ctx.tt.value.length === 0);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(5, _c26, ctx.checked, !ctx.tt.value || ctx.tt.value.length === 0));\n      ɵngcc0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(8, _c28, ctx.checked));\n    }\n  },\n  directives: [ɵngcc2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nTTHeaderCheckbox.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: TreeTableService\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nTTHeaderCheckbox.propDecorators = {\n  boxViewChild: [{\n    type: ViewChild,\n    args: ['box']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTHeaderCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableHeaderCheckbox',\n      template: \"\\n        <div class=\\\"p-checkbox p-component\\\" (click)=\\\"onClick($event, cb.checked)\\\">\\n            <div class=\\\"p-hidden-accessible\\\">\\n                <input #cb type=\\\"checkbox\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\" [disabled]=\\\"!tt.value||tt.value.length === 0\\\">\\n            </div>\\n            <div #box [ngClass]=\\\"{'p-checkbox-box':true,\\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\\\"  role=\\\"checkbox\\\" [attr.aria-checked]=\\\"checked\\\">\\n                <span class=\\\"p-checkbox-icon\\\" [ngClass]=\\\"{'pi pi-check':checked}\\\"></span>\\n            </div>\\n        </div>\\n    \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\n\nvar TTEditableColumn = /*#__PURE__*/function () {\n  function TTEditableColumn(tt, el, zone) {\n    _classCallCheck(this, TTEditableColumn);\n\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  _createClass(TTEditableColumn, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.isEnabled()) {\n        DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (this.isEnabled()) {\n        this.tt.editingCellClick = true;\n\n        if (this.tt.editingCell) {\n          if (this.tt.editingCell !== this.el.nativeElement) {\n            if (!this.tt.isEditingCellValid()) {\n              return;\n            }\n\n            DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n            this.openCell();\n          }\n        } else {\n          this.openCell();\n        }\n      }\n    }\n  }, {\n    key: \"openCell\",\n    value: function openCell() {\n      var _this18 = this;\n\n      this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n      DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n      this.tt.onEditInit.emit({\n        field: this.field,\n        data: this.data\n      });\n      this.tt.editingCellClick = true;\n      this.zone.runOutsideAngular(function () {\n        setTimeout(function () {\n          var focusable = DomHandler.findSingle(_this18.el.nativeElement, 'input, textarea');\n\n          if (focusable) {\n            focusable.focus();\n          }\n        }, 50);\n      });\n    }\n  }, {\n    key: \"closeEditingCell\",\n    value: function closeEditingCell() {\n      DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n      this.tt.editingCell = null;\n      this.tt.unbindDocumentEditListener();\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      if (this.isEnabled()) {\n        //enter\n        if (event.keyCode == 13) {\n          if (this.tt.isEditingCellValid()) {\n            DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n            this.closeEditingCell();\n            this.tt.onEditComplete.emit({\n              field: this.field,\n              data: this.data\n            });\n          }\n\n          event.preventDefault();\n        } //escape\n        else if (event.keyCode == 27) {\n            if (this.tt.isEditingCellValid()) {\n              DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n              this.closeEditingCell();\n              this.tt.onEditCancel.emit({\n                field: this.field,\n                data: this.data\n              });\n            }\n\n            event.preventDefault();\n          } //tab\n          else if (event.keyCode == 9) {\n              this.tt.onEditComplete.emit({\n                field: this.field,\n                data: this.data\n              });\n              if (event.shiftKey) this.moveToPreviousCell(event);else this.moveToNextCell(event);\n            }\n      }\n    }\n  }, {\n    key: \"findCell\",\n    value: function findCell(element) {\n      if (element) {\n        var cell = element;\n\n        while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n          cell = cell.parentElement;\n        }\n\n        return cell;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"moveToPreviousCell\",\n    value: function moveToPreviousCell(event) {\n      var currentCell = this.findCell(event.target);\n      var row = currentCell.parentElement;\n      var targetCell = this.findPreviousEditableColumn(currentCell);\n\n      if (targetCell) {\n        DomHandler.invokeElementMethod(targetCell, 'click');\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"moveToNextCell\",\n    value: function moveToNextCell(event) {\n      var currentCell = this.findCell(event.target);\n      var row = currentCell.parentElement;\n      var targetCell = this.findNextEditableColumn(currentCell);\n\n      if (targetCell) {\n        DomHandler.invokeElementMethod(targetCell, 'click');\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"findPreviousEditableColumn\",\n    value: function findPreviousEditableColumn(cell) {\n      var prevCell = cell.previousElementSibling;\n\n      if (!prevCell) {\n        var previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n\n        if (previousRow) {\n          prevCell = previousRow.lastElementChild;\n        }\n      }\n\n      if (prevCell) {\n        if (DomHandler.hasClass(prevCell, 'p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"findNextEditableColumn\",\n    value: function findNextEditableColumn(cell) {\n      var nextCell = cell.nextElementSibling;\n\n      if (!nextCell) {\n        var nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n\n        if (nextRow) {\n          nextCell = nextRow.firstElementChild;\n        }\n      }\n\n      if (nextCell) {\n        if (DomHandler.hasClass(nextCell, 'p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.ttEditableColumnDisabled !== true;\n    }\n  }]);\n\n  return TTEditableColumn;\n}();\n\nTTEditableColumn.ɵfac = function TTEditableColumn_Factory(t) {\n  return new (t || TTEditableColumn)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nTTEditableColumn.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTEditableColumn,\n  selectors: [[\"\", \"ttEditableColumn\", \"\"]],\n  hostBindings: function TTEditableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TTEditableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTEditableColumn_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    data: [\"ttEditableColumn\", \"data\"],\n    field: [\"ttEditableColumnField\", \"field\"],\n    ttEditableColumnDisabled: \"ttEditableColumnDisabled\"\n  }\n});\n\nTTEditableColumn.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nTTEditableColumn.propDecorators = {\n  data: [{\n    type: Input,\n    args: [\"ttEditableColumn\"]\n  }],\n  field: [{\n    type: Input,\n    args: [\"ttEditableColumnField\"]\n  }],\n  ttEditableColumnDisabled: [{\n    type: Input\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  onKeyDown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTEditableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttEditableColumn]'\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    data: [{\n      type: Input,\n      args: [\"ttEditableColumn\"]\n    }],\n    field: [{\n      type: Input,\n      args: [\"ttEditableColumnField\"]\n    }],\n    ttEditableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TreeTableCellEditor = /*#__PURE__*/function () {\n  function TreeTableCellEditor(tt, editableColumn) {\n    _classCallCheck(this, TreeTableCellEditor);\n\n    this.tt = tt;\n    this.editableColumn = editableColumn;\n  }\n\n  _createClass(TreeTableCellEditor, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this19 = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'input':\n            _this19.inputTemplate = item.template;\n            break;\n\n          case 'output':\n            _this19.outputTemplate = item.template;\n            break;\n        }\n      });\n    }\n  }]);\n\n  return TreeTableCellEditor;\n}();\n\nTreeTableCellEditor.ɵfac = function TreeTableCellEditor_Factory(t) {\n  return new (t || TreeTableCellEditor)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(TTEditableColumn));\n};\n\nTreeTableCellEditor.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeTableCellEditor,\n  selectors: [[\"p-treeTableCellEditor\"]],\n  contentQueries: function TreeTableCellEditor_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n  template: function TreeTableCellEditor_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeTableCellEditor_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tt.editingCell === ctx.editableColumn.el.nativeElement);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.tt.editingCell || ctx.tt.editingCell !== ctx.editableColumn.el.nativeElement);\n    }\n  },\n  directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet],\n  encapsulation: 2\n});\n\nTreeTableCellEditor.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: TTEditableColumn\n  }];\n};\n\nTreeTableCellEditor.propDecorators = {\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeTableCellEditor, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCellEditor',\n      template: \"\\n        <ng-container *ngIf=\\\"tt.editingCell === editableColumn.el.nativeElement\\\">\\n            <ng-container *ngTemplateOutlet=\\\"inputTemplate\\\"></ng-container>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\\\">\\n            <ng-container *ngTemplateOutlet=\\\"outputTemplate\\\"></ng-container>\\n        </ng-container>\\n    \",\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TTEditableColumn\n    }];\n  }, {\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\nvar TTRow = /*#__PURE__*/function () {\n  function TTRow(tt, el, zone) {\n    _classCallCheck(this, TTRow);\n\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  _createClass(TTRow, [{\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      switch (event.which) {\n        //down arrow\n        case 40:\n          var nextRow = this.el.nativeElement.nextElementSibling;\n\n          if (nextRow) {\n            nextRow.focus();\n          }\n\n          event.preventDefault();\n          break;\n        //down arrow\n\n        case 38:\n          var prevRow = this.el.nativeElement.previousElementSibling;\n\n          if (prevRow) {\n            prevRow.focus();\n          }\n\n          event.preventDefault();\n          break;\n        //left arrow\n\n        case 37:\n          if (this.rowNode.node.expanded) {\n            this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n            this.rowNode.node.expanded = false;\n            this.tt.onNodeCollapse.emit({\n              originalEvent: event,\n              node: this.rowNode.node\n            });\n            this.tt.updateSerializedValue();\n            this.tt.tableService.onUIUpdate(this.tt.value);\n            this.restoreFocus();\n          }\n\n          break;\n        //right arrow\n\n        case 39:\n          if (!this.rowNode.node.expanded) {\n            this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n            this.rowNode.node.expanded = true;\n            this.tt.onNodeExpand.emit({\n              originalEvent: event,\n              node: this.rowNode.node\n            });\n            this.tt.updateSerializedValue();\n            this.tt.tableService.onUIUpdate(this.tt.value);\n            this.restoreFocus();\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"restoreFocus\",\n    value: function restoreFocus() {\n      var _this20 = this;\n\n      this.zone.runOutsideAngular(function () {\n        setTimeout(function () {\n          var row = DomHandler.findSingle(_this20.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[_this20.tt.toggleRowIndex];\n\n          if (row) {\n            row.focus();\n          }\n        }, 25);\n      });\n    }\n  }]);\n\n  return TTRow;\n}();\n\nTTRow.ɵfac = function TTRow_Factory(t) {\n  return new (t || TTRow)(ɵngcc0.ɵɵdirectiveInject(TreeTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nTTRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TTRow,\n  selectors: [[\"\", \"ttRow\", \"\"]],\n  hostVars: 1,\n  hostBindings: function TTRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function TTRow_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", \"0\");\n    }\n  },\n  inputs: {\n    rowNode: [\"ttRow\", \"rowNode\"]\n  }\n});\n\nTTRow.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nTTRow.propDecorators = {\n  rowNode: [{\n    type: Input,\n    args: ['ttRow']\n  }],\n  onKeyDown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TTRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttRow]',\n      host: {\n        '[attr.tabindex]': '\"0\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    rowNode: [{\n      type: Input,\n      args: ['ttRow']\n    }]\n  });\n})();\n\nvar TreeTableToggler = /*#__PURE__*/function () {\n  function TreeTableToggler(tt) {\n    _classCallCheck(this, TreeTableToggler);\n\n    this.tt = tt;\n  }\n\n  _createClass(TreeTableToggler, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n      if (this.rowNode.node.expanded) {\n        this.tt.onNodeExpand.emit({\n          originalEvent: event,\n          node: this.rowNode.node\n        });\n      } else {\n        this.tt.onNodeCollapse.emit({\n          originalEvent: event,\n          node: this.rowNode.node\n        });\n      }\n\n      this.tt.updateSerializedValue();\n      this.tt.tableService.onUIUpdate(this.tt.value);\n      event.preventDefault();\n    }\n  }]);\n\n  return TreeTableToggler;\n}();\n\nTreeTableToggler.ɵfac = function TreeTableToggler_Factory(t) {\n  return new (t || TreeTableToggler)(ɵngcc0.ɵɵdirectiveInject(TreeTable));\n};\n\nTreeTableToggler.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeTableToggler,\n  selectors: [[\"p-treeTableToggler\"]],\n  inputs: {\n    rowNode: \"rowNode\"\n  },\n  decls: 2,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"tabindex\", \"-1\", \"pRipple\", \"\", 1, \"p-treetable-toggler\", \"p-link\", 3, \"click\"], [3, \"ngClass\"]],\n  template: function TreeTableToggler_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function TreeTableToggler_Template_button_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵelement(1, \"i\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"visibility\", ctx.rowNode.node.leaf === false || ctx.rowNode.node.children && ctx.rowNode.node.children.length ? \"visible\" : \"hidden\")(\"margin-left\", ctx.rowNode.level * 16 + \"px\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.rowNode.node.expanded ? \"pi pi-fw pi-chevron-down\" : \"pi pi-fw pi-chevron-right\");\n    }\n  },\n  directives: [ɵngcc5.Ripple, ɵngcc2.NgClass],\n  encapsulation: 2\n});\n\nTreeTableToggler.ctorParameters = function () {\n  return [{\n    type: TreeTable\n  }];\n};\n\nTreeTableToggler.propDecorators = {\n  rowNode: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeTableToggler, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableToggler',\n      template: \"\\n        <button type=\\\"button\\\" class=\\\"p-treetable-toggler p-link\\\" (click)=\\\"onClick($event)\\\" tabindex=\\\"-1\\\" pRipple\\n            [style.visibility]=\\\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\\\" [style.marginLeft]=\\\"rowNode.level * 16 + 'px'\\\">\\n            <i [ngClass]=\\\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\\\"></i>\\n        </button>\\n    \",\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    rowNode: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TreeTableModule = function TreeTableModule() {\n  _classCallCheck(this, TreeTableModule);\n};\n\nTreeTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TreeTableModule\n});\nTreeTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TreeTableModule_Factory(t) {\n    return new (t || TreeTableModule)();\n  },\n  imports: [[CommonModule, PaginatorModule, ScrollingModule, RippleModule], SharedModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeTableModule, {\n    declarations: function declarations() {\n      return [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor];\n    },\n    imports: function imports() {\n      return [CommonModule, PaginatorModule, ScrollingModule, RippleModule];\n    },\n    exports: function exports() {\n      return [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PaginatorModule, ScrollingModule, RippleModule],\n      exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule],\n      declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };","map":{"version":3,"sources":["../../src/app/components/treetable/treetable.ts","../../src/app/components/treetable/primeng-treetable.ts"],"names":[],"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","sourcesContent":["import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { PrimeTemplate, SharedModule, FilterService } from 'primeng/api';\nimport { SortMeta } from 'primeng/api';\nimport { BlockableUI } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport { RippleModule } from 'primeng/ripple';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TreeTableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private uiUpdateSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(node: any) {\n        this.contextMenuSource.next(node);\n    }\n\n    onUIUpdate(value: any) {\n        this.uiUpdateSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n}\n\n@Component({\n    selector: 'p-treeTable',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TreeTableService],\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./treetable.css']\n})\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n\n    @Input() columns: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() autoLayout: boolean;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() first: number = 0;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() showJumpToPageDropdown: boolean;\n\n    @Input() showFirstLastIcon: boolean = true;\n\n    @Input() showPageLinks: boolean = true;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() customSort: boolean;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() rowHover: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Input() frozenWidth: string;\n\n    @Input() frozenColumns: any[];\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterLocale: string;\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: TreeNode[] = [];\n\n    serializedValue: any[];\n\n    _totalRecords: number = 0;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    filteredNodes: any[];\n\n    filterTimeout: any;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    paginatorDropdownItemTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    dropPosition: number;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    selectionKeys: any = {};\n\n    rowTouched: boolean;\n\n    editingCell: Element;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    initialized: boolean;\n\n    toggleRowIndex: number;\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService, public filterService: FilterService) {}\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n\n            for(let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.tableService.onUIUpdate(this.value);\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n               this.sortMultipleNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    isEmpty() {\n        let data = this.filteredNodes||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                            table.style.width = width + 'px';\n                        }\n                    };\n\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    handleRowClick(event) {\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection||[];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n            }\n        }\n    }\n\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection||[];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({originalEvent: event, node: node});\n        }\n\n        this.tableService.onSelectionChange();\n    }\n\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n    }\n\n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedChildCount: number = 0;\n            let childPartialSelected: boolean = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n\n            if (select && selectedChildCount == node.children.length) {\n                this._selection =  [...this.selection||[], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection =  this.selection.filter((val,i) => i!=index);\n\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n\n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        if (select && index == -1) {\n            this._selection =  [...this.selection||[],node]\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection =  this.selection.filter((val,i) => i!=index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n\n        node.partialSelected = false;\n\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(node: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n\n                for (let node of this.value) {\n                    let copyNode = {...node};\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = this.filterService.filters[filterMatchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                    localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = {...copyNode};\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                    globalMatch = true;\n                                    copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\n                }\n\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.first = 0;\n\n        const filteredValue = this.filteredNodes || this.value;\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n\n            if (matched) {\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredNodes = null;\n        this.filters = {};\n\n        this.first = 0;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n\n}\n\n@Component({\n    selector: '[pTreeTableBody]',\n    template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TTBody {\n\n    @Input(\"pTreeTableBody\") columns: any[];\n\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public treeTableService: TreeTableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: '[ttScrollableView]',\n    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TTScrollableView implements AfterViewInit, OnDestroy {\n\n    @Input(\"ttScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener;\n\n    bodyScrollListener;\n\n    footerScrollListener;\n\n    frozenSiblingBody: Element;\n\n    totalRecordsSubscription: Subscription;\n\n    _scrollHeight: string;\n\n    preventBodyScrollPropagation: boolean;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n\n        if (this.tt.virtualScroll && this.virtualScrollBody) {\n            this.virtualScrollBody.ngOnInit();\n        }\n    }\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n            }\n\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.tt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n    }\n}\n\n@Directive({\n    selector: '[ttSortableColumn]',\n    host: {\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n    }\n})\nexport class TTSortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"ttSortableColumn\") field: string;\n\n    @Input() ttSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-treeTableSortIcon',\n    template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTSortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    @Input() ariaLabelDesc: string;\n\n    @Input() ariaLabelAsc: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public tt: TreeTable, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[ttResizableColumn]'\n})\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: Event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n\n    onDocumentMouseMove(event: Event) {\n        this.tt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: Event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[ttReorderableColumn]'\n})\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRow]',\n    host: {\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRow\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onEnterKey(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRowDblClick]',\n    host: {\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttContextMenuRow]',\n    host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class TTContextMenuRow {\n\n    @Input(\"ttContextMenuRow\") rowNode: any;\n\n    @Input() ttContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n\n            this.el.nativeElement.focus();\n\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input(\"value\") rowNode: any;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableHeaderCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    disabled: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private cd: ChangeDetectorRef) {\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked: boolean;\n        const data = this.tt.filteredNodes||this.tt.value;\n\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else  {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n\n        return checked;\n    }\n\n}\n\n@Directive({\n    selector: '[ttEditableColumn]'\n})\nexport class TTEditableColumn implements AfterViewInit {\n\n    @Input(\"ttEditableColumn\") data: any;\n\n    @Input(\"ttEditableColumnField\") field: any;\n\n    @Input() ttEditableColumnDisabled: boolean;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCellEditor',\n    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TreeTableCellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n\n@Directive({\n    selector: '[ttRow]',\n    host: {\n        '[attr.tabindex]': '\"0\"'\n    }\n})\nexport class TTRow {\n\n    @Input('ttRow') rowNode: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n        }\n    }\n\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\n\n@Component({\n    selector: 'p-treeTableToggler',\n    template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TreeTableToggler {\n\n    @Input() rowNode: any;\n\n    constructor(public tt: TreeTable) {}\n\n    onClick(event: Event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n\n        event.preventDefault();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule,RippleModule],\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,ScrollingModule],\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\n})\nexport class TreeTableModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}