import { Injectable } from "@angular/core";
import { Subject, Subscription } from "rxjs";
/**
 * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.
 *
 * ```ts
 * @Injectable()
 * // or @Component() (also consider DirectiveSuperclass)
 * // or @Directive() (also consider DirectiveSuperclass)
 * // or @Pipe()
 * class MyThing extends InjectableSuperclass {
 *   constructor(somethingObservable: Observable) {
 *     super();
 *     this.subscribeTo(somethingObservable);
 *   }
 *
 *   ngOnDestroy() {
 *     // if you override ngOnDestroy, be sure to call this too
 *     super.ngOnDestroy();
 *   }
 * }
 * ```
 */
export class InjectableSuperclass {
    constructor() {
        this.subscriptions = new Subscription();
        this.destructionSubject = new Subject();
        this.destruction$ = this.destructionSubject.asObservable();
    }
    subscribeTo(observable, next, error, complete) {
        this.subscriptions.add(observable.subscribe(this.bind(next), this.bind(error), this.bind(complete)));
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
        this.subscriptions = new Subscription();
    }
    bind(fn) {
        return fn === null || fn === void 0 ? void 0 : fn.bind(this);
    }
    ngOnDestroy() {
        this.unsubscribe();
        this.destructionSubject.next();
        this.destructionSubject.complete();
    }
}
InjectableSuperclass.decorators = [
    { type: Injectable }
];
InjectableSuperclass.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0YWJsZS1zdXBlcmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvZm9ybS11dGlscy9pbmplY3RhYmxlLXN1cGVyY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQWMsT0FBTyxFQUFFLFlBQVksRUFBa0IsTUFBTSxNQUFNLENBQUM7QUFFekU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBRUgsTUFBTSxPQUFnQixvQkFBb0I7SUFRdEM7UUFOUSxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJbkMsdUJBQWtCLEdBQUcsSUFBSSxPQUFPLEVBQWEsQ0FBQztRQUdsRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMvRCxDQUFDO0lBRUQsV0FBVyxDQUNQLFVBQXlCLEVBQ3pCLElBQXlCLEVBQ3pCLEtBQTRCLEVBQzVCLFFBQXFCO1FBRXJCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNsQixVQUFVLENBQUMsU0FBUyxDQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3RCLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVPLElBQUksQ0FBQyxFQUF3QjtRQUNqQyxPQUFPLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxJQUFJLENBQUMsSUFBSSxFQUFFO0lBQzFCLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkMsQ0FBQzs7O1lBekNKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgU3Vic2NyaXB0aW9uLCBVbnN1YnNjcmliYWJsZSB9IGZyb20gXCJyeGpzXCI7XG5cbi8qKlxuICogVXNlIGFzIHRoZSBzdXBlcmNsYXNzIGZvciBhbnl0aGluZyBtYW5hZ2VkIGJ5IGFuZ3VsYXIncyBkZXBlbmRlbmN5IGluamVjdGlvbiBmb3IgY2FyZS1mcmVlIHVzZSBvZiBgc3Vic2NyaWJlVG8oKWAuIEl0IHNpbXBseSBjYWxscyBgdW5zdWJzY3JpYmUoKWAgZHVyaW5nIGBuZ09uRGVzdHJveSgpYC4gSWYgeW91IG92ZXJyaWRlIGBuZ09uRGVzdHJveSgpYCBpbiB5b3VyIHN1YmNsYXNzLCBiZSBzdXJlIHRvIGludm9rZSB0aGUgc3VwZXIgaW1wbGVtZW50YXRpb24uXG4gKlxuICogYGBgdHNcbiAqIEBJbmplY3RhYmxlKClcbiAqIC8vIG9yIEBDb21wb25lbnQoKSAoYWxzbyBjb25zaWRlciBEaXJlY3RpdmVTdXBlcmNsYXNzKVxuICogLy8gb3IgQERpcmVjdGl2ZSgpIChhbHNvIGNvbnNpZGVyIERpcmVjdGl2ZVN1cGVyY2xhc3MpXG4gKiAvLyBvciBAUGlwZSgpXG4gKiBjbGFzcyBNeVRoaW5nIGV4dGVuZHMgSW5qZWN0YWJsZVN1cGVyY2xhc3Mge1xuICogICBjb25zdHJ1Y3Rvcihzb21ldGhpbmdPYnNlcnZhYmxlOiBPYnNlcnZhYmxlKSB7XG4gKiAgICAgc3VwZXIoKTtcbiAqICAgICB0aGlzLnN1YnNjcmliZVRvKHNvbWV0aGluZ09ic2VydmFibGUpO1xuICogICB9XG4gKlxuICogICBuZ09uRGVzdHJveSgpIHtcbiAqICAgICAvLyBpZiB5b3Ugb3ZlcnJpZGUgbmdPbkRlc3Ryb3ksIGJlIHN1cmUgdG8gY2FsbCB0aGlzIHRvb1xuICogICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5qZWN0YWJsZVN1cGVyY2xhc3MgaW1wbGVtZW50cyBVbnN1YnNjcmliYWJsZSwgT25EZXN0cm95IHtcblxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICAgIGRlc3RydWN0aW9uJDogT2JzZXJ2YWJsZTx1bmRlZmluZWQ+O1xuXG4gICAgcHJpdmF0ZSBkZXN0cnVjdGlvblN1YmplY3QgPSBuZXcgU3ViamVjdDx1bmRlZmluZWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kZXN0cnVjdGlvbiQgPSB0aGlzLmRlc3RydWN0aW9uU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmVUbzxUPihcbiAgICAgICAgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxUPixcbiAgICAgICAgbmV4dD86ICh2YWx1ZTogVCkgPT4gdm9pZCxcbiAgICAgICAgZXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZCxcbiAgICAgICAgY29tcGxldGU/OiAoKSA9PiB2b2lkLFxuICAgICkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKFxuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kKG5leHQpLFxuICAgICAgICAgICAgICAgIHRoaXMuYmluZChlcnJvciksXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kKGNvbXBsZXRlKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBiaW5kKGZuPzogKHZhbD86IGFueSkgPT4gdm9pZCkge1xuICAgICAgICByZXR1cm4gZm4/LmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5kZXN0cnVjdGlvblN1YmplY3QubmV4dCgpO1xuICAgICAgICB0aGlzLmRlc3RydWN0aW9uU3ViamVjdC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiJdfQ==