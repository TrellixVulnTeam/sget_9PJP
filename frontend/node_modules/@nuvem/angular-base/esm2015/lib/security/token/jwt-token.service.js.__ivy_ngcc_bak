import { Injectable, Inject } from '@angular/core';
import { HttpHeaders } from "@angular/common/http";
import { Token } from './token';
import { AUTH_CONFIG } from '../config/auth-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
/**
 * Inplementação de serviço JWTTokenService
 * @class
 */
export class JWTTokenService extends Token {
    /**
     * Metodo construtor responsável por injetar as configurações de autenticação
     * @constructor
     * @param {AuthConfig} config
     */
    constructor(config) {
        super();
        this.config = config;
    }
    /**
     * Metodo responsável pela extração de tokes do heaedrs das requisições
     * @public
     * @param {HttpHeaders} headers
     * @returns string
     */
    extractTokenFromHeaders(headers) {
        return headers.get(JWTTokenService.HEADER_STRING);
    }
    /**
     * Metodo responsável pela adição dos tokens no storage
     * @public
     * @param {String} token
     * @returns void
     */
    storeToken(token) {
        this.config.storage.setItem(this.config.tokenStorageIndex, token.toString());
    }
    /**
     * Metodo responsável por injetar token no header das requisições
     * @public
     * @param {HttpRequest<any>} request
     * @returns HttpRequest<any>
     */
    setTokenInHeader(request) {
        const req = request.clone({
            headers: new HttpHeaders({
                [JWTTokenService.HEADER_STRING]: this.config.storage.getItem(this.config.tokenStorageIndex)
            })
        });
        return req;
    }
    /**
     * Metodo responsável por verificar a existencia de um token de autenticação
     * @returns boolean
     * @public
     */
    hasToken() {
        return null !== this.config.storage.getItem(this.config.tokenStorageIndex);
    }
}
/**
 * TOKEN_PREFIX  property
 * @type {string}
 */
JWTTokenService.TOKEN_PREFIX = "Bearer";
/**
 * HEADER_STRING property
 * @type {string}
 */
JWTTokenService.HEADER_STRING = "Authorization";
JWTTokenService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JWTTokenService_Factory() { return new JWTTokenService(i0.ɵɵinject(i1.AUTH_CONFIG)); }, token: JWTTokenService, providedIn: "root" });
JWTTokenService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
JWTTokenService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LXRva2VuLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9zZWN1cml0eS90b2tlbi9qd3QtdG9rZW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQWMsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7OztBQUVoRTs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxLQUFLO0lBY3RDOzs7O09BSUc7SUFDSCxZQUF5QyxNQUFrQjtRQUN2RCxLQUFLLEVBQUUsQ0FBQztRQUQ2QixXQUFNLEdBQU4sTUFBTSxDQUFZO0lBRTNELENBQUM7SUFDRDs7Ozs7T0FLRztJQUNILHVCQUF1QixDQUFDLE9BQW9CO1FBQ3hDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsVUFBVSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUM3QixLQUFLLENBQUMsUUFBUSxFQUFFLENBQ25CLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxnQkFBZ0IsQ0FBQyxPQUF5QjtRQUN0QyxNQUFNLEdBQUcsR0FBcUIsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUN4QyxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3JCLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDO2FBQzlGLENBQUM7U0FDTCxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsUUFBUTtRQUNKLE9BQU8sSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDL0UsQ0FBQzs7QUFqRUQ7OztHQUdHO0FBQ29CLDRCQUFZLEdBQUcsUUFBUSxDQUFDO0FBRS9DOzs7R0FHRztBQUNvQiw2QkFBYSxHQUFHLGVBQWUsQ0FBQzs7O1lBZjFELFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OzRDQW9CZ0IsTUFBTSxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwSGVhZGVycyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcbmltcG9ydCB7IEF1dGhDb25maWcsIEFVVEhfQ09ORklHIH0gZnJvbSAnLi4vY29uZmlnL2F1dGgtY29uZmlnJztcblxuLyoqXG4gKiBJbnBsZW1lbnRhw6fDo28gZGUgc2VydmnDp28gSldUVG9rZW5TZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSldUVG9rZW5TZXJ2aWNlIGV4dGVuZHMgVG9rZW4ge1xuXG4gICAgLyoqXG4gICAgICogVE9LRU5fUFJFRklYICBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUT0tFTl9QUkVGSVggPSBcIkJlYXJlclwiO1xuXG4gICAgLyoqXG4gICAgICogSEVBREVSX1NUUklORyBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIRUFERVJfU1RSSU5HID0gXCJBdXRob3JpemF0aW9uXCI7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWwgcG9yIGluamV0YXIgYXMgY29uZmlndXJhw6fDtWVzIGRlIGF1dGVudGljYcOnw6NvXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBdXRoQ29uZmlnfSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEFVVEhfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogQXV0aENvbmZpZykge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gcmVzcG9uc8OhdmVsIHBlbGEgZXh0cmHDp8OjbyBkZSB0b2tlcyBkbyBoZWFlZHJzIGRhcyByZXF1aXNpw6fDtWVzXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cEhlYWRlcnN9IGhlYWRlcnNcbiAgICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICAgKi9cbiAgICBleHRyYWN0VG9rZW5Gcm9tSGVhZGVycyhoZWFkZXJzOiBIdHRwSGVhZGVycyk6IFN0cmluZyB7XG4gICAgICAgIHJldHVybiBoZWFkZXJzLmdldChKV1RUb2tlblNlcnZpY2UuSEVBREVSX1NUUklORyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGFkacOnw6NvIGRvcyB0b2tlbnMgbm8gc3RvcmFnZVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9rZW5cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgc3RvcmVUb2tlbih0b2tlbjogU3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnRva2VuU3RvcmFnZUluZGV4LFxuICAgICAgICAgICAgdG9rZW4udG9TdHJpbmcoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIGluamV0YXIgdG9rZW4gbm8gaGVhZGVyIGRhcyByZXF1aXNpw6fDtWVzXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cFJlcXVlc3Q8YW55Pn0gcmVxdWVzdFxuICAgICAqIEByZXR1cm5zIEh0dHBSZXF1ZXN0PGFueT5cbiAgICAgKi9cbiAgICBzZXRUb2tlbkluSGVhZGVyKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVxdWVzdDxhbnk+IHtcbiAgICAgICAgY29uc3QgcmVxOiBIdHRwUmVxdWVzdDxhbnk+ID0gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICAgICAgICAgICAgIFtKV1RUb2tlblNlcnZpY2UuSEVBREVSX1NUUklOR106IHRoaXMuY29uZmlnLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmNvbmZpZy50b2tlblN0b3JhZ2VJbmRleClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyByZXNwb25zw6F2ZWwgcG9yIHZlcmlmaWNhciBhIGV4aXN0ZW5jaWEgZGUgdW0gdG9rZW4gZGUgYXV0ZW50aWNhw6fDo29cbiAgICAgKiBAcmV0dXJucyBib29sZWFuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGhhc1Rva2VuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gdGhpcy5jb25maWcuc3RvcmFnZS5nZXRJdGVtKHRoaXMuY29uZmlnLnRva2VuU3RvcmFnZUluZGV4KTtcbiAgICB9XG5cbn1cblxuIl19