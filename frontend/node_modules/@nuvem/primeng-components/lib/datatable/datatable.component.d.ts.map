{"version":3,"file":"datatable.component.d.ts","sources":["datatable.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { QueryList, ChangeDetectorRef, AfterViewInit, AfterContentInit, OnInit, EventEmitter } from '@angular/core';\nimport { Table as DataTable } from 'primeng/table';\nimport { DataProvider } from './dataprovider';\nimport { DataProviderFactory, DataProviderType } from './dataprovider-factory';\nimport { DatatableButtonComponent } from './datatable-button.component';\nimport { DatatablePaginationParameters } from './datatable-pagination-parameters';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Authorization } from '@nuvem/angular-base';\nimport { Column } from './p-column.directive';\n/**\n * Class DatatableComponent\n * @class\n */\nexport declare class DatatableComponent implements AfterViewInit, AfterContentInit, OnInit {\n    private changeDetectorRef;\n    private dataProviderFactory;\n    private authorizationService;\n    isShowGlobalFilter: boolean;\n    isShowFilterRow: boolean;\n    get showGlobalFilter(): boolean;\n    set showGlobalFilter(showGlobalFilter: boolean);\n    get showFilterRow(): boolean;\n    set showFilterRow(ShowFilterRow: boolean);\n    /**\n     * selectedRow property\n     * @type {any}\n     */\n    selectedRow: any;\n    /**\n     * dataProvider property\n     * @type {DataProvider}\n     */\n    dataProvider: DataProvider;\n    /**\n     * filterParams property\n     * @type {any}\n     */\n    filterParams: any;\n    /**\n     * footerMsg property\n     * @type {string}\n     */\n    footerMsg: string;\n    /**\n     * orderInSort property\n     * @type {boolean}\n     */\n    orderInSort: boolean;\n    /**\n     * title property\n     * @type {string}\n     */\n    title: string;\n    /**\n     * splitButton property\n     * @type {any}\n     */\n    splitButton: any;\n    /**\n     * value property\n     * @type {any}\n     */\n    value: any[];\n    /**\n     * type property\n     * @type DataProviderType\n     */\n    type: DataProviderType;\n    /**\n     * rows property\n     * @type {number}\n     */\n    rows: number;\n    /**\n     * rowsPerPageOptions property\n     * @type {number[]}\n     */\n    rowsPerPageOptions: number[];\n    /**\n     * url property\n     * @type {string}\n     */\n    url: string;\n    /**\n     * extraParams property\n     * @type {any}\n     */\n    extraParams: any;\n    /**\n     * paginationParameters property\n     * @type {DatatablePaginationParameters}\n     */\n    paginationParameters: DatatablePaginationParameters;\n    /**\n     * showPaginationFooter property\n     * @type {boolean}\n     */\n    showPaginationFooter: boolean;\n    /**\n     * disableEdit property\n     * @type {boolean}\n     */\n    disableEdit: boolean;\n    /**\n     * disableView property\n     * @type {boolean}\n     */\n    disableView: boolean;\n    /**\n     * disableDelete property\n     * @type {boolean}\n     */\n    disableDelete: boolean;\n    /**\n     * selectionMode property\n     * @type {string}\n     */\n    selectionMode: string;\n    /**\n     * enableButtonsScroll property\n     * @type {boolean}\n     */\n    enableButtonsScroll: boolean;\n    /**\n     * emptyMessage property\n     * @type {string}\n     */\n    emptyMessage: string;\n    /**\n     * verticalButtons property\n     * @type {boolean}\n     */\n    verticalButtons: boolean;\n    /**\n     * defaultButtons property\n     * @type {boolean}\n     */\n    defaultButtons: boolean;\n    /**\n     * enableScroll property\n     * @type {boolean}\n     */\n    enableScroll: boolean;\n    /**\n     * scrollHeight property\n     * @type {string}\n     */\n    scrollHeight: string;\n    /**\n     * scrollWidth property\n     * @type {string}\n     */\n    scrollWidth: string;\n    /**\n     * rulesToHide property\n     * @type {any}\n     */\n    rulesToHide: any;\n    /**\n     * rulesToShowEdit property\n     * @type {any}\n     */\n    rulesToShowEdit: any;\n    /**\n     * rulesToShowDelete property\n     * @type {any}\n     */\n    rulesToShowDelete: any;\n    /**\n     * rulesToHideView property\n     * @type {any}\n     */\n    rulesToHideView: any;\n    /**\n     * rulesToHideEdit property\n     * @type {any}\n     */\n    rulesToHideEdit: any;\n    /**\n     * rulesToHideDelete property\n     * @type {any}\n     */\n    rulesToHideDelete: any;\n    /**\n     * horizontalButtonsHeader property\n     * @type {string}\n     */\n    horizontalButtonsHeader: string;\n    /**\n     * disableLoadingBlockUI property\n     * @type {boolean}\n     */\n    disableLoadingBlockUI: boolean;\n    /**\n     * rowStyleClass property\n     * @type {any}\n     */\n    rowStyleClass: any;\n    /**\n     * filterOnColumn property\n     */\n    filterOnColumn: boolean;\n    /**\n     * filterSelectOptions property\n     */\n    filterSelectOptions: any[];\n    /**\n     * updateFiltroHistorico property\n     */\n    updateFilterColumn: boolean;\n    /**\n     * customFilterOptions property\n     */\n    customFilterOptions: Object;\n    /**\n     * buttonClick property\n     * @type {EventEmitter<any>}\n     */\n    buttonClick: EventEmitter<any>;\n    /**\n     * pDatatableComponent property\n     * @type {Table}\n     */\n    pDatatableComponent: DataTable;\n    /**\n     * extraButtons property\n     * @type {QueryList<DatatableButtonComponent>}\n     */\n    extraButtons: QueryList<DatatableButtonComponent>;\n    /**\n     * columns property\n     * @type {any[]}\n     */\n    columns: Column[];\n    /**\n     * startedLoading property\n     * @type {EventEmitter<void>}\n     */\n    startedLoading: EventEmitter<void>;\n    /**\n     * finishedLoading property\n     * @type {EventEmitter<HttpErrorResponse>}\n     */\n    finishedLoading: EventEmitter<HttpErrorResponse>;\n    /**\n     * onRowSelected property\n     * @type {EventEmitter<any>}\n     */\n    onRowSelected: EventEmitter<any>;\n    /**\n     * showHorizontalButtonsHeader property\n     * @type {boolean}\n     */\n    showHorizontalButtonsHeader: boolean;\n    /**\n     * blockContent\n     * @type {boolean}\n     */\n    blockContent: boolean;\n    /**\n     * visibleColumns property\n     * @type {Object}\n     */\n    visibleColumns: Object;\n    /**\n     * showVisibleColumnsControl property\n     * @type {boolean}\n     */\n    showVisibleColumnsControl: boolean;\n    /**\n     * editMode property\n     * @type {string}\n     */\n    editMode: string;\n    /**\n     * dataKey property\n     * Identificador único para cada registro da tabela\n     * @type {string}\n     */\n    dataKey: string;\n    /**\n     * onRowEditEvent property\n     * Evento disparado quando o usuário realiza ações de edição em uma linha da tabela\n     * @type {EventEmitter<void>}\n     */\n    onRowEditEvent: EventEmitter<any>;\n    clonedRowData: {\n        [s: string]: any;\n    };\n    /**\n     * errorMessage property\n     * @type {string}\n     */\n    private errorMessage;\n    /**\n     * originalEmptyMessage property\n     * @type {string}\n     */\n    private originalEmptyMessage;\n    editingRow: boolean;\n    /**\n     * constructor method\n     * @constructor\n     * @param {ChangeDetectorRef} changeDetectorRef\n     * @param {DataProviderFactory} dataProviderFactory\n     * @param {Authorization} authorizationService\n     */\n    constructor(changeDetectorRef: ChangeDetectorRef, dataProviderFactory: DataProviderFactory, authorizationService: Authorization);\n    /**\n     * ngOnInit method\n     * @returns void\n     */\n    ngOnInit(): void;\n    /**\n     * subscribeFromValueChange method\n     * @returns void\n     */\n    private updateOnValueChange;\n    /**\n     * subscribeToLoadingEvents method\n     * @returns void\n     */\n    private subscribeToLoadingEvents;\n    /**\n     * onStartedLoading method\n     * @returns void\n     */\n    private onStartedLoading;\n    /**\n     * onFinishedLoading method\n     * @param {HttpErrorResponse} error\n     * @returns void\n     */\n    private onFinishedLoading;\n    /**\n     * initRowsPerPageOptionsIfPresent method\n     * @returns void\n     */\n    private initRowsPerPageOptionsIfPresent;\n    /**\n     * defineIfShouldShowHorizontalButtonsHeader method\n     * @returns void\n     */\n    private defineIfShouldShowHorizontalButtonsHeader;\n    /**\n     * ngAfterViewInit method\n     * @returns void\n     */\n    ngAfterViewInit(): void;\n    /**\n     * setExtraParams method\n     * @returns void\n     */\n    private setExtraParams;\n    /**\n     * ngAfterContentInit method\n     * @returns void\n     */\n    ngAfterContentInit(): void;\n    /**\n     * onClick method\n     * @param {string} button\n     * @param {any} event\n     * @return void\n     */\n    onClick(button: string, event: any): void;\n    /**\n     * onSelectChange method\n     * @param {any} event\n     * @returns void\n     */\n    onSelectChange(event: any): void;\n    /**\n     * updateMultipleButtonsStatus method\n     * @param {boolean} hasMultipleSelection\n     * @return void\n     */\n    private updateMultipleButtonsStatus;\n    /**\n     * refresh method\n     * @param query\n     * @returns void\n     */\n    refresh(query?: any): void;\n    /**\n     * resetSelectedRow method\n     * @param button\n     * @returns void\n     */\n    resetSelectedRow(button: string): void;\n    /**\n     * reset method\n     * @returns void\n     */\n    reset(): void;\n    /**\n     * paginationFooterText method\n     * @param {string} msg\n     * @returns string\n     */\n    paginationFooterText(msg: string): string;\n    /**\n     * currentFirstIndex method\n     * @returns number\n     */\n    currentFirstIndex(): number;\n    /**\n     * currentLastIndex method\n     * @returns number\n     */\n    currentLastIndex(): number;\n    /**\n     * totalRecords method\n     * @returns number\n     */\n    totalRecords(): number;\n    /**\n     * checkRolesToButton method\n     * @param {string} button\n     * @return boolean\n     */\n    checkRolesToButton(button: string): boolean;\n    /**\n     * checkUseButtons method\n     * @param {string} button\n     * @returns void\n     */\n    checkUseButtons(button: string): void;\n    /**\n     * filter method\n     * @returns void\n     */\n    filter(): void;\n    /**\n     * Método para filtrar por colunas\n     * @param column chave da coluna na tabela\n     * @param filters valor do filtro\n     */\n    filterColumn(column: string, filters: any): void;\n    /**\n     * Inicia todas as colunas da tabela como visíveis\n     */\n    setAllColumnsVisible(): void;\n    /**\n     * Verifica se uma coluna deve estar visível\n     * @param column string\n     * @param visibleColumns Array\n     */\n    visibleColumnCheck(column: string, visibleColumns: []): boolean;\n    /**\n     * Atualzia os valores da variável 'visibleColuns' para mostrar ou não as colunas\n     * @param columns array\n     */\n    updateVisibleColumns(columns: []): void;\n    onRowEditInitEvent(event: any, rowData: any): void;\n    onRowEditSaveEvent(event: any, rowData: any): void;\n    onRowEditCancelEvent(event: any, rowData: any, index: number): void;\n    resetEditingMode(event: any): void;\n    editarLinhaOver(event: any): void;\n    editarLinhaOut(event: any): void;\n}\n"]}