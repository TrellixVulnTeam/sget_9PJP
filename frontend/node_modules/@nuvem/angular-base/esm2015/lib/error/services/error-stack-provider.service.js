import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { ErrorStackService } from './error-stack.service';
import * as i0 from "@angular/core";
import * as i1 from "./error-stack.service";
/**
 * Class ErrorStackProviderService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './error-stack.service';
export class ErrorStackProviderService {
    /**
     * Metodo construtor responsável por injetar o serviso de erros
     * @param {ErrorStackService} errorStackService
     */
    constructor(errorStackService) {
        this.errorStackService = errorStackService;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @param {Error} error
     * @returns Boolean
     */
    shouldHandle(error) {
        return error instanceof HttpErrorResponse;
    }
    /**
     * Metodo pela adição de erros
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error) {
        this.errorStackService.create(error);
    }
}
ErrorStackProviderService.ɵfac = function ErrorStackProviderService_Factory(t) { return new (t || ErrorStackProviderService)(ɵngcc0.ɵɵinject(ɵngcc1.ErrorStackService)); };
ErrorStackProviderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorStackProviderService_Factory() { return new ErrorStackProviderService(i0.ɵɵinject(i1.ErrorStackService)); }, token: ErrorStackProviderService, providedIn: "root" });
ErrorStackProviderService.ctorParameters = () => [
    { type: ErrorStackService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorStackProviderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ErrorStackService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3Itc3RhY2stcHJvdmlkZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvZXJyb3Ivc2VydmljZXMvZXJyb3Itc3RhY2stcHJvdmlkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFEO0FBRWdDO0FBRGhDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUlILE1BQU0sT0FBTyx5QkFBeUI7QUFBRyxJQUVyQztBQUNKO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUFvQixpQkFBb0M7QUFBSSxRQUF4QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0FBQUMsSUFBRSxDQUFDO0FBQ2hFLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxZQUFZLENBQUMsS0FBWTtBQUFJLFFBQ3pCLE9BQU8sS0FBSyxZQUFZLGlCQUFpQixDQUFDO0FBQ2xELElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxNQUFNLENBQUMsS0FBd0I7QUFDbkMsUUFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQztBQUNMOzJLQUNBO0FBQUMsc1BBMUJJO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBRzZDLFlBVGhELGlCQUFpQjtBQUFHO0lBT3pCLFVBQVUsRUFBRSxNQUFNLGVBQ3JCOzs7OztrRkFSOEI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVycm9yUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZXJyb3IucHJvdmlkZXInO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBFcnJvclN0YWNrU2VydmljZSB9IGZyb20gJy4vZXJyb3Itc3RhY2suc2VydmljZSc7XG5cbi8qKlxuICogQ2xhc3MgRXJyb3JTdGFja1Byb3ZpZGVyU2VydmljZVxuICogQGNsYXNzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEVycm9yU3RhY2tQcm92aWRlclNlcnZpY2UgaW1wbGVtZW50cyBFcnJvclByb3ZpZGVyIHtcblxuICAgIC8qKlxuICAgICAqIE1ldG9kbyBjb25zdHJ1dG9yIHJlc3BvbnPDoXZlbCBwb3IgaW5qZXRhciBvIHNlcnZpc28gZGUgZXJyb3NcbiAgICAgKiBAcGFyYW0ge0Vycm9yU3RhY2tTZXJ2aWNlfSBlcnJvclN0YWNrU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZXJyb3JTdGFja1NlcnZpY2U6IEVycm9yU3RhY2tTZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGlkZW50aWZpY2HDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIHNob3VsZEhhbmRsZShlcnJvcjogRXJyb3IpOiBCb29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHBlbGEgYWRpw6fDo28gZGUgZXJyb3NcbiAgICAgKiBAcGFyYW0ge0h0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoYW5kbGUoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMuZXJyb3JTdGFja1NlcnZpY2UuY3JlYXRlKGVycm9yKTtcbiAgICB9XG5cbn1cbiJdfQ==