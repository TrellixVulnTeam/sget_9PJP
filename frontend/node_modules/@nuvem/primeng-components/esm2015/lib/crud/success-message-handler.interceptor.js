import { Injectable } from '@angular/core';
import { HTTP_INTERCEPTORS, HttpResponse } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { PageNotificationService } from '../page-notification/page-notification.service';
import * as i0 from "@angular/core";
import * as i1 from "../page-notification/page-notification.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../page-notification/page-notification.service';
var STATUS;
(function (STATUS) {
    STATUS[STATUS["OK"] = 200] = "OK";
    STATUS[STATUS["CREATED"] = 201] = "CREATED";
})(STATUS || (STATUS = {}));
export class SuccessMessageHandlerInterceptor {
    constructor(notification) {
        this.notification = notification;
    }
    intercept(req, next) {
        return next.handle(req).pipe(tap((event) => {
            if (event instanceof HttpResponse) {
                if (event.headers.has("X-nuvem-alert")) {
                    this.notification.addSuccessMessage(event.headers.get("X-nuvem-alert"));
                }
                else if ((event.status === STATUS.OK || event.status === STATUS.CREATED) && req.method != "GET") {
                    this.notification.addSuccessMessage("Operação realizada com sucesso!");
                }
            }
        }));
    }
}
SuccessMessageHandlerInterceptor.ɵfac = function SuccessMessageHandlerInterceptor_Factory(t) { return new (t || SuccessMessageHandlerInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.PageNotificationService)); };
SuccessMessageHandlerInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function SuccessMessageHandlerInterceptor_Factory() { return new SuccessMessageHandlerInterceptor(i0.ɵɵinject(i1.PageNotificationService)); }, token: SuccessMessageHandlerInterceptor, providedIn: "root" });
SuccessMessageHandlerInterceptor.ctorParameters = () => [
    { type: PageNotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SuccessMessageHandlerInterceptor, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.PageNotificationService }]; }, null); })();
export const httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: SuccessMessageHandlerInterceptor, multi: true },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VjY2Vzcy1tZXNzYWdlLWhhbmRsZXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3ByaW1lbmctY29tcG9uZW50cy9zcmMvbGliL2NydWQvc3VjY2Vzcy1tZXNzYWdlLWhhbmRsZXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ2lELGlCQUFpQixFQUFFLFlBQVksRUFDdEYsTUFBTSxzQkFBc0IsQ0FBQztBQUc5QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDekY7QUFDb0M7OztBQUFwQyxJQUFLLE1BQStCO0FBQXBDLFdBQUssTUFBTTtBQUFJLElBQUQsaUNBQU0sQ0FBQTtBQUFDLElBQUMsMkNBQVcsQ0FBQTtBQUFFLENBQUMsRUFBL0IsTUFBTSxLQUFOLE1BQU0sUUFBeUI7QUFHcEMsTUFBTSxPQUFPLGdDQUFnQztBQUFHLElBRTlDLFlBQW9CLFlBQXFDO0FBQzNELFFBRHNCLGlCQUFZLEdBQVosWUFBWSxDQUF5QjtBQUFDLElBRTFELENBQUM7QUFDSCxJQUNFLFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO0FBQUksUUFDcEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDeEIsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7QUFDdEIsWUFBVSxJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7QUFDN0MsZ0JBQVksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRTtBQUNwRCxvQkFBYyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFDdEYsaUJBQWE7QUFBQyxxQkFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksS0FBSyxFQUFFO0FBQy9HLG9CQUFjLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUNyRixpQkFBYTtBQUNiLGFBQVc7QUFDWCxRQUFRLENBQUMsQ0FBQyxDQUNMLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDtzTUFDQTtBQUFDLHdSQXBCSTtBQUFDO0VBREwsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLG5DQUNzQyxZQUx2RCx1QkFBdUI7QUFBRztBQUlILEVBQUU7Ozt3RkFKRztBQTJCckMsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUc7QUFDeEMsSUFBRSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsZ0NBQWdDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUN6RixDQUFDLENBQUM7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBFdmVudCwgSHR0cEludGVyY2VwdG9yLCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QsIEhUVFBfSU5URVJDRVBUT1JTLCBIdHRwUmVzcG9uc2Vcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQYWdlTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uL3BhZ2Utbm90aWZpY2F0aW9uL3BhZ2Utbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuXG5lbnVtIFNUQVRVUyB7IE9LPTIwMCwgQ1JFQVRFRD0yMDEgIH1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBTdWNjZXNzTWVzc2FnZUhhbmRsZXJJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBub3RpZmljYXRpb246IFBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlKSB7XG5cbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICAgIHRhcCgoZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5oZWFkZXJzLmhhcyhcIlgtbnV2ZW0tYWxlcnRcIikpIHtcbiAgICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb24uYWRkU3VjY2Vzc01lc3NhZ2UoZXZlbnQuaGVhZGVycy5nZXQoXCJYLW51dmVtLWFsZXJ0XCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGV2ZW50LnN0YXR1cyA9PT0gU1RBVFVTLk9LIHx8IGV2ZW50LnN0YXR1cyA9PT0gU1RBVFVTLkNSRUFURUQpICYmIHJlcS5tZXRob2QgIT0gXCJHRVRcIikge1xuICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbi5hZGRTdWNjZXNzTWVzc2FnZShcIk9wZXJhw6fDo28gcmVhbGl6YWRhIGNvbSBzdWNlc3NvIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBjb25zdCBodHRwSW50ZXJjZXB0b3JQcm92aWRlcnMgPSBbXG4gIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBTdWNjZXNzTWVzc2FnZUhhbmRsZXJJbnRlcmNlcHRvciwgbXVsdGk6IHRydWUgfSxcbl07XG4iXX0=