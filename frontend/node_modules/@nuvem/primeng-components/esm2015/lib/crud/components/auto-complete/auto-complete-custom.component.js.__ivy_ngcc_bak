import { Component, ElementRef, Renderer2, ChangeDetectorRef, IterableDiffers, Input, forwardRef } from '@angular/core';
import { AutoComplete as AutoCompletePrimeng } from 'primeng/autocomplete';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export const AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => AutoCompleteCustomComponent),
    multi: true
};
export class AutoCompleteCustomComponent extends AutoCompletePrimeng {
    constructor(el, renderer, cd, differs) {
        super(el, renderer, cd, differs);
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.differs = differs;
    }
}
AutoCompleteCustomComponent.decorators = [
    { type: Component, args: [{
                selector: 'p-autoCompleteCustom',
                template: "<span [ngClass]=\"{'p-autocomplete p-component':true,'p-autocomplete-dd':dropdown,'p-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n    <input *ngIf=\"!multiple\" #in [attr.type]=\"type\" [attr.id]=\"inputId\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [autocomplete]=\"autocomplete\" [attr.required]=\"required\" [attr.name]=\"name\"\n        [ngClass]=\"'p-inputtext p-component p-state-default p-corner-all p-autocomplete-input'\" [value]=\"inputFieldValue\" aria-autocomplete=\"list\" role=\"combobox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\"\n        (click)=\"onInputClick($event)\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\"\n        [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\">\n\n    <ul *ngIf=\"multiple\" #multiContainer class=\"p-autocomplete-multiple-container p-component p-inputtext p-state-default p-corner-all\" [ngClass]=\"{'p-disabled':disabled,'p-focus':focus}\" (click)=\"multiIn.focus()\">\n        <li #token *ngFor=\"let val of value\" class=\"p-autocomplete-token p-highlight p-corner-all\">\n            <span class=\"p-autocomplete-token-icon pi pi-fw pi-times\" (click)=\"removeItem(token)\" *ngIf=\"!disabled\"></span>\n            <span *ngIf=\"!selectedItemTemplate\" class=\"p-autocomplete-token-label\">{{resolveFieldData(val)}}</span>\n            <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: val}\"></ng-container>\n        </li>\n        <li class=\"p-autocomplete-input-token\">\n            <input #multiIn \n                [attr.type]=\"type\" \n                [attr.id]=\"inputId\" [disabled]=\"disabled\" \n                [attr.placeholder]=\"(value&&value.length ? null : placeholder)\" \n                [attr.tabindex]=\"tabindex\" \n                (input)=\"onInput($event)\"  \n                (click)=\"onInputClick($event)\"\n                (keydown)=\"onKeydown($event)\" \n                [readonly]=\"readonly\" (keyup)=\"onKeyup($event)\" \n                [attr.autofocus]=\"autofocus\" \n                (focus)=\"onInputFocus($event)\" \n                (blur)=\"onInputBlur($event)\" \n                (change)=\"onInputChange($event)\" \n                (paste)=\"onInputPaste($event)\" \n                [autocomplete]=\"autocomplete\"\n                [ngStyle]=\"inputStyle\" \n                [class]=\"inputStyleClass\"\n                [ngClass]=\"'p-inputtext p-component p-state-default p-corner-all p-autocomplete-input'\" \n                [attr.aria-label]=\"ariaLabel\" \n                [attr.aria-labelledby]=\"ariaLabelledBy\" \n                [attr.aria-required]=\"required\"\n                aria-autocomplete=\"list\" \n                role=\"combobox\" \n                [attr.aria-expanded]=\"overlayVisible\" \n                aria-haspopup=\"true\" \n                [attr.aria-activedescendant]=\"'p-highlighted-option'\">\n        </li>\n    </ul>\n\n    <i *ngIf=\"loading\" class=\"p-autocomplete-loader pi pi-spinner pi-spin\"></i>\n    <button #ddBtn type=\"button\" pButton [icon]=\"dropdownIcon\" class=\"p-autocomplete-dropdown\" [disabled]=\"disabled\"\n        (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\" [attr.tabindex]=\"tabindex\">\n    </button>\n\n    <div #panel *ngIf=\"overlayVisible\" [ngClass]=\"['p-autocomplete-panel p-component p-component-content p-corner-all p-shadow']\"\n        [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\"\n        [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\">\n        <ul role=\"listbox\" class=\"p-autocomplete-items p-autocomplete-list p-component-content p-component p-corner-all p-reset\">\n            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                <p-autoCompleteItem *ngFor=\"let option of suggestions; let idx = index\"\n                    [option]=\"option\" [(highlightOption)]=\"highlightOption\" [index]=\"idx\"\n                    (onClick)=\"selectItem($event.option)\" [itemSize]=\"itemSize\"\n                    [template]=\"itemTemplate\" [resolvedFieldData]=\"resolveFieldData(option)\">\n                </p-autoCompleteItem>\n            </ng-container>\n            <ng-template #virtualScrollList>\n                <cdk-virtual-scroll-viewport *ngIf=\"virtualScroll && suggestions && suggestions.length\"\n                    [ngStyle]=\"{height: scrollHeight}\" [itemSize]=\"itemSize\">\n                    <ng-container *cdkVirtualFor=\"let option of suggestions; let idx = index\">\n                        <p-autoCompleteItem\n                            [option]=\"option\" [(highlightOption)]=\"highlightOption\" [index]=\"idx\"\n                            (onClick)=\"selectItem($event.option)\" [itemSize]=\"itemSize\"\n                            [template]=\"itemTemplate\" [resolvedFieldData]=\"resolveFieldData(option)\"\n                        ></p-autoCompleteItem>\n                    </ng-container>\n                </cdk-virtual-scroll-viewport>\n            </ng-template>\n\n            <li *ngIf=\"noResults && emptyMessage\" class=\"p-autocomplete-emptymessage p-autocomplete-list-item p-corner-all\">{{emptyMessage}}</li>\n        </ul>\n    </div>\n</span>\n",
                providers: [AUTOCOMPLETE_VALUE_ACCESSOR],
                styles: ["ul{list-style-type:none}"]
            },] }
];
AutoCompleteCustomComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: IterableDiffers }
];
AutoCompleteCustomComponent.propDecorators = {
    virtualScroll: [{ type: Input }],
    itemSize: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS1jdXN0b20uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJpbWVuZy1jb21wb25lbnRzL3NyYy9saWIvY3J1ZC9jb21wb25lbnRzL2F1dG8tY29tcGxldGUvYXV0by1jb21wbGV0ZS1jdXN0b20uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsWUFBWSxJQUFJLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQVE7SUFDNUMsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDJCQUEyQixDQUFDO0lBQzFELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQVFKLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxtQkFBbUI7SUFNaEUsWUFBbUIsRUFBYyxFQUFTLFFBQW1CLEVBQVMsRUFBcUIsRUFBUyxPQUF3QjtRQUN4SCxLQUFLLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFEakIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFTLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUFTLFlBQU8sR0FBUCxPQUFPLENBQWlCO0lBRTVILENBQUM7OztZQWRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQywreUxBQW9EO2dCQUVwRCxTQUFTLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQzs7YUFDM0M7OztZQWZtQixVQUFVO1lBQUUsU0FBUztZQUFFLGlCQUFpQjtZQUFFLGVBQWU7Ozs0QkFrQnhFLEtBQUs7dUJBRUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiwgSXRlcmFibGVEaWZmZXJzLCBJbnB1dCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0b0NvbXBsZXRlIGFzIEF1dG9Db21wbGV0ZVByaW1lbmcgfSBmcm9tICdwcmltZW5nL2F1dG9jb21wbGV0ZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGNvbnN0IEFVVE9DT01QTEVURV9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEF1dG9Db21wbGV0ZUN1c3RvbUNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwLWF1dG9Db21wbGV0ZUN1c3RvbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2F1dG8tY29tcGxldGUtY3VzdG9tLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9hdXRvLWNvbXBsZXRlLWN1c3RvbS5jb21wb25lbnQuc2NzcyddLFxuICAgIHByb3ZpZGVyczogW0FVVE9DT01QTEVURV9WQUxVRV9BQ0NFU1NPUl1cbn0pXG5leHBvcnQgY2xhc3MgQXV0b0NvbXBsZXRlQ3VzdG9tQ29tcG9uZW50IGV4dGVuZHMgQXV0b0NvbXBsZXRlUHJpbWVuZyB7XG5cbiAgICBASW5wdXQoKSB2aXJ0dWFsU2Nyb2xsOiBib29sZWFuO1xuXG4gICAgQElucHV0KCkgaXRlbVNpemU6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbDogRWxlbWVudFJlZiwgcHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHB1YmxpYyBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHB1YmxpYyBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMpIHtcbiAgICAgICAgc3VwZXIoZWwsIHJlbmRlcmVyLCBjZCwgZGlmZmVycylcbiAgICB9XG5cbn1cbiJdfQ==