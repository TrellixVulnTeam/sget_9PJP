/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-block-ui';
var BlockUIPreventNavigation = /** @class */ (function () {
    function BlockUIPreventNavigation(blockUIService) {
        this.blockUIService = blockUIService;
    }
    /**
     * @return {?}
     */
    BlockUIPreventNavigation.prototype.canActivate = /**
     * @return {?}
     */
    function () {
        return !this.blockUIService.isActive(BLOCKUI_DEFAULT);
    };
    /**
     * @return {?}
     */
    BlockUIPreventNavigation.prototype.canActivateChild = /**
     * @return {?}
     */
    function () {
        return !this.blockUIService.isActive(BLOCKUI_DEFAULT);
    };
    /** @nocollapse */
    BlockUIPreventNavigation.ctorParameters = function () { return [
        { type: BlockUIService }
    ]; };
BlockUIPreventNavigation.ɵfac = function BlockUIPreventNavigation_Factory(t) { return new (t || BlockUIPreventNavigation)(ɵngcc0.ɵɵinject(ɵngcc1.BlockUIService)); };
BlockUIPreventNavigation.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BlockUIPreventNavigation, factory: function (t) { return BlockUIPreventNavigation.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIPreventNavigation, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.BlockUIService }]; }, null); })();
    return BlockUIPreventNavigation;
}());
export { BlockUIPreventNavigation };
function BlockUIPreventNavigation_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIPreventNavigation.prototype.blockUIService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktcHJldmVudC1uYXZpZ2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nLWJsb2NrLXVpL3JvdXRlci9ibG9jay11aS1wcmV2ZW50LW5hdmlnYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7O0FBQzlEO0FBRTZDLElBRTNDLGtDQUNVO0FBQWtCLFFBQWxCLG1CQUFjLEdBQWQsY0FBYztBQUFFLEtBQ3RCO0FBQ047QUFDTztBQUNDO0FBQVEsSUFEZCw4Q0FBVztBQUNYO0FBQW1CO0FBQVEsSUFEM0I7QUFBYyxRQUNaLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzFELEtBQUc7QUFFSDtBQUFRO0FBQ0o7QUFBUSxJQURWLG1EQUFnQjtBQUNoQjtBQUFtQjtBQUFRLElBRDNCO0FBQWMsUUFDWixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMxRCxLQUFHLENBWkc7QUFBQztxQ0FETixVQUFVLC9DQUNtQjtBQUc1QixnQkFOTyxjQUFjO0FBQUc7Ozs7OytFQUFTO0FBQUMsbUNBSHBDO0FBQUU7QUFBTSxTQU1LLHdCQUF3QjtBQUFJO0FBRzlCO0FBQXFCO0FBSWQ7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQWJBLEFBQUEsQUFGQSxBQUFBLEFBSEEsQUFNQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBCbG9ja1VJU2VydmljZSwgQkxPQ0tVSV9ERUZBVUxUIH0gZnJvbSAnbmctYmxvY2stdWknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmxvY2tVSVByZXZlbnROYXZpZ2F0aW9uIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYmxvY2tVSVNlcnZpY2U6IEJsb2NrVUlTZXJ2aWNlXG4gICkge31cblxuICBjYW5BY3RpdmF0ZSgpIHtcbiAgICByZXR1cm4gIXRoaXMuYmxvY2tVSVNlcnZpY2UuaXNBY3RpdmUoQkxPQ0tVSV9ERUZBVUxUKTtcbiAgfVxuXG4gIGNhbkFjdGl2YXRlQ2hpbGQoKSB7XG4gICAgcmV0dXJuICF0aGlzLmJsb2NrVUlTZXJ2aWNlLmlzQWN0aXZlKEJMT0NLVUlfREVGQVVMVCk7XG4gIH1cbn1cbiJdfQ==