{"ast":null,"code":"import _classCallCheck from \"/home/basis/template/p-lc-aprd_codigo_fonte/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/template/p-lc-aprd_codigo_fonte/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Output, Input, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"inputfield\"];\n\nvar _c1 = function _c1(a1) {\n  return {\n    \"ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default\": true,\n    \"ui-state-disabled\": a1\n  };\n};\n\nvar _c2 = function _c2(a1) {\n  return {\n    \"ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default\": true,\n    \"ui-state-disabled\": a1\n  };\n};\n\nvar SPINNER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return Spinner;\n  }),\n  multi: true\n};\n\nvar Spinner = /*#__PURE__*/function () {\n  function Spinner(el, cd) {\n    _classCallCheck(this, Spinner);\n\n    this.el = el;\n    this.cd = cd;\n    this.onChange = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this._step = 1;\n\n    this.onModelChange = function () {};\n\n    this.onModelTouched = function () {};\n\n    this.keyPattern = /[0-9\\+\\-]/;\n    this.negativeSeparator = '-';\n  }\n\n  _createClass(Spinner, [{\n    key: \"step\",\n    get: function get() {\n      return this._step;\n    },\n    set: function set(val) {\n      this._step = val;\n\n      if (this._step != null) {\n        var tokens = this.step.toString().split(/[,]|[.]/);\n        this.calculatedPrecision = tokens[1] ? tokens[1].length : undefined;\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.formatInput) {\n        this.localeDecimalSeparator = 1.1.toLocaleString().substring(1, 2);\n        this.localeThousandSeparator = 1000 .toLocaleString().substring(1, 2);\n        this.thousandRegExp = new RegExp(\"[\".concat(this.thousandSeparator || this.localeThousandSeparator, \"]\"), 'gim');\n\n        if (this.decimalSeparator && this.thousandSeparator && this.decimalSeparator === this.thousandSeparator) {\n          console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\n        }\n      }\n    }\n  }, {\n    key: \"repeat\",\n    value: function repeat(event, interval, dir) {\n      var _this = this;\n\n      var i = interval || 500;\n      this.clearTimer();\n      this.timer = setTimeout(function () {\n        _this.repeat(event, 40, dir);\n      }, i);\n      this.spin(event, dir);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(event, dir) {\n      var step = this.step * dir;\n      var currentValue;\n      var precision = this.getPrecision();\n      if (this.value) currentValue = typeof this.value === 'string' ? this.parseValue(this.value) : this.value;else currentValue = 0;\n      if (precision) this.value = parseFloat(this.toFixed(currentValue + step, precision));else this.value = currentValue + step;\n\n      if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n        this.value = currentValue;\n      }\n\n      if (this.min !== undefined && this.value < this.min) {\n        this.value = this.min;\n      }\n\n      if (this.max !== undefined && this.value > this.max) {\n        this.value = this.max;\n      }\n\n      this.formatValue();\n      this.onModelChange(this.value);\n      this.onChange.emit(event);\n    }\n  }, {\n    key: \"getPrecision\",\n    value: function getPrecision() {\n      return this.precision === undefined ? this.calculatedPrecision : this.precision;\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed(value, precision) {\n      var power = Math.pow(10, precision || 0);\n      return String(Math.round(value * power) / power);\n    }\n  }, {\n    key: \"onUpButtonMousedown\",\n    value: function onUpButtonMousedown(event) {\n      if (!this.disabled) {\n        this.inputfieldViewChild.nativeElement.focus();\n        this.repeat(event, null, 1);\n        this.updateFilledState();\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onUpButtonMouseup\",\n    value: function onUpButtonMouseup(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onUpButtonMouseleave\",\n    value: function onUpButtonMouseleave(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonMousedown\",\n    value: function onDownButtonMousedown(event) {\n      if (!this.disabled) {\n        this.inputfieldViewChild.nativeElement.focus();\n        this.repeat(event, null, -1);\n        this.updateFilledState();\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseup\",\n    value: function onDownButtonMouseup(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onDownButtonMouseleave\",\n    value: function onDownButtonMouseleave(event) {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    }\n  }, {\n    key: \"onInputKeydown\",\n    value: function onInputKeydown(event) {\n      if (event.which == 38) {\n        this.spin(event, 1);\n        event.preventDefault();\n      } else if (event.which == 40) {\n        this.spin(event, -1);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onInputChange\",\n    value: function onInputChange(event) {\n      this.onChange.emit(event);\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(event) {\n      this.value = this.parseValue(event.target.value);\n      this.onModelChange(this.value);\n      this.updateFilledState();\n    }\n  }, {\n    key: \"onInputBlur\",\n    value: function onInputBlur(event) {\n      this.focus = false;\n      this.formatValue();\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n  }, {\n    key: \"onInputFocus\",\n    value: function onInputFocus(event) {\n      this.focus = true;\n      this.onFocus.emit(event);\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(val) {\n      var value;\n      var precision = this.getPrecision();\n\n      if (val.trim() === '') {\n        value = null;\n      } else {\n        if (this.formatInput) {\n          val = val.replace(this.thousandRegExp, '');\n        }\n\n        if (precision) {\n          val = this.formatInput ? val.replace(this.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\n          value = parseFloat(val);\n        } else {\n          value = parseInt(val, 10);\n        }\n\n        if (!isNaN(value)) {\n          if (this.max !== null && value > this.max) {\n            value = this.max;\n          }\n\n          if (this.min !== null && value < this.min) {\n            value = this.min;\n          }\n        } else {\n          value = null;\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue() {\n      var value = this.value;\n      var precision = this.getPrecision();\n\n      if (value != null) {\n        if (this.formatInput) {\n          value = value.toLocaleString(undefined, {\n            maximumFractionDigits: 20\n          });\n\n          if (this.decimalSeparator && this.thousandSeparator) {\n            value = value.split(this.localeDecimalSeparator);\n\n            if (precision && value[1]) {\n              value[1] = (this.decimalSeparator || this.localeDecimalSeparator) + value[1];\n            }\n\n            if (this.thousandSeparator && value[0].length > 3) {\n              value[0] = value[0].replace(new RegExp(\"[\".concat(this.localeThousandSeparator, \"]\"), 'gim'), this.thousandSeparator);\n            }\n\n            value = value.join('');\n          }\n        }\n\n        this.formattedValue = value.toString();\n      } else {\n        this.formattedValue = null;\n      }\n\n      if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\n        this.inputfieldViewChild.nativeElement.value = this.formattedValue;\n      }\n    }\n  }, {\n    key: \"clearTimer\",\n    value: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n      this.formatValue();\n      this.updateFilledState();\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"updateFilledState\",\n    value: function updateFilledState() {\n      this.filled = this.value !== undefined && this.value != null;\n    }\n  }]);\n\n  return Spinner;\n}();\n\nSpinner.ɵfac = function Spinner_Factory(t) {\n  return new (t || Spinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: Spinner,\n  selectors: [[\"p-spinner\"]],\n  viewQuery: function Spinner_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputfieldViewChild = _t.first);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function Spinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ui-inputwrapper-filled\", ctx.filled)(\"ui-inputwrapper-focus\", ctx.focus);\n    }\n  },\n  inputs: {\n    step: \"step\",\n    disabled: \"disabled\",\n    min: \"min\",\n    max: \"max\",\n    maxlength: \"maxlength\",\n    size: \"size\",\n    placeholder: \"placeholder\",\n    inputId: \"inputId\",\n    readonly: \"readonly\",\n    tabindex: \"tabindex\",\n    required: \"required\",\n    name: \"name\",\n    ariaLabelledBy: \"ariaLabelledBy\",\n    inputStyle: \"inputStyle\",\n    inputStyleClass: \"inputStyleClass\",\n    formatInput: \"formatInput\",\n    decimalSeparator: \"decimalSeparator\",\n    thousandSeparator: \"thousandSeparator\",\n    precision: \"precision\"\n  },\n  outputs: {\n    onChange: \"onChange\",\n    onFocus: \"onFocus\",\n    onBlur: \"onBlur\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([SPINNER_VALUE_ACCESSOR])],\n  decls: 7,\n  vars: 28,\n  consts: [[1, \"ui-spinner\", \"ui-widget\", \"ui-corner-all\"], [\"type\", \"text\", 3, \"value\", \"disabled\", \"readonly\", \"ngStyle\", \"ngClass\", \"keydown\", \"blur\", \"input\", \"change\", \"focus\"], [\"inputfield\", \"\"], [\"type\", \"button\", \"tabindex\", \"-1\", 3, \"ngClass\", \"disabled\", \"mouseleave\", \"mousedown\", \"mouseup\"], [1, \"ui-spinner-button-icon\", \"pi\", \"pi-caret-up\", \"ui-clickable\"], [1, \"ui-spinner-button-icon\", \"pi\", \"pi-caret-down\", \"ui-clickable\"]],\n  template: function Spinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n      ɵngcc0.ɵɵlistener(\"keydown\", function Spinner_Template_input_keydown_1_listener($event) {\n        return ctx.onInputKeydown($event);\n      })(\"blur\", function Spinner_Template_input_blur_1_listener($event) {\n        return ctx.onInputBlur($event);\n      })(\"input\", function Spinner_Template_input_input_1_listener($event) {\n        return ctx.onInput($event);\n      })(\"change\", function Spinner_Template_input_change_1_listener($event) {\n        return ctx.onInputChange($event);\n      })(\"focus\", function Spinner_Template_input_focus_1_listener($event) {\n        return ctx.onInputFocus($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"button\", 3);\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function Spinner_Template_button_mouseleave_3_listener($event) {\n        return ctx.onUpButtonMouseleave($event);\n      })(\"mousedown\", function Spinner_Template_button_mousedown_3_listener($event) {\n        return ctx.onUpButtonMousedown($event);\n      })(\"mouseup\", function Spinner_Template_button_mouseup_3_listener($event) {\n        return ctx.onUpButtonMouseup($event);\n      });\n      ɵngcc0.ɵɵelement(4, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"button\", 3);\n      ɵngcc0.ɵɵlistener(\"mouseleave\", function Spinner_Template_button_mouseleave_5_listener($event) {\n        return ctx.onDownButtonMouseleave($event);\n      })(\"mousedown\", function Spinner_Template_button_mousedown_5_listener($event) {\n        return ctx.onDownButtonMousedown($event);\n      })(\"mouseup\", function Spinner_Template_button_mouseup_5_listener($event) {\n        return ctx.onDownButtonMouseup($event);\n      });\n      ɵngcc0.ɵɵelement(6, \"span\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassMap(ctx.inputStyleClass);\n      ɵngcc0.ɵɵproperty(\"value\", ctx.formattedValue || null)(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"ngStyle\", ctx.inputStyle)(\"ngClass\", \"ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all\");\n      ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"aria-valumin\", ctx.min)(\"aria-valuemax\", ctx.max)(\"aria-valuenow\", ctx.value)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"size\", ctx.size)(\"maxlength\", ctx.maxlength)(\"tabindex\", ctx.tabindex)(\"placeholder\", ctx.placeholder)(\"required\", ctx.required);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(24, _c1, ctx.disabled))(\"disabled\", ctx.disabled || ctx.readonly);\n      ɵngcc0.ɵɵattribute(\"readonly\", ctx.readonly);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(26, _c2, ctx.disabled))(\"disabled\", ctx.disabled || ctx.readonly);\n      ɵngcc0.ɵɵattribute(\"readonly\", ctx.readonly);\n    }\n  },\n  directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass],\n  styles: [\".ui-spinner{display:inline-block;overflow:visible;padding:0;position:relative;vertical-align:middle}.ui-spinner-input{padding-right:1.5em;vertical-align:middle}.ui-spinner-button{cursor:default;display:block;height:50%;margin:0;overflow:hidden;padding:0;position:absolute;right:0;text-align:center;vertical-align:middle;width:1.5em}.ui-spinner .ui-spinner-button-icon{left:50%;margin-left:-.5em;margin-top:-.5em;position:absolute;top:50%;width:1em}.ui-spinner-up{top:0}.ui-spinner-down{bottom:0}.ui-fluid .ui-spinner{width:100%}.ui-fluid .ui-spinner .ui-spinner-input{padding-right:2em;width:100%}.ui-fluid .ui-spinner .ui-spinner-button{width:1.5em}.ui-fluid .ui-spinner .ui-spinner-button .ui-spinner-button-icon{left:.7em}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nSpinner.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nSpinner.propDecorators = {\n  onChange: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output\n  }],\n  onBlur: [{\n    type: Output\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  maxlength: [{\n    type: Input\n  }],\n  size: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  inputId: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabelledBy: [{\n    type: Input\n  }],\n  inputStyle: [{\n    type: Input\n  }],\n  inputStyleClass: [{\n    type: Input\n  }],\n  formatInput: [{\n    type: Input\n  }],\n  decimalSeparator: [{\n    type: Input\n  }],\n  thousandSeparator: [{\n    type: Input\n  }],\n  precision: [{\n    type: Input\n  }],\n  inputfieldViewChild: [{\n    type: ViewChild,\n    args: ['inputfield']\n  }],\n  step: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Spinner, [{\n    type: Component,\n    args: [{\n      selector: 'p-spinner',\n      template: \"\\n        <span class=\\\"ui-spinner ui-widget ui-corner-all\\\">\\n            <input #inputfield type=\\\"text\\\" [attr.id]=\\\"inputId\\\" [value]=\\\"formattedValue||null\\\" [attr.name]=\\\"name\\\" [attr.aria-valumin]=\\\"min\\\" [attr.aria-valuemax]=\\\"max\\\" [attr.aria-valuenow]=\\\"value\\\" [attr.aria-labelledby]=\\\"ariaLabelledBy\\\"\\n            [attr.size]=\\\"size\\\" [attr.maxlength]=\\\"maxlength\\\" [attr.tabindex]=\\\"tabindex\\\" [attr.placeholder]=\\\"placeholder\\\" [disabled]=\\\"disabled\\\" [readonly]=\\\"readonly\\\" [attr.required]=\\\"required\\\"\\n            (keydown)=\\\"onInputKeydown($event)\\\" (blur)=\\\"onInputBlur($event)\\\" (input)=\\\"onInput($event)\\\" (change)=\\\"onInputChange($event)\\\" (focus)=\\\"onInputFocus($event)\\\"\\n            [ngStyle]=\\\"inputStyle\\\" [class]=\\\"inputStyleClass\\\" [ngClass]=\\\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\\\">\\n            <button type=\\\"button\\\" [ngClass]=\\\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\\\" [disabled]=\\\"disabled||readonly\\\" tabindex=\\\"-1\\\" [attr.readonly]=\\\"readonly\\\"\\n                (mouseleave)=\\\"onUpButtonMouseleave($event)\\\" (mousedown)=\\\"onUpButtonMousedown($event)\\\" (mouseup)=\\\"onUpButtonMouseup($event)\\\">\\n                <span class=\\\"ui-spinner-button-icon pi pi-caret-up ui-clickable\\\"></span>\\n            </button>\\n            <button type=\\\"button\\\" [ngClass]=\\\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\\\" [disabled]=\\\"disabled||readonly\\\" tabindex=\\\"-1\\\" [attr.readonly]=\\\"readonly\\\"\\n                (mouseleave)=\\\"onDownButtonMouseleave($event)\\\" (mousedown)=\\\"onDownButtonMousedown($event)\\\" (mouseup)=\\\"onDownButtonMouseup($event)\\\">\\n                <span class=\\\"ui-spinner-button-icon pi pi-caret-down ui-clickable\\\"></span>\\n            </button>\\n        </span>\\n    \",\n      host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n      },\n      providers: [SPINNER_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ui-spinner{display:inline-block;overflow:visible;padding:0;position:relative;vertical-align:middle}.ui-spinner-input{padding-right:1.5em;vertical-align:middle}.ui-spinner-button{cursor:default;display:block;height:50%;margin:0;overflow:hidden;padding:0;position:absolute;right:0;text-align:center;vertical-align:middle;width:1.5em}.ui-spinner .ui-spinner-button-icon{left:50%;margin-left:-.5em;margin-top:-.5em;position:absolute;top:50%;width:1em}.ui-spinner-up{top:0}.ui-spinner-down{bottom:0}.ui-fluid .ui-spinner{width:100%}.ui-fluid .ui-spinner .ui-spinner-input{padding-right:2em;width:100%}.ui-fluid .ui-spinner .ui-spinner-button{width:1.5em}.ui-fluid .ui-spinner .ui-spinner-button .ui-spinner-button-icon{left:.7em}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    onChange: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    step: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    maxlength: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    inputStyle: [{\n      type: Input\n    }],\n    inputStyleClass: [{\n      type: Input\n    }],\n    formatInput: [{\n      type: Input\n    }],\n    decimalSeparator: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    precision: [{\n      type: Input\n    }],\n    inputfieldViewChild: [{\n      type: ViewChild,\n      args: ['inputfield']\n    }]\n  });\n})();\n\nvar SpinnerModule = function SpinnerModule() {\n  _classCallCheck(this, SpinnerModule);\n};\n\nSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SpinnerModule\n});\nSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SpinnerModule_Factory(t) {\n    return new (t || SpinnerModule)();\n  },\n  imports: [[CommonModule, InputTextModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SpinnerModule, {\n    declarations: function declarations() {\n      return [Spinner];\n    },\n    imports: function imports() {\n      return [CommonModule, InputTextModule];\n    },\n    exports: function exports() {\n      return [Spinner];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, InputTextModule],\n      exports: [Spinner],\n      declarations: [Spinner]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SPINNER_VALUE_ACCESSOR, Spinner, SpinnerModule };","map":{"version":3,"sources":["../../src/app/components/spinner/spinner.ts","../../src/app/components/spinner/primeng-spinner.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,Input,Output,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SPINNER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Spinner),\n    multi: true\n};\n\n@Component({\n    selector: 'p-spinner',\n    template: `\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\n            <input #inputfield type=\"text\" [attr.id]=\"inputId\" [value]=\"formattedValue||null\" [attr.name]=\"name\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\" [attr.aria-labelledby]=\"ariaLabelledBy\"\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\" [readonly]=\"readonly\" [attr.required]=\"required\"\n            (keydown)=\"onInputKeydown($event)\" (blur)=\"onInputBlur($event)\" (input)=\"onInput($event)\" (change)=\"onInputChange($event)\" (focus)=\"onInputFocus($event)\"\n            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [ngClass]=\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\">\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" tabindex=\"-1\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event)\" (mouseup)=\"onUpButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-up ui-clickable\"></span>\n            </button>\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" tabindex=\"-1\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event)\" (mouseup)=\"onDownButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-down ui-clickable\"></span>\n            </button>\n        </span>\n    `,\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [SPINNER_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./spinner.css']\n})\nexport class Spinner implements OnInit,ControlValueAccessor {\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Input() min: number;\n\n    @Input() max: number;\n    \n    @Input() maxlength: number;\n    \n    @Input() size: number;\n\n    @Input() placeholder: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() readonly: boolean;\n\n    @Input() tabindex: number;\n            \n    @Input() required: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: string;\n\n    @Input() formatInput: boolean;\n\n    @Input() decimalSeparator: string;\n\n    @Input() thousandSeparator: string;\n\n    @Input() precision: number;\n    \n    value: any;\n\n    _step: number = 1;\n\n    formattedValue: string;\n        \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    keyPattern: RegExp = /[0-9\\+\\-]/;\n        \n    public timer: any;\n    \n    public focus: boolean;\n    \n    public filled: boolean;\n    \n    public negativeSeparator = '-';\n\n    localeDecimalSeparator: string;\n\n    localeThousandSeparator: string;\n\n    thousandRegExp: RegExp;\n\n    calculatedPrecision: number;\n    \n    @ViewChild('inputfield') inputfieldViewChild: ElementRef;\n\n    @Input() get step(): number {\n        return this._step;\n    }\n    set step(val:number) {\n        this._step = val;\n\n        if (this._step != null) {\n            let tokens = this.step.toString().split(/[,]|[.]/);\n            this.calculatedPrecision = tokens[1] ? tokens[1].length : undefined;\n        }\n    }\n    \n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (this.formatInput) {\n            this.localeDecimalSeparator = (1.1).toLocaleString().substring(1, 2);\n            this.localeThousandSeparator = (1000).toLocaleString().substring(1, 2);\n            this.thousandRegExp = new RegExp(`[${this.thousandSeparator || this.localeThousandSeparator}]`, 'gim');\n\n            if (this.decimalSeparator && this.thousandSeparator && this.decimalSeparator === this.thousandSeparator) {\n                console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\n            }\n        }\n    }\n\n    repeat(event: Event, interval: number, dir: number) {\n        let i = interval||500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n    \n    spin(event: Event, dir: number) {\n        let step = this.step * dir;\n        let currentValue: number;\n        let precision = this.getPrecision();\n\n        if (this.value)\n            currentValue = (typeof this.value === 'string') ? this.parseValue(this.value) : this.value;\n        else\n            currentValue = 0;\n        \n        if (precision)\n            this.value = parseFloat(this.toFixed(currentValue + step, precision));\n        else\n            this.value = currentValue + step;\n    \n        if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n            this.value = currentValue;\n        }\n    \n        if (this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n        }\n\n        if (this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n        }\n        \n        this.formatValue();\n        this.onModelChange(this.value);\n        this.onChange.emit(event);\n    }\n\n    getPrecision() {\n        return this.precision === undefined ? this.calculatedPrecision : this.precision;\n    }\n    \n    toFixed(value: number, precision: number) {\n        let power = Math.pow(10, precision||0);\n        return String(Math.round(value * power) / power);\n    }\n    \n    onUpButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, 1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onUpButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onUpButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, -1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onDownButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onInputKeydown(event: KeyboardEvent) {\n        if (event.which == 38) {\n            this.spin(event, 1);\n            event.preventDefault();\n        }\n        else if (event.which == 40) {\n            this.spin(event, -1);\n            event.preventDefault();\n        }\n    }\n\n    onInputChange(event: Event) {\n        this.onChange.emit(event);\n    }\n\n    onInput(event: KeyboardEvent) {\n        this.value = this.parseValue((<HTMLInputElement> event.target).value);\n        this.onModelChange(this.value);\n        this.updateFilledState();\n    }\n        \n    onInputBlur(event) {\n        this.focus = false;\n        this.formatValue();\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n    \n    parseValue(val: string): number {\n        let value: number;\n        let precision = this.getPrecision();\n                \n        if (val.trim() === '') {\n            value = null;\n        }\n        else {\n            if (this.formatInput) {\n                val = val.replace(this.thousandRegExp, '');\n            }\n\n            if (precision) {\n                val = this.formatInput ? val.replace(this.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\n                value = parseFloat(val);\n            }\n            else {\n                value = parseInt(val, 10);\n            }\n            \n            if (!isNaN(value)) {\n                if (this.max !== null && value > this.max) {\n                    value = this.max;\n                }\n\n                if (this.min !== null && value < this.min) {\n                    value = this.min;\n                }\n            }\n            else {\n                value = null;\n            }\n        }\n        \n        return value;\n    }\n\n    formatValue() {\n        let value = this.value;\n        let precision = this.getPrecision();\n\n        if (value != null) {\n            if (this.formatInput) {\n                value = value.toLocaleString(undefined, {maximumFractionDigits: 20});\n    \n                if (this.decimalSeparator && this.thousandSeparator) {\n                    value = value.split(this.localeDecimalSeparator);\n    \n                    if (precision && value[1]) {\n                        value[1] = (this.decimalSeparator || this.localeDecimalSeparator) + value[1];\n                    }\n    \n                    if (this.thousandSeparator && value[0].length > 3) {\n                        value[0] = value[0].replace(new RegExp(`[${this.localeThousandSeparator}]`, 'gim'), this.thousandSeparator);\n                    }\n    \n                    value = value.join('');\n                }\n            }\n    \n            this.formattedValue = value.toString();\n        }\n        else {\n            this.formattedValue = null;\n        }\n\n        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\n            this.inputfieldViewChild.nativeElement.value = this.formattedValue;\n        }\n    }\n            \n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.formatValue();\n        this.updateFilledState();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n    \n    updateFilledState() {\n        this.filled = (this.value !== undefined && this.value != null);\n    }\n}\n\n\n@NgModule({\n    imports: [CommonModule,InputTextModule],\n    exports: [Spinner],\n    declarations: [Spinner]\n})\nexport class SpinnerModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}