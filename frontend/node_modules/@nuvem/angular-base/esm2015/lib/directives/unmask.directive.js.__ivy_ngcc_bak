import { Directive, ElementRef, Input } from '@angular/core';
import { NgControl } from '@angular/forms';
/**
 *
 * UnmaskDirective diretiva para remoção de mascaras de valores numericos
 * @class
 */
export class UnmaskDirective {
    /**
     * constructor method
     * @param {ElementRef} elementRef
     * @param {NgControl} model
     * @constructor
     */
    constructor(elementRef, model) {
        this.elementRef = elementRef;
        this.model = model;
    }
    /**
     * Metodo executado no carregamento da diretiva, executa verificação do valor e remove as mascaras baseado em um aexpressão regular
     * @returns void
     */
    ngOnInit() {
        this.subscriber = this.model.control.valueChanges.subscribe(() => {
            const newValue = this.elementRef.nativeElement.value.replace(new RegExp(this.appUnmask), '');
            this.model.control.setValue(newValue, {
                emitEvent: false,
                emitModelToViewChange: false,
                emitViewToModelChange: false
            });
        });
    }
    /**
     * ngOnDestroy method
     * @returns void
     */
    ngOnDestroy() {
        this.subscriber.unsubscribe();
    }
}
UnmaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[unmask]'
            },] }
];
UnmaskDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl }
];
UnmaskDirective.propDecorators = {
    appUnmask: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5tYXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2RpcmVjdGl2ZXMvdW5tYXNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDOzs7O0dBSUc7QUFJSCxNQUFNLE9BQU8sZUFBZTtJQWN4Qjs7Ozs7T0FLRztJQUNILFlBQW9CLFVBQXNCLEVBQVUsS0FBZ0I7UUFBaEQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQVc7SUFBSSxDQUFDO0lBRXpFOzs7T0FHRztJQUNILFFBQVE7UUFDSixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQ3ZELEdBQUcsRUFBRTtZQUNELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzdGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDdkIsUUFBUSxFQUNSO2dCQUNJLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixxQkFBcUIsRUFBRSxLQUFLO2dCQUM1QixxQkFBcUIsRUFBRSxLQUFLO2FBQy9CLENBQ0osQ0FBQztRQUNOLENBQUMsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNILFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7OztZQW5ESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFVBQVU7YUFDdkI7OztZQVZtQixVQUFVO1lBQ3JCLFNBQVM7Ozt3QkFnQmIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBJbnB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qKlxuICpcbiAqIFVubWFza0RpcmVjdGl2ZSBkaXJldGl2YSBwYXJhIHJlbW/Dp8OjbyBkZSBtYXNjYXJhcyBkZSB2YWxvcmVzIG51bWVyaWNvc1xuICogQGNsYXNzXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3VubWFza10nXG59KVxuZXhwb3J0IGNsYXNzIFVubWFza0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIC8qKlxuICAgICAqIFByb3ByaWVkYWRlIGEgcGFyYSByZWFsaXphciBhIGZvcm1hdGHDp8OjbyBleHByZXNzw6NvIHJlZ3VsYXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfSBhcHBVbm1hc2tcbiAgICAgKi9cbiAgICBASW5wdXQoKSBhcHBVbm1hc2s6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIENyaWEgY2FuYWwgZGUgZXNjdXRhIHBhcmEgYSBkaXJldGl2YVxuICAgICAqIEB0eXBlIHtTdWJzY3JpcHRpb259IHN1YnNjcmliZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIHN1YnNjcmliZXI7XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnRSZWZ9IGVsZW1lbnRSZWZcbiAgICAgKiBAcGFyYW0ge05nQ29udHJvbH0gbW9kZWxcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgbW9kZWw6IE5nQ29udHJvbCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gZXhlY3V0YWRvIG5vIGNhcnJlZ2FtZW50byBkYSBkaXJldGl2YSwgZXhlY3V0YSB2ZXJpZmljYcOnw6NvIGRvIHZhbG9yIGUgcmVtb3ZlIGFzIG1hc2NhcmFzIGJhc2VhZG8gZW0gdW0gYWV4cHJlc3PDo28gcmVndWxhclxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyID0gdGhpcy5tb2RlbC5jb250cm9sLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC52YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5hcHBVbm1hc2spLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5jb250cm9sLnNldFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdEV2ZW50OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRNb2RlbFRvVmlld0NoYW5nZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0Vmlld1RvTW9kZWxDaGFuZ2U6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5nT25EZXN0cm95IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuIl19