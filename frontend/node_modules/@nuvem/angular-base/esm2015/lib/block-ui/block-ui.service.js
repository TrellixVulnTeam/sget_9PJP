import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Class BlockUiService
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export class BlockUiService {
    /**
     * constructor method
     * @constructor
     */
    constructor() {
        /**
         * subject property
         * @private
         * @type {Subject<BlockUiStatus>}
         */
        this.subject = new Subject();
        /**
         * loaderStatus property
         * @public
         * @type {Observable}
         */
        this.loaderStatus = this.subject.asObservable();
    }
    /**
     * show methods
     * @returns void
     */
    show() {
        this.subject.next({ status: true });
    }
    /**
     * hide methods
     * @returns void
     */
    hide() {
        this.subject.next({ status: false });
    }
}
BlockUiService.ɵfac = function BlockUiService_Factory(t) { return new (t || BlockUiService)(); };
BlockUiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BlockUiService_Factory() { return new BlockUiService(); }, token: BlockUiService, providedIn: "root" });
BlockUiService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvYmxvY2stdWkvYmxvY2stdWkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlILE1BQU0sT0FBTyxjQUFjO0FBQzNCLElBZUk7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUk7QUFBZ0IsUUFsQmhCO0FBQ0o7QUFDSTtBQUNJO0FBRUosV0FERztBQUNQLFFBQVksWUFBTyxHQUFHLElBQUksT0FBTyxFQUFpQixDQUFDO0FBQ25ELFFBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFFSixXQURHO0FBQ1AsUUFBSSxpQkFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDL0MsSUFLb0IsQ0FBQztBQUNyQixJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQUk7QUFDUixRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNELElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksSUFBSTtBQUNSLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQWdCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDNUQsSUFBSSxDQUFDO0FBQ0w7aUdBQUM7QUFDRCx5S0F0Q0s7QUFBQztBQUhMLFVBQVUsU0FBQyxrQkFDUixVQUFVLEVBQUUsTUFBTSxjQUNyQjs7Ozs7Z0RBSU87QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsb2NrVWlTdGF0dXMgfSBmcm9tICcuL2Jsb2NrLXVpLnN0YXR1cyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQ2xhc3MgQmxvY2tVaVNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEJsb2NrVWlTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIHN1YmplY3QgcHJvcGVydHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtTdWJqZWN0PEJsb2NrVWlTdGF0dXM+fVxuICAgICAqL1xuICAgIHByaXZhdGUgc3ViamVjdCA9IG5ldyBTdWJqZWN0PEJsb2NrVWlTdGF0dXM+KCk7XG5cbiAgICAvKipcbiAgICAgKiBsb2FkZXJTdGF0dXMgcHJvcGVydHlcbiAgICAgKiBAcHVibGljXG4gICAgICogQHR5cGUge09ic2VydmFibGV9XG4gICAgICovXG4gICAgbG9hZGVyU3RhdHVzID0gdGhpcy5zdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIC8qKlxuICAgICAqIHNob3cgbWV0aG9kc1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLnN1YmplY3QubmV4dCg8QmxvY2tVaVN0YXR1cz57IHN0YXR1czogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoaWRlIG1ldGhvZHNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoPEJsb2NrVWlTdGF0dXM+eyBzdGF0dXM6IGZhbHNlIH0pO1xuICAgIH1cbn1cbiJdfQ==