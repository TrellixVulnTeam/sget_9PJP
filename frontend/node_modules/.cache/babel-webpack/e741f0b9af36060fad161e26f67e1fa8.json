{"ast":null,"code":"import _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { CommonModule } from '@angular/common';\nimport { ReplaySubject } from 'rxjs';\nimport { Injectable, Component, Input, ViewEncapsulation, ViewChild, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef, Directive, Renderer2, NgModule, InjectionToken } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"*\"];\nvar _c1 = [\"templateOutlet\"];\n\nfunction BlockUIContentComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r2.message || ctx_r2.defaultMessage, \" \");\n  }\n}\n\nfunction BlockUIContentComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_div_1_div_2_Template, 2, 1, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.message || ctx_r0.defaultMessage);\n  }\n}\n\nfunction BlockUIContentComponent_2_ng_template_0_Template(rf, ctx) {}\n\nfunction BlockUIContentComponent_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, BlockUIContentComponent_2_ng_template_0_Template, 0, 0, \"ng-template\", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);\n  }\n}\n\nvar _c2 = function _c2(a0) {\n  return {\n    \"active\": a0\n  };\n};\n\nvar BlockUIActions = function BlockUIActions() {\n  _classCallCheck(this, BlockUIActions);\n};\n\nBlockUIActions.START = 'start';\nBlockUIActions.STOP = 'stop';\nBlockUIActions.UPDATE = 'update';\nBlockUIActions.RESET = 'reset';\nBlockUIActions.UNSUBSCRIBE = 'unsubscribe';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar\n/** @type {?} */\nBlockUIDefaultName = \"block-ui-main\";\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar BlockUIInstanceService = /*#__PURE__*/function () {\n  function BlockUIInstanceService() {\n    _classCallCheck(this, BlockUIInstanceService);\n\n    this.blockUISettings = {};\n    this.blockUIInstances = {};\n    this.blockUISubject = new ReplaySubject();\n    this.blockUIObservable = this.blockUISubject.asObservable();\n    this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BlockUIInstanceService, [{\n    key: \"getSettings\",\n    value: function getSettings() {\n      return this.blockUISettings;\n    }\n    /**\n     * @param {?=} settings\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateSettings\",\n    value: function updateSettings() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.blockUISettings = Object.assign({}, this.blockUISettings, settings);\n    }\n    /**\n     * @param {?=} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"decorate\",\n    value: function decorate() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BlockUIDefaultName;\n      var\n      /** @type {?} */\n      blockUI =\n      /** @type {?} */\n      {\n        name: name,\n        isActive: false,\n        blockCount: 0,\n        start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),\n        update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),\n        stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),\n        reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),\n        unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)\n      };\n      this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;\n      return blockUI;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe() {\n      return this.blockUIObservable;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"blockUIMiddleware\",\n    value: function blockUIMiddleware(_ref) {\n      var action = _ref.action,\n          name = _ref.name;\n      var\n      /** @type {?} */\n      isActive = null;\n\n      switch (action) {\n        case BlockUIActions.START:\n          isActive = true;\n          break;\n\n        case BlockUIActions.STOP:\n        case BlockUIActions.RESET:\n          isActive = false;\n          break;\n      }\n\n      if (isActive !== null) {\n        this.blockUIInstances[name].isActive = isActive;\n      }\n    }\n    /**\n     * @param {?} subject\n     * @param {?} action\n     * @param {?=} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(subject, action) {\n      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BlockUIDefaultName;\n      return function (message) {\n        subject.next({\n          name: name,\n          action: action,\n          message: message\n        });\n      };\n    }\n  }]);\n\n  return BlockUIInstanceService;\n}();\n\nBlockUIInstanceService.ɵfac = function BlockUIInstanceService_Factory(t) {\n  return new (t || BlockUIInstanceService)();\n};\n\nBlockUIInstanceService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BlockUIInstanceService,\n  factory: BlockUIInstanceService.ɵfac\n});\n/** @nocollapse */\n\nBlockUIInstanceService.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIInstanceService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BlockUIComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} blockUI\n   */\n  function BlockUIComponent(blockUI) {\n    _classCallCheck(this, BlockUIComponent);\n\n    this.blockUI = blockUI;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BlockUIComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.name = this.name || BlockUIDefaultName;\n      this.template = this.template || this.blockUI.blockUISettings.template;\n    }\n  }]);\n\n  return BlockUIComponent;\n}();\n\nBlockUIComponent.ɵfac = function BlockUIComponent_Factory(t) {\n  return new (t || BlockUIComponent)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService));\n};\n\nBlockUIComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BlockUIComponent,\n  selectors: [[\"block-ui\"]],\n  inputs: {\n    name: \"name\",\n    template: \"template\",\n    message: \"message\",\n    delayStart: \"delayStart\",\n    delayStop: \"delayStop\"\n  },\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 5,\n  consts: [[3, \"name\", \"message\", \"template\", \"delayStart\", \"delayStop\"]],\n  template: function BlockUIComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelement(1, \"block-ui-content\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"name\", ctx.name)(\"message\", ctx.message)(\"template\", ctx.template)(\"delayStart\", ctx.delayStart)(\"delayStop\", ctx.delayStop);\n    }\n  },\n  directives: function directives() {\n    return [BlockUIContentComponent];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nBlockUIComponent.ctorParameters = function () {\n  return [{\n    type: BlockUIInstanceService\n  }];\n};\n\nBlockUIComponent.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  message: [{\n    type: Input\n  }],\n  delayStart: [{\n    type: Input\n  }],\n  delayStop: [{\n    type: Input\n  }],\n  template: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIComponent, [{\n    type: Component,\n    args: [{\n      selector: 'block-ui',\n      template: \"\\n    <ng-content></ng-content>\\n    <block-ui-content\\n      [name]=\\\"name\\\"\\n      [message]=\\\"message\\\"\\n      [template]=\\\"template\\\"\\n      [delayStart]=\\\"delayStart\\\"\\n      [delayStop]=\\\"delayStop\\\"\\n    >\\n    </block-ui-content>\\n  \",\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: BlockUIInstanceService\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    message: [{\n      type: Input\n    }],\n    delayStart: [{\n      type: Input\n    }],\n    delayStop: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Spinner style - https://github.com/lukehaas/css-loaders\n\n\nvar\n/** @type {?} */\nstyles = \"\\n.block-ui-wrapper {\\n  display: none;\\n  position: fixed;\\n  height: 100%;\\n  width: 100%;\\n  top: 0;\\n  left: 0;\\n  background: rgba(0, 0, 0, 0.70);\\n  z-index: 30000;\\n  cursor: wait;\\n}\\n\\n.block-ui-wrapper.block-ui-wrapper--element {\\n  position: absolute;\\n}\\n\\n.block-ui-wrapper.active {\\n  display: block;\\n}\\n\\n.block-ui-wrapper.block-ui-main {\\n  position: fixed;\\n}\\n\\n.block-ui-spinner,\\n.block-ui-template {\\n  position: absolute;\\n  top: 40%;\\n  margin: 0 auto;\\n  left: 0;\\n  right: 0;\\n  transform: translateY(-50%);\\n}\\n\\n.block-ui-spinner > .message {\\n  font-size: 1.3em;\\n  text-align: center;\\n  color: #fff;\\n}\\n\\n.block-ui__element {\\n  position: relative;\\n}\\n\\n.loader,\\n.loader:after {\\n  border-radius: 50%;\\n  width: 10em;\\n  height: 10em;\\n}\\n.loader {\\n  margin: 7px auto;\\n  font-size: 5px;\\n  position: relative;\\n  text-indent: -9999em;\\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-left: 1.1em solid #ffffff;\\n  -webkit-transform: translateZ(0);\\n  -ms-transform: translateZ(0);\\n  transform: translateZ(0);\\n  -webkit-animation: load8 1.1s infinite linear;\\n  animation: load8 1.1s infinite linear;\\n}\\n\\n@-webkit-keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\";\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar\n/** @type {?} */\ntemplate = \"\\n<div class=\\\"block-ui-wrapper {{name}} {{className}}\\\" [ngClass]=\\\"{ 'active': active }\\\">\\n  <div class=\\\"block-ui-spinner\\\" *ngIf=\\\"!templateCmp\\\">\\n    <div class=\\\"loader\\\"></div>\\n    <div *ngIf=\\\"message || defaultMessage\\\" class=\\\"message\\\">\\n      {{ message || defaultMessage }}\\n    </div>\\n  </div>\\n  <ng-template *ngIf=\\\"templateCmp\\\" #templateOutlet></ng-template>\\n</div>\\n\";\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar BlockUIContentComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} blockUI\n   * @param {?} resolver\n   * @param {?} changeDetectionRef\n   */\n  function BlockUIContentComponent(blockUI, resolver, changeDetectionRef) {\n    _classCallCheck(this, BlockUIContentComponent);\n\n    this.blockUI = blockUI;\n    this.resolver = resolver;\n    this.changeDetectionRef = changeDetectionRef;\n    this.name = BlockUIDefaultName;\n    this.delayStart = 0;\n    this.delayStop = 0;\n    this.state = {\n      startTimeout: null,\n      stopTimeout: null,\n      blockCount: 0\n    };\n    this.active = false;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BlockUIContentComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.settings = this.blockUI.getSettings();\n      this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      try {\n        if (!this.templateCmp) {\n          return false;\n        }\n\n        if (this.templateCmp instanceof TemplateRef) {\n          this.templateOutlet.createEmbeddedView(this.templateCmp);\n        } else {\n          var\n          /** @type {?} */\n          templateComp = this.resolver.resolveComponentFactory(this.templateCmp);\n          this.templateCompRef = this.templateOutlet.createComponent(templateComp);\n          this.updateBlockTemplate(this.message);\n        }\n      } catch (\n      /** @type {?} */\n      error) {\n        console.error('ng-block-ui:', error);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      this.detectChanges();\n    }\n    /**\n     * @param {?} blockUI$\n     * @return {?}\n     */\n\n  }, {\n    key: \"subscribeToBlockUI\",\n    value: function subscribeToBlockUI(blockUI$) {\n      var _this = this;\n\n      return blockUI$.subscribe(function (event) {\n        return _this.onDispatchedEvent(event);\n      });\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDispatchedEvent\",\n    value: function onDispatchedEvent(event) {\n      switch (event.action) {\n        case BlockUIActions.START:\n          this.onStart(event);\n          break;\n\n        case BlockUIActions.STOP:\n          this.onStop(event);\n          break;\n\n        case BlockUIActions.UPDATE:\n          this.onUpdate(event);\n          break;\n\n        case BlockUIActions.RESET:\n          this.onReset();\n          break;\n\n        case BlockUIActions.UNSUBSCRIBE:\n          this.onStop(event);\n          this.onUnsubscribe(event.name);\n          break;\n      }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref2) {\n      var _this2 = this;\n\n      var name = _ref2.name,\n          message = _ref2.message;\n\n      if (name === this.name) {\n        var\n        /** @type {?} */\n        delay = this.delayStart || this.settings.delayStart || 0;\n\n        if (this.state.startTimeout === null) {\n          if (delay === 0) {\n            this.showBlock(message);\n          } else {\n            this.state.startTimeout = setTimeout(function () {\n              _this2.showBlock(message);\n            }, delay);\n          }\n        }\n\n        this.state.blockCount++;\n        this.updateInstanceBlockCount();\n      }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"onStop\",\n    value: function onStop(_ref3) {\n      var _this3 = this;\n\n      var name = _ref3.name;\n\n      if (name === this.name) {\n        var\n        /** @type {?} */\n        delay = this.delayStop || this.settings.delayStop || 0;\n\n        if (this.state.blockCount > 1) {\n          this.state.blockCount--;\n        } else {\n          if (!this.active) {\n            this.clearState();\n          } else {\n            if (this.state.stopTimeout === null) {\n              if (delay === 0) {\n                this.hideBlock();\n              } else {\n                this.state.stopTimeout = setTimeout(function () {\n                  _this3.hideBlock();\n                }, delay);\n              }\n            }\n          }\n        }\n\n        this.updateInstanceBlockCount();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"onReset\",\n    value: function onReset() {\n      this.hideBlock();\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(_ref4) {\n      var _this4 = this;\n\n      var name = _ref4.name,\n          message = _ref4.message;\n\n      if (name === this.name) {\n        var\n        /** @type {?} */\n        delay = this.delayStart || this.settings.delayStart || 0;\n\n        if (delay === 0) {\n          this.updateMessage(message);\n        } else {\n          setTimeout(function () {\n            _this4.updateMessage(message);\n          }, delay);\n        }\n      }\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateMessage\",\n    value: function updateMessage(message) {\n      this.message = message || this.defaultMessage || this.settings.message;\n      this.updateBlockTemplate(this.message);\n      this.detectChanges();\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"showBlock\",\n    value: function showBlock(message) {\n      this.active = true;\n      this.message = message || this.defaultMessage || this.settings.message;\n      this.updateBlockTemplate(this.message);\n      this.detectChanges();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"hideBlock\",\n    value: function hideBlock() {\n      this.clearState();\n      this.active = false;\n      this.detectChanges();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearState\",\n    value: function clearState() {\n      this.state.startTimeout != null && clearTimeout(this.state.startTimeout);\n      this.state.stopTimeout != null && clearTimeout(this.state.stopTimeout);\n      this.state.blockCount = 0;\n      this.state.startTimeout = null;\n      this.state.stopTimeout = null;\n      this.updateInstanceBlockCount();\n    }\n    /**\n     * @param {?} msg\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateBlockTemplate\",\n    value: function updateBlockTemplate(msg) {\n      if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {\n        this.templateCompRef.instance.message = msg;\n      }\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe(name) {\n      if (this.blockUISubscription && name === this.name) {\n        this.blockUISubscription.unsubscribe();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateInstanceBlockCount\",\n    value: function updateInstanceBlockCount() {\n      if (this.blockUI.blockUIInstances[this.name]) {\n        this.blockUI.blockUIInstances[this.name].blockCount = this.state.blockCount;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"detectChanges\",\n    value: function detectChanges() {\n      if (!this.changeDetectionRef['destroyed']) {\n        this.changeDetectionRef.detectChanges();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.onUnsubscribe(this.name);\n    }\n  }]);\n\n  return BlockUIContentComponent;\n}();\n\nBlockUIContentComponent.ɵfac = function BlockUIContentComponent_Factory(t) {\n  return new (t || BlockUIContentComponent)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nBlockUIContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: BlockUIContentComponent,\n  selectors: [[\"block-ui-content\"]],\n  viewQuery: function BlockUIContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c1, 1, ViewContainerRef);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateOutlet = _t.first);\n    }\n  },\n  inputs: {\n    name: \"name\",\n    delayStart: \"delayStart\",\n    delayStop: \"delayStop\",\n    defaultMessage: [\"message\", \"defaultMessage\"],\n    templateCmp: [\"template\", \"templateCmp\"]\n  },\n  decls: 3,\n  vars: 9,\n  consts: [[3, \"ngClass\"], [\"class\", \"block-ui-spinner\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"block-ui-spinner\"], [1, \"loader\"], [\"class\", \"message\", 4, \"ngIf\"], [1, \"message\"], [\"templateOutlet\", \"\"]],\n  template: function BlockUIContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, BlockUIContentComponent_div_1_Template, 3, 1, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, BlockUIContentComponent_2_Template, 2, 0, undefined, 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMapInterpolate2(\"block-ui-wrapper \", ctx.name, \" \", ctx.className, \"\");\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(7, _c2, ctx.active));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.templateCmp);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.templateCmp);\n    }\n  },\n  directives: [ɵngcc1.NgClass, ɵngcc1.NgIf],\n  styles: [\"\\n.block-ui-wrapper {\\n  display: none;\\n  position: fixed;\\n  height: 100%;\\n  width: 100%;\\n  top: 0;\\n  left: 0;\\n  background: rgba(0, 0, 0, 0.70);\\n  z-index: 30000;\\n  cursor: wait;\\n}\\n\\n.block-ui-wrapper.block-ui-wrapper--element {\\n  position: absolute;\\n}\\n\\n.block-ui-wrapper.active {\\n  display: block;\\n}\\n\\n.block-ui-wrapper.block-ui-main {\\n  position: fixed;\\n}\\n\\n.block-ui-spinner,\\n.block-ui-template {\\n  position: absolute;\\n  top: 40%;\\n  margin: 0 auto;\\n  left: 0;\\n  right: 0;\\n  transform: translateY(-50%);\\n}\\n\\n.block-ui-spinner > .message {\\n  font-size: 1.3em;\\n  text-align: center;\\n  color: #fff;\\n}\\n\\n.block-ui__element {\\n  position: relative;\\n}\\n\\n.loader,\\n.loader:after {\\n  border-radius: 50%;\\n  width: 10em;\\n  height: 10em;\\n}\\n.loader {\\n  margin: 7px auto;\\n  font-size: 5px;\\n  position: relative;\\n  text-indent: -9999em;\\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\\n  border-left: 1.1em solid #ffffff;\\n  -webkit-transform: translateZ(0);\\n  -ms-transform: translateZ(0);\\n  transform: translateZ(0);\\n  -webkit-animation: load8 1.1s infinite linear;\\n  animation: load8 1.1s infinite linear;\\n}\\n\\n@-webkit-keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes load8 {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nBlockUIContentComponent.ctorParameters = function () {\n  return [{\n    type: BlockUIInstanceService\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nBlockUIContentComponent.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  delayStart: [{\n    type: Input\n  }],\n  delayStop: [{\n    type: Input\n  }],\n  defaultMessage: [{\n    type: Input,\n    args: ['message']\n  }],\n  templateCmp: [{\n    type: Input,\n    args: ['template']\n  }],\n  templateOutlet: [{\n    type: ViewChild,\n    args: ['templateOutlet', {\n      read: ViewContainerRef\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'block-ui-content',\n      template: template,\n      // TODO: Find how to bundle styles for npm\n      encapsulation: ViewEncapsulation.None,\n      styles: [styles]\n    }]\n  }], function () {\n    return [{\n      type: BlockUIInstanceService\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    delayStart: [{\n      type: Input\n    }],\n    delayStop: [{\n      type: Input\n    }],\n    defaultMessage: [{\n      type: Input,\n      args: ['message']\n    }],\n    templateCmp: [{\n      type: Input,\n      args: ['template']\n    }],\n    templateOutlet: [{\n      type: ViewChild,\n      args: ['templateOutlet', {\n        read: ViewContainerRef\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BlockUIService = /*#__PURE__*/function () {\n  /**\n   * @param {?} blockUIInstance\n   */\n  function BlockUIService(blockUIInstance) {\n    _classCallCheck(this, BlockUIService);\n\n    this.blockUIInstance = blockUIInstance;\n  }\n  /**\n   * Starts blocking for given BlockUI instance or instances\n   * @param {?} target\n   * @param {?=} message\n   * @return {?}\n   */\n\n\n  _createClass(BlockUIService, [{\n    key: \"start\",\n    value: function start(target, message) {\n      this.dispatch(target, BlockUIActions.START, message);\n    }\n    /**\n     * Stops blocking for given BlockUI instance or instances\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(target) {\n      this.dispatch(target, BlockUIActions.STOP);\n    }\n    /**\n     * Reset blocking for given BlockUI instance or instances\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(target) {\n      this.dispatch(target, BlockUIActions.RESET);\n    }\n    /**\n     * Unsubscribes for given BlockUI instance or instances\n     * @param {?} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(target) {\n      this.dispatch(target, BlockUIActions.UNSUBSCRIBE);\n    }\n    /**\n     * Checks if BlockUI is actively blocking\n     * @param {?=} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var\n      /** @type {?} */\n      targets = target ? this.toArray(target) : null;\n      var\n      /** @type {?} */\n      instances = this.blockUIInstance.blockUIInstances;\n      return Object.keys(instances).some(function (key) {\n        if (!targets) {\n          return instances[key].isActive;\n        }\n\n        return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;\n      });\n    }\n    /**\n     * @param {?=} target\n     * @param {?=} type\n     * @param {?=} message\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispatch\",\n    value: function dispatch() {\n      var _this5 = this;\n\n      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var type = arguments.length > 1 ? arguments[1] : undefined;\n      var message = arguments.length > 2 ? arguments[2] : undefined;\n      var\n      /** @type {?} */\n      instances = this.toArray(target);\n      instances.forEach(function (i) {\n        return _this5.blockUIInstance.decorate(i)[type](message);\n      });\n    }\n    /**\n     * @param {?=} target\n     * @return {?}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      return typeof target === 'string' ? [target] : target;\n    }\n  }]);\n\n  return BlockUIService;\n}();\n\nBlockUIService.ɵfac = function BlockUIService_Factory(t) {\n  return new (t || BlockUIService)(ɵngcc0.ɵɵinject(BlockUIInstanceService));\n};\n\nBlockUIService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BlockUIService,\n  factory: BlockUIService.ɵfac\n});\n/** @nocollapse */\n\nBlockUIService.ctorParameters = function () {\n  return [{\n    type: BlockUIInstanceService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BlockUIInstanceService\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar BlockUIDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} blockUIService\n   * @param {?} viewRef\n   * @param {?} templateRef\n   * @param {?} renderer\n   * @param {?} componentFactoryResolver\n   */\n  function BlockUIDirective(blockUIService, viewRef, templateRef, renderer, componentFactoryResolver) {\n    _classCallCheck(this, BlockUIDirective);\n\n    this.blockUIService = blockUIService;\n    this.viewRef = viewRef;\n    this.templateRef = templateRef;\n    this.renderer = renderer;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  _createClass(BlockUIDirective, [{\n    key: \"blockUI\",\n    set: function set(name) {\n      this.blockTarget = name;\n    }\n  }, {\n    key: \"blockUIMessage\",\n    set:\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    function set(message) {\n      this.message = message;\n    }\n  }, {\n    key: \"blockUITemplate\",\n    set:\n    /**\n     * @param {?} template\n     * @return {?}\n     */\n    function set(template) {\n      this.template = template;\n    }\n  }, {\n    key: \"blockUIDelayStart\",\n    set:\n    /**\n     * @param {?} delayStart\n     * @return {?}\n     */\n    function set(delayStart) {\n      this.delayStart = delayStart ? Number(delayStart) : null;\n    }\n  }, {\n    key: \"blockUIDelayStop\",\n    set:\n    /**\n     * @param {?} delayStop\n     * @return {?}\n     */\n    function set(delayStop) {\n      this.delayStop = delayStop ? Number(delayStop) : null;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value:\n    /**\n     * @return {?}\n     */\n    function ngOnInit() {\n      try {\n        this.viewRef.createEmbeddedView(this.templateRef);\n        var\n        /** @type {?} */\n        parentElement = this.viewRef.element.nativeElement.nextSibling;\n\n        if (parentElement && !this.isComponentInTemplate(parentElement)) {\n          this.renderer.addClass(parentElement, 'block-ui__element');\n          this.blockUIComponentRef = this.createComponent();\n          var\n          /** @type {?} */\n          blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);\n\n          if (blockUIContent) {\n            var\n            /** @type {?} */\n            settings = this.blockUIService.getSettings();\n            parentElement.appendChild(blockUIContent);\n            this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';\n            this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;\n            if (this.message) this.blockUIComponentRef.instance.defaultMessage = this.message;\n            if (this.delayStart) this.blockUIComponentRef.instance.delayStart = this.delayStart;\n            if (this.delayStop) this.blockUIComponentRef.instance.delayStop = this.delayStop;\n            if (this.template || settings.template) this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;\n          }\n        }\n      } catch (\n      /** @type {?} */\n      error) {\n        console.error('ng-block-ui:', error);\n      }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"isComponentInTemplate\",\n    value: function isComponentInTemplate(element) {\n      var _ref5 = element || [],\n          children = _ref5.children;\n\n      children = Array.from(children).reverse();\n      return children.some(function (el) {\n        return el.localName === 'block-ui';\n      });\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"findContentNode\",\n    value: function findContentNode(element) {\n      var nextSibling = element.nextSibling;\n      return [nextSibling, nextSibling.nextSibling].find(function (e) {\n        return e.localName === 'block-ui-content';\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"createComponent\",\n    value: function createComponent() {\n      var\n      /** @type {?} */\n      resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);\n      return this.viewRef.createComponent(resolvedBlockUIComponent);\n    }\n  }]);\n\n  return BlockUIDirective;\n}();\n\nBlockUIDirective.ɵfac = function BlockUIDirective_Factory(t) {\n  return new (t || BlockUIDirective)(ɵngcc0.ɵɵdirectiveInject(BlockUIInstanceService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver));\n};\n\nBlockUIDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BlockUIDirective,\n  selectors: [[\"\", \"blockUI\", \"\"]],\n  inputs: {\n    blockUI: \"blockUI\",\n    blockUIMessage: \"blockUIMessage\",\n    blockUITemplate: \"blockUITemplate\",\n    blockUIDelayStart: \"blockUIDelayStart\",\n    blockUIDelayStop: \"blockUIDelayStop\"\n  }\n});\n/** @nocollapse */\n\nBlockUIDirective.ctorParameters = function () {\n  return [{\n    type: BlockUIInstanceService\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }, {\n    type: Renderer2\n  }, {\n    type: ComponentFactoryResolver\n  }];\n};\n\nBlockUIDirective.propDecorators = {\n  blockUI: [{\n    type: Input\n  }],\n  blockUIMessage: [{\n    type: Input\n  }],\n  blockUITemplate: [{\n    type: Input\n  }],\n  blockUIDelayStart: [{\n    type: Input\n  }],\n  blockUIDelayStop: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[blockUI]'\n    }]\n  }], function () {\n    return [{\n      type: BlockUIInstanceService\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }];\n  }, {\n    blockUI: [{\n      type: Input\n    }],\n    blockUIMessage: [{\n      type: Input\n    }],\n    blockUITemplate: [{\n      type: Input\n    }],\n    blockUIDelayStart: [{\n      type: Input\n    }],\n    blockUIDelayStop: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nBlockUIServiceInstance = new BlockUIInstanceService(); // Needed for AOT compiling\n\nvar\n/** @type {?} */\nBlockUIModuleSettings = new InjectionToken('BlockUIModuleSettings');\n/**\n * @param {?} settings\n * @return {?}\n */\n\nfunction provideInstance(settings) {\n  BlockUIServiceInstance.updateSettings(settings);\n  return BlockUIServiceInstance;\n}\n\nvar BlockUIModule = /*#__PURE__*/function () {\n  function BlockUIModule() {\n    _classCallCheck(this, BlockUIModule);\n  }\n\n  _createClass(BlockUIModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @param {?=} settings\n     * @return {?}\n     */\n    function forRoot() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: BlockUIModule,\n        providers: [{\n          provide: BlockUIModuleSettings,\n          useValue: settings\n        }, {\n          provide: BlockUIInstanceService,\n          useFactory: provideInstance,\n          deps: [BlockUIModuleSettings]\n        }, BlockUIService]\n      };\n    }\n  }]);\n\n  return BlockUIModule;\n}();\n\nBlockUIModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: BlockUIModule\n});\nBlockUIModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function BlockUIModule_Factory(t) {\n    return new (t || BlockUIModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BlockUIModule, {\n    declarations: function declarations() {\n      return [BlockUIComponent, BlockUIDirective, BlockUIContentComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [BlockUIComponent, BlockUIDirective, BlockUIContentComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BlockUIModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      entryComponents: [BlockUIComponent, BlockUIContentComponent],\n      declarations: [BlockUIComponent, BlockUIDirective, BlockUIContentComponent],\n      exports: [BlockUIComponent, BlockUIDirective, BlockUIContentComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @param {?=} value\n * @return {?}\n */\n\n\nfunction BlockUI(value) {\n  return function (target, propertyKey, descriptor) {\n    target[propertyKey] = BlockUIServiceInstance.decorate(value);\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { BlockUIModule, BlockUIComponent, BlockUIContentComponent, BlockUI, BlockUIService, BlockUIDefaultName as BLOCKUI_DEFAULT, BlockUIModuleSettings as ɵa, provideInstance as ɵb, styles as ɵe, template as ɵd, BlockUIDirective as ɵf, BlockUIInstanceService as ɵc };","map":{"version":3,"sources":["ng-block-ui/constants/block-ui-actions.constant.ts","ng-block-ui/constants/block-ui-default-name.constant.ts","ng-block-ui/services/block-ui-instance.service.ts","ng-block-ui/components/block-ui/block-ui.component.ts","ng-block-ui/components/block-ui-content/block-ui-content.component.style.ts","ng-block-ui/components/block-ui-content/block-ui-content.component.template.ts","ng-block-ui/components/block-ui-content/block-ui-content.component.ts","ng-block-ui/services/block-ui.service.ts","ng-block-ui/directives/block-ui.directive.ts","ng-block-ui/block-ui.module.ts","ng-block-ui/decorators/block-ui.decorator.ts"],"names":[],"mappings":"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","sourcesContent":["export class BlockUIActions {\n    static START = 'start';\n    static STOP = 'stop';\n    static UPDATE = 'update';\n    static RESET = 'reset';\n    static UNSUBSCRIBE = 'unsubscribe';\n}","export const BlockUIDefaultName: string = `block-ui-main`;\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { BlockUIActions } from '../constants/block-ui-actions.constant';\nimport { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';\nimport { NgBlockUI } from '../models/block-ui.model';\nimport { BlockUISettings } from '../models/block-ui-settings.model';\nimport { BlockUIEvent } from '../models/block-ui-event.model';\n\n\n@Injectable()\nexport class BlockUIInstanceService {\n  blockUISettings: BlockUISettings | any = {};\n  blockUIInstances: any = {};\n  private blockUISubject: ReplaySubject<any> = new ReplaySubject();\n  private blockUIObservable: Observable<any> = this.blockUISubject.asObservable();\n\n  constructor() {\n    this.blockUIObservable.subscribe(this.blockUIMiddleware.bind(this));\n  }\n\n  getSettings(): BlockUISettings | any {\n    return this.blockUISettings;\n  }\n\n  updateSettings(settings: BlockUISettings | any = {}): void {\n    this.blockUISettings = { ...this.blockUISettings, ...settings };\n  }\n\n  decorate(name: string = BlockUIDefaultName): NgBlockUI {\n    const blockUI = {\n      name,\n      isActive: false,\n      blockCount: 0,\n      start: this.dispatch(this.blockUISubject, BlockUIActions.START, name),\n      update: this.dispatch(this.blockUISubject, BlockUIActions.UPDATE, name),\n      stop: this.dispatch(this.blockUISubject, BlockUIActions.STOP, name),\n      reset: this.dispatch(this.blockUISubject, BlockUIActions.RESET, name),\n      unsubscribe: this.dispatch(this.blockUISubject, BlockUIActions.UNSUBSCRIBE, name)\n    } as NgBlockUI;\n\n    this.blockUIInstances[name] = this.blockUIInstances[name] || blockUI;\n\n    return blockUI;\n  }\n\n  observe(): Observable<any> {\n    return this.blockUIObservable;\n  }\n\n  private blockUIMiddleware({ action, name }: BlockUIEvent): void {\n    let isActive: boolean = null;\n\n    switch (action) {\n      case (BlockUIActions.START):\n        isActive = true;\n        break;\n\n      case (BlockUIActions.STOP):\n      case (BlockUIActions.RESET):\n        isActive = false;\n        break;\n    }\n\n    if (isActive !== null) {\n      this.blockUIInstances[name].isActive = isActive;\n    }\n  }\n\n  private dispatch(subject: ReplaySubject<any>, action: BlockUIActions, name: string = BlockUIDefaultName): Function {\n    return (message?: any): void => {\n      subject.next({\n        name,\n        action,\n        message\n      });\n    };\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  OnInit,\n  ComponentRef\n} from '@angular/core';\nimport { BlockUIInstanceService } from '../../services/block-ui-instance.service';\nimport { BlockUIDefaultName } from '../../constants/block-ui-default-name.constant';\n\n@Component({\n  selector: 'block-ui',\n  template: `\n    <ng-content></ng-content>\n    <block-ui-content\n      [name]=\"name\"\n      [message]=\"message\"\n      [template]=\"template\"\n      [delayStart]=\"delayStart\"\n      [delayStop]=\"delayStop\"\n    >\n    </block-ui-content>\n  `,\n  encapsulation: ViewEncapsulation.None\n})\nexport class BlockUIComponent implements OnInit {\n  @Input() name: string;\n  @Input() message: any;\n  @Input() delayStart: number;\n  @Input() delayStop: number;\n  @Input() template: any;\n\n  constructor(\n    private blockUI: BlockUIInstanceService,\n  ) { }\n\n  ngOnInit() {\n    this.name = this.name || BlockUIDefaultName;\n    this.template = this.template || this.blockUI.blockUISettings.template;\n  }\n}\n","// Spinner style - https://github.com/lukehaas/css-loaders\n\nexport const styles = `\n.block-ui-wrapper {\n  display: none;\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.70);\n  z-index: 30000;\n  cursor: wait;\n}\n\n.block-ui-wrapper.block-ui-wrapper--element {\n  position: absolute;\n}\n\n.block-ui-wrapper.active {\n  display: block;\n}\n\n.block-ui-wrapper.block-ui-main {\n  position: fixed;\n}\n\n.block-ui-spinner,\n.block-ui-template {\n  position: absolute;\n  top: 40%;\n  margin: 0 auto;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n}\n\n.block-ui-spinner > .message {\n  font-size: 1.3em;\n  text-align: center;\n  color: #fff;\n}\n\n.block-ui__element {\n  position: relative;\n}\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n.loader {\n  margin: 7px auto;\n  font-size: 5px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-left: 1.1em solid #ffffff;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n`;\n","export const template = `\n<div class=\"block-ui-wrapper {{name}} {{className}}\" [ngClass]=\"{ 'active': active }\">\n  <div class=\"block-ui-spinner\" *ngIf=\"!templateCmp\">\n    <div class=\"loader\"></div>\n    <div *ngIf=\"message || defaultMessage\" class=\"message\">\n      {{ message || defaultMessage }}\n    </div>\n  </div>\n  <ng-template *ngIf=\"templateCmp\" #templateOutlet></ng-template>\n</div>\n`;\n","import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  AfterViewChecked,\n  OnDestroy,\n  ViewEncapsulation,\n  Input,\n  ViewChild,\n  ComponentRef,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\n\nimport { BlockUIInstanceService } from '../../services/block-ui-instance.service';\nimport { BlockUIEvent } from '../../models/block-ui-event.model';\nimport { BlockUIActions } from '../../constants/block-ui-actions.constant';\nimport { BlockUIDefaultName } from '../../constants/block-ui-default-name.constant';\nimport { styles } from './block-ui-content.component.style';\nimport { template } from './block-ui-content.component.template';\nimport { BlockUISettings } from '../../models/block-ui-settings.model';\n\n@Component({\n  selector: 'block-ui-content',\n  template: template,\n  styles: [styles], // TODO: Find how to bundle styles for npm\n  encapsulation: ViewEncapsulation.None\n})\nexport class BlockUIContentComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() name: string = BlockUIDefaultName;\n  @Input() delayStart: number = 0;\n  @Input() delayStop: number = 0;\n  @Input('message') defaultMessage: string;\n  @Input('template') templateCmp: any;\n  @ViewChild('templateOutlet', { read: ViewContainerRef })\n  templateOutlet: ViewContainerRef;\n\n  state: any = { startTimeout: null, stopTimeout: null, blockCount: 0 };\n  className: string;\n  active: boolean = false;\n  templateCompRef: ComponentRef<{ message?: any }> | TemplateRef<{}>;\n  message: any;\n\n  private blockUISubscription: Subscription;\n  private settings: BlockUISettings;\n\n  constructor(\n    private blockUI: BlockUIInstanceService,\n    private resolver: ComponentFactoryResolver,\n    private changeDetectionRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.settings = this.blockUI.getSettings();\n    this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());\n  }\n\n  ngAfterViewInit() {\n    try {\n      if (!this.templateCmp) {\n        return false;\n      }\n\n      if (this.templateCmp instanceof TemplateRef) {\n        this.templateOutlet.createEmbeddedView(this.templateCmp);\n      } else {\n        const templateComp = this.resolver.resolveComponentFactory(this.templateCmp);\n        this.templateCompRef = this.templateOutlet.createComponent(templateComp);\n\n        this.updateBlockTemplate(this.message);\n      }\n    } catch (error) {\n      console.error('ng-block-ui:', error);\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.detectChanges();\n  }\n\n  private subscribeToBlockUI(blockUI$: Observable<any>): Subscription {\n    return blockUI$\n      .subscribe(event => this.onDispatchedEvent(event));\n  }\n\n  private onDispatchedEvent(event: BlockUIEvent) {\n    switch (event.action) {\n      case (BlockUIActions.START):\n        this.onStart(event);\n        break;\n\n      case (BlockUIActions.STOP):\n        this.onStop(event);\n        break;\n\n      case (BlockUIActions.UPDATE):\n        this.onUpdate(event);\n        break;\n\n      case (BlockUIActions.RESET):\n        this.onReset();\n        break;\n\n      case (BlockUIActions.UNSUBSCRIBE):\n        this.onStop(event);\n        this.onUnsubscribe(event.name);\n        break;\n    }\n  }\n\n  private onStart({ name, message }: BlockUIEvent) {\n    if (name === this.name) {\n      const delay = this.delayStart || this.settings.delayStart || 0;\n\n      if (this.state.startTimeout === null) {\n        if (delay === 0) {\n          this.showBlock(message);\n        } else {\n          this.state.startTimeout = setTimeout(() => {\n            this.showBlock(message);\n          }, delay);\n        }\n      }\n\n      this.state.blockCount++;\n      this.updateInstanceBlockCount();\n    }\n  }\n\n  private onStop({ name }: BlockUIEvent) {\n    if (name === this.name) {\n      const delay = this.delayStop || this.settings.delayStop || 0;\n\n      if (this.state.blockCount > 1) {\n        this.state.blockCount--;\n      } else {\n        if (!this.active) {\n          this.clearState();\n        } else {\n          if (this.state.stopTimeout === null) {\n            if (delay === 0) {\n              this.hideBlock();\n            } else {\n              this.state.stopTimeout = setTimeout(() => {\n                this.hideBlock();\n              }, delay);\n            }\n          }\n        }\n      }\n\n      this.updateInstanceBlockCount();\n    }\n  }\n\n  private onReset() {\n    this.hideBlock();\n  }\n\n  private onUpdate({ name, message }: BlockUIEvent) {\n    if (name === this.name) {\n      const delay = this.delayStart || this.settings.delayStart || 0;\n\n      if (delay === 0) {\n        this.updateMessage(message);\n      } else {\n        setTimeout(() => {\n          this.updateMessage(message);\n        }, delay);\n      }\n    }\n  }\n\n  updateMessage(message: string) {\n    this.message = message || this.defaultMessage || this.settings.message;\n    this.updateBlockTemplate(this.message);\n    this.detectChanges();\n  }\n\n  private showBlock(message: any) {\n    this.active = true;\n    this.message = message || this.defaultMessage || this.settings.message;\n    this.updateBlockTemplate(this.message);\n    this.detectChanges();\n  }\n\n  private hideBlock() {\n    this.clearState();\n    this.active = false;\n    this.detectChanges();\n  }\n\n  private clearState() {\n    this.state.startTimeout != null && clearTimeout(this.state.startTimeout);\n    this.state.stopTimeout != null && clearTimeout(this.state.stopTimeout);\n    this.state.blockCount = 0;\n    this.state.startTimeout = null;\n    this.state.stopTimeout = null;\n    this.updateInstanceBlockCount();\n  }\n\n  private updateBlockTemplate(msg: any): void {\n    if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {\n      this.templateCompRef.instance.message = msg;\n    }\n  }\n\n  private onUnsubscribe(name: string) {\n    if (this.blockUISubscription && name === this.name) {\n      this.blockUISubscription.unsubscribe();\n    }\n  }\n\n  private updateInstanceBlockCount() {\n    if (this.blockUI.blockUIInstances[this.name]) {\n      this.blockUI.blockUIInstances[this.name].blockCount = this.state.blockCount;\n    }\n  }\n\n  private detectChanges() {\n    if (!this.changeDetectionRef['destroyed']) {\n      this.changeDetectionRef.detectChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this.onUnsubscribe(this.name);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BlockUIActions } from '../constants/block-ui-actions.constant';\nimport { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';\nimport { BlockUIInstanceService } from './block-ui-instance.service';\n\n\n@Injectable()\nexport class BlockUIService {\n\n  constructor(\n    private blockUIInstance: BlockUIInstanceService\n  ) {}\n\n  /**\n  * Starts blocking for given BlockUI instance or instances\n  */\n  start(target: string | string[], message?: any): void {\n    this.dispatch(target, BlockUIActions.START, message);\n  }\n\n  /**\n  * Stops blocking for given BlockUI instance or instances\n  */\n  stop(target: string | string[]): void {\n    this.dispatch(target, BlockUIActions.STOP);\n  }\n\n  /**\n  * Reset blocking for given BlockUI instance or instances\n  */\n  reset(target: string | string[]): void {\n    this.dispatch(target, BlockUIActions.RESET);\n  }\n\n  /**\n  * Unsubscribes for given BlockUI instance or instances\n  */\n  unsubscribe(target: string | string[]): void {\n    this.dispatch(target, BlockUIActions.UNSUBSCRIBE);\n  }\n\n  /**\n  * Checks if BlockUI is actively blocking\n  */\n  isActive(target: string | string[] = null): boolean {\n    const targets = target ? this.toArray(target) : null;\n    const instances = this.blockUIInstance.blockUIInstances;\n\n    return Object.keys(instances).some((key: string) => {\n      if (!targets) {\n        return instances[key].isActive;\n      }\n\n      return targets.indexOf(instances[key].name) >= 0 && instances[key].isActive;\n    });\n  }\n\n  private dispatch(target: string | string[] = [], type: string, message?: any) {\n    const instances = this.toArray(target);\n    instances.forEach(i => this.blockUIInstance.decorate(i)[type](message));\n  }\n\n  private toArray(target: string | string[] = []) {\n    return typeof target === 'string' ? [target] : target;\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  TemplateRef,\n  Renderer2\n} from '@angular/core';\nimport { BlockUIContentComponent } from '../components/block-ui-content/block-ui-content.component';\nimport { BlockUIInstanceService } from '../services/block-ui-instance.service';\nimport { BlockUIDefaultName } from '../constants/block-ui-default-name.constant';\n\n@Directive({ selector: '[blockUI]' })\nexport class BlockUIDirective implements OnInit {\n  private blockUIComponentRef: ComponentRef<BlockUIContentComponent>;\n  blockTarget: string;\n  message: any;\n  template: any;\n  delayStart: any;\n  delayStop: any;\n\n  @Input()\n  set blockUI(name: any) { this.blockTarget = name; };\n  @Input()\n  set blockUIMessage(message: any) { this.message = message; };\n  @Input()\n  set blockUITemplate(template: any) { this.template = template; };\n  @Input()\n  set blockUIDelayStart(delayStart: any) {\n     this.delayStart = delayStart ? Number(delayStart) : null;\n  };\n  @Input()\n  set blockUIDelayStop(delayStop: any) {\n    this.delayStop = delayStop ? Number(delayStop) : null;\n  };\n\n  constructor(\n    private blockUIService: BlockUIInstanceService,\n    private viewRef: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private renderer: Renderer2,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) { }\n\n  ngOnInit() {\n    try {\n      this.viewRef.createEmbeddedView(this.templateRef);\n      const parentElement = this.viewRef.element.nativeElement.nextSibling;\n\n      if (parentElement && !this.isComponentInTemplate(parentElement)) {\n        this.renderer.addClass(parentElement, 'block-ui__element');\n\n        this.blockUIComponentRef = this.createComponent();\n\n        let blockUIContent = this.findContentNode(this.viewRef.element.nativeElement);\n\n        if (blockUIContent) {\n          const settings = this.blockUIService.getSettings();\n\n          parentElement.appendChild(blockUIContent);\n          this.blockUIComponentRef.instance.className = 'block-ui-wrapper--element';\n          this.blockUIComponentRef.instance.name = this.blockTarget || BlockUIDefaultName;\n          if (this.message) this.blockUIComponentRef.instance.defaultMessage = this.message;\n          if (this.delayStart) this.blockUIComponentRef.instance.delayStart = this.delayStart;\n          if (this.delayStop) this.blockUIComponentRef.instance.delayStop = this.delayStop;\n          if (this.template || settings.template)\n            this.blockUIComponentRef.instance.templateCmp = this.template || settings.template;\n        }\n      }\n    } catch (error) {\n      console.error('ng-block-ui:', error);\n    }\n  }\n\n  private isComponentInTemplate(element: any): boolean {\n    let { children } = element || [];\n    children = Array.from(children).reverse();\n    return children.some((el: any) => el.localName === 'block-ui');\n  }\n\n  // Needed for IE (#17)\n  private findContentNode(element: any) {\n    const { nextSibling } = element;\n    return [nextSibling, nextSibling.nextSibling].find((e) => e.localName === 'block-ui-content');\n  }\n\n  private createComponent() {\n    const resolvedBlockUIComponent = this.componentFactoryResolver.resolveComponentFactory(BlockUIContentComponent);\n    return this.viewRef.createComponent(resolvedBlockUIComponent);\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BlockUIComponent } from './components/block-ui/block-ui.component';\nimport { BlockUIContentComponent } from './components/block-ui-content/block-ui-content.component';\nimport { BlockUIInstanceService } from './services/block-ui-instance.service';\nimport { BlockUIService } from './services/block-ui.service';\nimport { BlockUIDirective } from './directives/block-ui.directive';\nimport { BlockUISettings } from './models/block-ui-settings.model';\n\nexport const BlockUIServiceInstance = new BlockUIInstanceService();\n\n// Needed for AOT compiling\nexport const BlockUIModuleSettings = new InjectionToken<string>('BlockUIModuleSettings');\n\nexport function provideInstance(settings: BlockUISettings): any {\n  BlockUIServiceInstance.updateSettings(settings);\n  return BlockUIServiceInstance;\n}\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  entryComponents: [\n    BlockUIComponent,\n    BlockUIContentComponent\n  ],\n  declarations: [\n    BlockUIComponent,\n    BlockUIDirective,\n    BlockUIContentComponent\n  ],\n  exports: [\n    BlockUIComponent,\n    BlockUIDirective,\n    BlockUIContentComponent\n  ]\n})\nexport class BlockUIModule {\n  public static forRoot(settings: BlockUISettings = {}): ModuleWithProviders {\n    return {\n      ngModule: BlockUIModule,\n      providers: [\n        {\n          provide: BlockUIModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIInstanceService,\n          useFactory: provideInstance,\n          deps: [BlockUIModuleSettings]\n        },\n        BlockUIService\n      ]\n    };\n  }\n}\n","import { BlockUIServiceInstance } from '../block-ui.module';\n\n\nexport function BlockUI(value?: string) {\n  return function (target?: any, propertyKey?: string, descriptor?: any) {\n    target[propertyKey] = BlockUIServiceInstance.decorate(value);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}