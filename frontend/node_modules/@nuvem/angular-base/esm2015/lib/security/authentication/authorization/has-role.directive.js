import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { Authorization } from './authorization';
import { Authentication } from '../authentication';
/**
 * HasRoleDirective diretiva para checagem da existência de permissões de acesso para o usuário logado.
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './authorization';
import * as ɵngcc2 from '../authentication';
export class HasRoleDirective {
    /**
     * Método construtor responsável por carregar o serviço de autorização e serviço de identificação de mudança
     * @param {TemplateRef<any>} templateRef
     * @param {ViewContainerRef} viewContainer
     * @param {Authorization} authorization
     * @param {Authentication<User>} authentication
     */
    constructor(templateRef, viewContainer, authorization, authentication) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authorization = authorization;
        this.authentication = authentication;
    }
    /**
     * Propriedade para identificar regras de acesso aos itens
     * @type {string}
     */
    set hasRole(hasRole) {
        this.viewContainer.clear();
        if (hasRole) {
            if (this.loginNotifications)
                this.loginNotifications.unsubscribe();
            this.loginNotifications = this.authentication.getLoginNotifications().subscribe(() => {
                if (this.authorization.hasRole(hasRole)) {
                    this.viewContainer.clear();
                    this.viewContainer.createEmbeddedView(this.templateRef);
                }
            });
        }
        else {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
    }
    ngOnDestroy() {
        if (this.loginNotifications) {
            this.loginNotifications.unsubscribe();
        }
    }
}
HasRoleDirective.ɵfac = function HasRoleDirective_Factory(t) { return new (t || HasRoleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Authorization), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Authentication)); };
HasRoleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HasRoleDirective, selectors: [["", "hasRole", ""]], inputs: { hasRole: "hasRole" } });
HasRoleDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Authorization },
    { type: Authentication }
];
HasRoleDirective.propDecorators = {
    hasRole: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HasRoleDirective, [{
        type: Directive,
        args: [{
                selector: '[hasRole]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.Authorization }, { type: ɵngcc2.Authentication }]; }, { hasRole: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9zZWN1cml0eS9hdXRoZW50aWNhdGlvbi9hdXRob3JpemF0aW9uL2hhcy1yb2xlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUluRDtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7O0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtBQUFHLElBSTVCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFlBQ1ksV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsYUFBNEIsRUFDNUIsY0FBb0M7QUFBSSxRQUh4QyxnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7QUFBQyxRQUM5QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7QUFBQyxRQUNoQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUFDLFFBQzdCLG1CQUFjLEdBQWQsY0FBYyxDQUFzQjtBQUFDLElBQUcsQ0FBQztBQUN6RCxJQUNJO0FBQ0o7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLElBQWEsT0FBTyxDQUFDLE9BQTBCO0FBQ25ELFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNuQyxRQUFRLElBQUksT0FBTyxFQUFFO0FBQ3JCLFlBQVksSUFBSSxJQUFJLENBQUMsa0JBQWtCO0FBQUUsZ0JBQUEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQy9FLFlBQVksSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQ2pHLGdCQUFnQixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3pELG9CQUFvQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQy9DLG9CQUFvQixJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUM1RSxpQkFBaUI7QUFDakIsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQUssUUFDWixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtBQUNyQyxZQUFZLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNsRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7NENBNUNDLFNBQVMsU0FBRSxrQkFDUixRQUFRLEVBQUUsV0FBVyxjQUN4QjsrSUFDSTtBQUFDO0FBQTBDLFlBYnJCLFdBQVc7QUFBSSxZQUFGLGdCQUFnQjtBQUFJLFlBQ25ELGFBQWE7QUFBSSxZQUNqQixjQUFjO0FBQUc7QUFBRztBQUNoQixzQkErQlIsS0FBSztBQUFJOzs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0aG9yaXphdGlvbiB9IGZyb20gJy4vYXV0aG9yaXphdGlvbic7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbiB9IGZyb20gJy4uL2F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi91c2VyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEhhc1JvbGVEaXJlY3RpdmUgZGlyZXRpdmEgcGFyYSBjaGVjYWdlbSBkYSBleGlzdMOqbmNpYSBkZSBwZXJtaXNzw7VlcyBkZSBhY2Vzc28gcGFyYSBvIHVzdcOhcmlvIGxvZ2Fkby5cbiAqIEBjbGFzc1xuICovXG5ARGlyZWN0aXZlKCB7XG4gICAgc2VsZWN0b3I6ICdbaGFzUm9sZV0nXG59KVxuZXhwb3J0IGNsYXNzIEhhc1JvbGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBsb2dpbk5vdGlmaWNhdGlvbnM6IFN1YnNjcmlwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWwgcG9yIGNhcnJlZ2FyIG8gc2VydmnDp28gZGUgYXV0b3JpemHDp8OjbyBlIHNlcnZpw6dvIGRlIGlkZW50aWZpY2HDp8OjbyBkZSBtdWRhbsOnYVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVSZWY8YW55Pn0gdGVtcGxhdGVSZWZcbiAgICAgKiBAcGFyYW0ge1ZpZXdDb250YWluZXJSZWZ9IHZpZXdDb250YWluZXJcbiAgICAgKiBAcGFyYW0ge0F1dGhvcml6YXRpb259IGF1dGhvcml6YXRpb25cbiAgICAgKiBAcGFyYW0ge0F1dGhlbnRpY2F0aW9uPFVzZXI+fSBhdXRoZW50aWNhdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIHByaXZhdGUgYXV0aG9yaXphdGlvbjogQXV0aG9yaXphdGlvbixcbiAgICAgICAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvbjogQXV0aGVudGljYXRpb248VXNlcj4pIHsgfVxuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgcGFyYSBpZGVudGlmaWNhciByZWdyYXMgZGUgYWNlc3NvIGFvcyBpdGVuc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KCkgc2V0IGhhc1JvbGUoaGFzUm9sZTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgIGlmIChoYXNSb2xlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMpIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucyA9IHRoaXMuYXV0aGVudGljYXRpb24uZ2V0TG9naW5Ob3RpZmljYXRpb25zKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRob3JpemF0aW9uLmhhc1JvbGUoaGFzUm9sZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmxvZ2luTm90aWZpY2F0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19