{"ast":null,"code":"'use strict';\n\nvar defaults = require('../core/core.defaults');\n\nvar elements = require('../elements/index');\n\nvar helpers = require('../helpers/index');\n\ndefaults._set('bar', {\n  hover: {\n    mode: 'label'\n  },\n  scales: {\n    xAxes: [{\n      type: 'category',\n      // Specific to Bar Controller\n      categoryPercentage: 0.8,\n      barPercentage: 0.9,\n      // offset settings\n      offset: true,\n      // grid line settings\n      gridLines: {\n        offsetGridLines: true\n      }\n    }],\n    yAxes: [{\n      type: 'linear'\n    }]\n  }\n});\n\ndefaults._set('horizontalBar', {\n  hover: {\n    mode: 'index',\n    axis: 'y'\n  },\n  scales: {\n    xAxes: [{\n      type: 'linear',\n      position: 'bottom'\n    }],\n    yAxes: [{\n      position: 'left',\n      type: 'category',\n      // Specific to Horizontal Bar Controller\n      categoryPercentage: 0.8,\n      barPercentage: 0.9,\n      // offset settings\n      offset: true,\n      // grid line settings\n      gridLines: {\n        offsetGridLines: true\n      }\n    }]\n  },\n  elements: {\n    rectangle: {\n      borderSkipped: 'left'\n    }\n  },\n  tooltips: {\n    callbacks: {\n      title: function title(item, data) {\n        // Pick first xLabel for now\n        var title = '';\n\n        if (item.length > 0) {\n          if (item[0].yLabel) {\n            title = item[0].yLabel;\n          } else if (data.labels.length > 0 && item[0].index < data.labels.length) {\n            title = data.labels[item[0].index];\n          }\n        }\n\n        return title;\n      },\n      label: function label(item, data) {\n        var datasetLabel = data.datasets[item.datasetIndex].label || '';\n        return datasetLabel + ': ' + item.xLabel;\n      }\n    },\n    mode: 'index',\n    axis: 'y'\n  }\n});\n\nmodule.exports = function (Chart) {\n  Chart.controllers.bar = Chart.DatasetController.extend({\n    dataElementType: elements.Rectangle,\n    initialize: function initialize() {\n      var me = this;\n      var meta;\n      Chart.DatasetController.prototype.initialize.apply(me, arguments);\n      meta = me.getMeta();\n      meta.stack = me.getDataset().stack;\n      meta.bar = true;\n    },\n    update: function update(reset) {\n      var me = this;\n      var rects = me.getMeta().data;\n      var i, ilen;\n      me._ruler = me.getRuler();\n\n      for (i = 0, ilen = rects.length; i < ilen; ++i) {\n        me.updateElement(rects[i], i, reset);\n      }\n    },\n    updateElement: function updateElement(rectangle, index, reset) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var dataset = me.getDataset();\n      var custom = rectangle.custom || {};\n      var rectangleOptions = chart.options.elements.rectangle;\n      rectangle._xScale = me.getScaleForId(meta.xAxisID);\n      rectangle._yScale = me.getScaleForId(meta.yAxisID);\n      rectangle._datasetIndex = me.index;\n      rectangle._index = index;\n      rectangle._model = {\n        datasetLabel: dataset.label,\n        label: chart.data.labels[index],\n        borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleOptions.borderSkipped,\n        backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleOptions.backgroundColor),\n        borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleOptions.borderColor),\n        borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleOptions.borderWidth)\n      };\n      me.updateElementGeometry(rectangle, index, reset);\n      rectangle.pivot();\n    },\n\n    /**\n     * @private\n     */\n    updateElementGeometry: function updateElementGeometry(rectangle, index, reset) {\n      var me = this;\n      var model = rectangle._model;\n      var vscale = me.getValueScale();\n      var base = vscale.getBasePixel();\n      var horizontal = vscale.isHorizontal();\n      var ruler = me._ruler || me.getRuler();\n      var vpixels = me.calculateBarValuePixels(me.index, index);\n      var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n      model.horizontal = horizontal;\n      model.base = reset ? base : vpixels.base;\n      model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n      model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n      model.height = horizontal ? ipixels.size : undefined;\n      model.width = horizontal ? undefined : ipixels.size;\n    },\n\n    /**\n     * @private\n     */\n    getValueScaleId: function getValueScaleId() {\n      return this.getMeta().yAxisID;\n    },\n\n    /**\n     * @private\n     */\n    getIndexScaleId: function getIndexScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    getValueScale: function getValueScale() {\n      return this.getScaleForId(this.getValueScaleId());\n    },\n\n    /**\n     * @private\n     */\n    getIndexScale: function getIndexScale() {\n      return this.getScaleForId(this.getIndexScaleId());\n    },\n\n    /**\n     * Returns the effective number of stacks based on groups and bar visibility.\n     * @private\n     */\n    getStackCount: function getStackCount(last) {\n      var me = this;\n      var chart = me.chart;\n      var scale = me.getIndexScale();\n      var stacked = scale.options.stacked;\n      var ilen = last === undefined ? chart.data.datasets.length : last + 1;\n      var stacks = [];\n      var i, meta;\n\n      for (i = 0; i < ilen; ++i) {\n        meta = chart.getDatasetMeta(i);\n\n        if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1))) {\n          stacks.push(meta.stack);\n        }\n      }\n\n      return stacks.length;\n    },\n\n    /**\n     * Returns the stack index for the given dataset based on groups and bar visibility.\n     * @private\n     */\n    getStackIndex: function getStackIndex(datasetIndex) {\n      return this.getStackCount(datasetIndex) - 1;\n    },\n\n    /**\n     * @private\n     */\n    getRuler: function getRuler() {\n      var me = this;\n      var scale = me.getIndexScale();\n      var stackCount = me.getStackCount();\n      var datasetIndex = me.index;\n      var pixels = [];\n      var isHorizontal = scale.isHorizontal();\n      var start = isHorizontal ? scale.left : scale.top;\n      var end = start + (isHorizontal ? scale.width : scale.height);\n      var i, ilen;\n\n      for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n        pixels.push(scale.getPixelForValue(null, i, datasetIndex));\n      }\n\n      return {\n        pixels: pixels,\n        start: start,\n        end: end,\n        stackCount: stackCount,\n        scale: scale\n      };\n    },\n\n    /**\n     * Note: pixel values are not clamped to the scale area.\n     * @private\n     */\n    calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index) {\n      var me = this;\n      var chart = me.chart;\n      var meta = me.getMeta();\n      var scale = me.getValueScale();\n      var datasets = chart.data.datasets;\n      var value = scale.getRightValue(datasets[datasetIndex].data[index]);\n      var stacked = scale.options.stacked;\n      var stack = meta.stack;\n      var start = 0;\n      var i, imeta, ivalue, base, head, size;\n\n      if (stacked || stacked === undefined && stack !== undefined) {\n        for (i = 0; i < datasetIndex; ++i) {\n          imeta = chart.getDatasetMeta(i);\n\n          if (imeta.bar && imeta.stack === stack && imeta.controller.getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {\n            ivalue = scale.getRightValue(datasets[i].data[index]);\n\n            if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {\n              start += ivalue;\n            }\n          }\n        }\n      }\n\n      base = scale.getPixelForValue(start);\n      head = scale.getPixelForValue(start + value);\n      size = (head - base) / 2;\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    },\n\n    /**\n     * @private\n     */\n    calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler) {\n      var me = this;\n      var options = ruler.scale.options;\n      var stackIndex = me.getStackIndex(datasetIndex);\n      var pixels = ruler.pixels;\n      var base = pixels[index];\n      var length = pixels.length;\n      var start = ruler.start;\n      var end = ruler.end;\n      var leftSampleSize, rightSampleSize, leftCategorySize, rightCategorySize, fullBarSize, size;\n\n      if (length === 1) {\n        leftSampleSize = base > start ? base - start : end - base;\n        rightSampleSize = base < end ? end - base : base - start;\n      } else {\n        if (index > 0) {\n          leftSampleSize = (base - pixels[index - 1]) / 2;\n\n          if (index === length - 1) {\n            rightSampleSize = leftSampleSize;\n          }\n        }\n\n        if (index < length - 1) {\n          rightSampleSize = (pixels[index + 1] - base) / 2;\n\n          if (index === 0) {\n            leftSampleSize = rightSampleSize;\n          }\n        }\n      }\n\n      leftCategorySize = leftSampleSize * options.categoryPercentage;\n      rightCategorySize = rightSampleSize * options.categoryPercentage;\n      fullBarSize = (leftCategorySize + rightCategorySize) / ruler.stackCount;\n      size = fullBarSize * options.barPercentage;\n      size = Math.min(helpers.valueOrDefault(options.barThickness, size), helpers.valueOrDefault(options.maxBarThickness, Infinity));\n      base -= leftCategorySize;\n      base += fullBarSize * stackIndex;\n      base += (fullBarSize - size) / 2;\n      return {\n        size: size,\n        base: base,\n        head: base + size,\n        center: base + size / 2\n      };\n    },\n    draw: function draw() {\n      var me = this;\n      var chart = me.chart;\n      var scale = me.getValueScale();\n      var rects = me.getMeta().data;\n      var dataset = me.getDataset();\n      var ilen = rects.length;\n      var i = 0;\n      helpers.canvas.clipArea(chart.ctx, chart.chartArea);\n\n      for (; i < ilen; ++i) {\n        if (!isNaN(scale.getRightValue(dataset.data[i]))) {\n          rects[i].draw();\n        }\n      }\n\n      helpers.canvas.unclipArea(chart.ctx);\n    },\n    setHoverStyle: function setHoverStyle(rectangle) {\n      var dataset = this.chart.data.datasets[rectangle._datasetIndex];\n      var index = rectangle._index;\n      var custom = rectangle.custom || {};\n      var model = rectangle._model;\n      model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n      model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n      model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);\n    },\n    removeHoverStyle: function removeHoverStyle(rectangle) {\n      var dataset = this.chart.data.datasets[rectangle._datasetIndex];\n      var index = rectangle._index;\n      var custom = rectangle.custom || {};\n      var model = rectangle._model;\n      var rectangleElementOptions = this.chart.options.elements.rectangle;\n      model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);\n      model.borderColor = custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);\n      model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);\n    }\n  });\n  Chart.controllers.horizontalBar = Chart.controllers.bar.extend({\n    /**\n     * @private\n     */\n    getValueScaleId: function getValueScaleId() {\n      return this.getMeta().xAxisID;\n    },\n\n    /**\n     * @private\n     */\n    getIndexScaleId: function getIndexScaleId() {\n      return this.getMeta().yAxisID;\n    }\n  });\n};","map":{"version":3,"sources":["/home/basis/TCC/codificacao/frontend/node_modules/chart.js/src/controllers/controller.bar.js"],"names":["defaults","require","elements","helpers","_set","hover","mode","scales","xAxes","type","categoryPercentage","barPercentage","offset","gridLines","offsetGridLines","yAxes","axis","position","rectangle","borderSkipped","tooltips","callbacks","title","item","data","length","yLabel","labels","index","label","datasetLabel","datasets","datasetIndex","xLabel","module","exports","Chart","controllers","bar","DatasetController","extend","dataElementType","Rectangle","initialize","me","meta","prototype","apply","arguments","getMeta","stack","getDataset","update","reset","rects","i","ilen","_ruler","getRuler","updateElement","chart","dataset","custom","rectangleOptions","options","_xScale","getScaleForId","xAxisID","_yScale","yAxisID","_datasetIndex","_index","_model","backgroundColor","valueAtIndexOrDefault","borderColor","borderWidth","updateElementGeometry","pivot","model","vscale","getValueScale","base","getBasePixel","horizontal","isHorizontal","ruler","vpixels","calculateBarValuePixels","ipixels","calculateBarIndexPixels","x","head","center","y","height","size","undefined","width","getValueScaleId","getIndexScaleId","getIndexScale","getStackCount","last","scale","stacked","stacks","getDatasetMeta","isDatasetVisible","indexOf","push","getStackIndex","stackCount","pixels","start","left","top","end","getPixelForValue","value","getRightValue","imeta","ivalue","controller","id","stackIndex","leftSampleSize","rightSampleSize","leftCategorySize","rightCategorySize","fullBarSize","Math","min","valueOrDefault","barThickness","maxBarThickness","Infinity","draw","canvas","clipArea","ctx","chartArea","isNaN","unclipArea","setHoverStyle","hoverBackgroundColor","getHoverColor","hoverBorderColor","hoverBorderWidth","removeHoverStyle","rectangleElementOptions","horizontalBar"],"mappings":"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","sourcesContent":["'use strict';\n\nvar defaults = require('../core/core.defaults');\nvar elements = require('../elements/index');\nvar helpers = require('../helpers/index');\n\ndefaults._set('bar', {\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\n\t\t\t// Specific to Bar Controller\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9,\n\n\t\t\t// offset settings\n\t\t\toffset: true,\n\n\t\t\t// grid line settings\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'linear'\n\t\t}]\n\t}\n});\n\ndefaults._set('horizontalBar', {\n\thover: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'bottom'\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\tposition: 'left',\n\t\t\ttype: 'category',\n\n\t\t\t// Specific to Horizontal Bar Controller\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9,\n\n\t\t\t// offset settings\n\t\t\toffset: true,\n\n\t\t\t// grid line settings\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}]\n\t},\n\n\telements: {\n\t\trectangle: {\n\t\t\tborderSkipped: 'left'\n\t\t}\n\t},\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function(item, data) {\n\t\t\t\t// Pick first xLabel for now\n\t\t\t\tvar title = '';\n\n\t\t\t\tif (item.length > 0) {\n\t\t\t\t\tif (item[0].yLabel) {\n\t\t\t\t\t\ttitle = item[0].yLabel;\n\t\t\t\t\t} else if (data.labels.length > 0 && item[0].index < data.labels.length) {\n\t\t\t\t\t\ttitle = data.labels[item[0].index];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn title;\n\t\t\t},\n\n\t\t\tlabel: function(item, data) {\n\t\t\t\tvar datasetLabel = data.datasets[item.datasetIndex].label || '';\n\t\t\t\treturn datasetLabel + ': ' + item.xLabel;\n\t\t\t}\n\t\t},\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t}\n});\n\nmodule.exports = function(Chart) {\n\n\tChart.controllers.bar = Chart.DatasetController.extend({\n\n\t\tdataElementType: elements.Rectangle,\n\n\t\tinitialize: function() {\n\t\t\tvar me = this;\n\t\t\tvar meta;\n\n\t\t\tChart.DatasetController.prototype.initialize.apply(me, arguments);\n\n\t\t\tmeta = me.getMeta();\n\t\t\tmeta.stack = me.getDataset().stack;\n\t\t\tmeta.bar = true;\n\t\t},\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\tvar rects = me.getMeta().data;\n\t\t\tvar i, ilen;\n\n\t\t\tme._ruler = me.getRuler();\n\n\t\t\tfor (i = 0, ilen = rects.length; i < ilen; ++i) {\n\t\t\t\tme.updateElement(rects[i], i, reset);\n\t\t\t}\n\t\t},\n\n\t\tupdateElement: function(rectangle, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar custom = rectangle.custom || {};\n\t\t\tvar rectangleOptions = chart.options.elements.rectangle;\n\n\t\t\trectangle._xScale = me.getScaleForId(meta.xAxisID);\n\t\t\trectangle._yScale = me.getScaleForId(meta.yAxisID);\n\t\t\trectangle._datasetIndex = me.index;\n\t\t\trectangle._index = index;\n\n\t\t\trectangle._model = {\n\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\tlabel: chart.data.labels[index],\n\t\t\t\tborderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleOptions.borderSkipped,\n\t\t\t\tbackgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleOptions.backgroundColor),\n\t\t\t\tborderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleOptions.borderColor),\n\t\t\t\tborderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleOptions.borderWidth)\n\t\t\t};\n\n\t\t\tme.updateElementGeometry(rectangle, index, reset);\n\n\t\t\trectangle.pivot();\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tupdateElementGeometry: function(rectangle, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar model = rectangle._model;\n\t\t\tvar vscale = me.getValueScale();\n\t\t\tvar base = vscale.getBasePixel();\n\t\t\tvar horizontal = vscale.isHorizontal();\n\t\t\tvar ruler = me._ruler || me.getRuler();\n\t\t\tvar vpixels = me.calculateBarValuePixels(me.index, index);\n\t\t\tvar ipixels = me.calculateBarIndexPixels(me.index, index, ruler);\n\n\t\t\tmodel.horizontal = horizontal;\n\t\t\tmodel.base = reset ? base : vpixels.base;\n\t\t\tmodel.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n\t\t\tmodel.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n\t\t\tmodel.height = horizontal ? ipixels.size : undefined;\n\t\t\tmodel.width = horizontal ? undefined : ipixels.size;\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetValueScaleId: function() {\n\t\t\treturn this.getMeta().yAxisID;\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetIndexScaleId: function() {\n\t\t\treturn this.getMeta().xAxisID;\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetValueScale: function() {\n\t\t\treturn this.getScaleForId(this.getValueScaleId());\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetIndexScale: function() {\n\t\t\treturn this.getScaleForId(this.getIndexScaleId());\n\t\t},\n\n\t\t/**\n\t\t * Returns the effective number of stacks based on groups and bar visibility.\n\t\t * @private\n\t\t */\n\t\tgetStackCount: function(last) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar scale = me.getIndexScale();\n\t\t\tvar stacked = scale.options.stacked;\n\t\t\tvar ilen = last === undefined ? chart.data.datasets.length : last + 1;\n\t\t\tvar stacks = [];\n\t\t\tvar i, meta;\n\n\t\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tif (meta.bar && chart.isDatasetVisible(i) &&\n\t\t\t\t\t(stacked === false ||\n\t\t\t\t\t(stacked === true && stacks.indexOf(meta.stack) === -1) ||\n\t\t\t\t\t(stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1)))) {\n\t\t\t\t\tstacks.push(meta.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn stacks.length;\n\t\t},\n\n\t\t/**\n\t\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t\t * @private\n\t\t */\n\t\tgetStackIndex: function(datasetIndex) {\n\t\t\treturn this.getStackCount(datasetIndex) - 1;\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetRuler: function() {\n\t\t\tvar me = this;\n\t\t\tvar scale = me.getIndexScale();\n\t\t\tvar stackCount = me.getStackCount();\n\t\t\tvar datasetIndex = me.index;\n\t\t\tvar pixels = [];\n\t\t\tvar isHorizontal = scale.isHorizontal();\n\t\t\tvar start = isHorizontal ? scale.left : scale.top;\n\t\t\tvar end = start + (isHorizontal ? scale.width : scale.height);\n\t\t\tvar i, ilen;\n\n\t\t\tfor (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n\t\t\t\tpixels.push(scale.getPixelForValue(null, i, datasetIndex));\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tpixels: pixels,\n\t\t\t\tstart: start,\n\t\t\t\tend: end,\n\t\t\t\tstackCount: stackCount,\n\t\t\t\tscale: scale\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Note: pixel values are not clamped to the scale area.\n\t\t * @private\n\t\t */\n\t\tcalculateBarValuePixels: function(datasetIndex, index) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar meta = me.getMeta();\n\t\t\tvar scale = me.getValueScale();\n\t\t\tvar datasets = chart.data.datasets;\n\t\t\tvar value = scale.getRightValue(datasets[datasetIndex].data[index]);\n\t\t\tvar stacked = scale.options.stacked;\n\t\t\tvar stack = meta.stack;\n\t\t\tvar start = 0;\n\t\t\tvar i, imeta, ivalue, base, head, size;\n\n\t\t\tif (stacked || (stacked === undefined && stack !== undefined)) {\n\t\t\t\tfor (i = 0; i < datasetIndex; ++i) {\n\t\t\t\t\timeta = chart.getDatasetMeta(i);\n\n\t\t\t\t\tif (imeta.bar &&\n\t\t\t\t\t\timeta.stack === stack &&\n\t\t\t\t\t\timeta.controller.getValueScaleId() === scale.id &&\n\t\t\t\t\t\tchart.isDatasetVisible(i)) {\n\n\t\t\t\t\t\tivalue = scale.getRightValue(datasets[i].data[index]);\n\t\t\t\t\t\tif ((value < 0 && ivalue < 0) || (value >= 0 && ivalue > 0)) {\n\t\t\t\t\t\t\tstart += ivalue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbase = scale.getPixelForValue(start);\n\t\t\thead = scale.getPixelForValue(start + value);\n\t\t\tsize = (head - base) / 2;\n\n\t\t\treturn {\n\t\t\t\tsize: size,\n\t\t\t\tbase: base,\n\t\t\t\thead: head,\n\t\t\t\tcenter: head + size / 2\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tcalculateBarIndexPixels: function(datasetIndex, index, ruler) {\n\t\t\tvar me = this;\n\t\t\tvar options = ruler.scale.options;\n\t\t\tvar stackIndex = me.getStackIndex(datasetIndex);\n\t\t\tvar pixels = ruler.pixels;\n\t\t\tvar base = pixels[index];\n\t\t\tvar length = pixels.length;\n\t\t\tvar start = ruler.start;\n\t\t\tvar end = ruler.end;\n\t\t\tvar leftSampleSize, rightSampleSize, leftCategorySize, rightCategorySize, fullBarSize, size;\n\n\t\t\tif (length === 1) {\n\t\t\t\tleftSampleSize = base > start ? base - start : end - base;\n\t\t\t\trightSampleSize = base < end ? end - base : base - start;\n\t\t\t} else {\n\t\t\t\tif (index > 0) {\n\t\t\t\t\tleftSampleSize = (base - pixels[index - 1]) / 2;\n\t\t\t\t\tif (index === length - 1) {\n\t\t\t\t\t\trightSampleSize = leftSampleSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (index < length - 1) {\n\t\t\t\t\trightSampleSize = (pixels[index + 1] - base) / 2;\n\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\tleftSampleSize = rightSampleSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tleftCategorySize = leftSampleSize * options.categoryPercentage;\n\t\t\trightCategorySize = rightSampleSize * options.categoryPercentage;\n\t\t\tfullBarSize = (leftCategorySize + rightCategorySize) / ruler.stackCount;\n\t\t\tsize = fullBarSize * options.barPercentage;\n\n\t\t\tsize = Math.min(\n\t\t\t\thelpers.valueOrDefault(options.barThickness, size),\n\t\t\t\thelpers.valueOrDefault(options.maxBarThickness, Infinity));\n\n\t\t\tbase -= leftCategorySize;\n\t\t\tbase += fullBarSize * stackIndex;\n\t\t\tbase += (fullBarSize - size) / 2;\n\n\t\t\treturn {\n\t\t\t\tsize: size,\n\t\t\t\tbase: base,\n\t\t\t\thead: base + size,\n\t\t\t\tcenter: base + size / 2\n\t\t\t};\n\t\t},\n\n\t\tdraw: function() {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tvar scale = me.getValueScale();\n\t\t\tvar rects = me.getMeta().data;\n\t\t\tvar dataset = me.getDataset();\n\t\t\tvar ilen = rects.length;\n\t\t\tvar i = 0;\n\n\t\t\thelpers.canvas.clipArea(chart.ctx, chart.chartArea);\n\n\t\t\tfor (; i < ilen; ++i) {\n\t\t\t\tif (!isNaN(scale.getRightValue(dataset.data[i]))) {\n\t\t\t\t\trects[i].draw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thelpers.canvas.unclipArea(chart.ctx);\n\t\t},\n\n\t\tsetHoverStyle: function(rectangle) {\n\t\t\tvar dataset = this.chart.data.datasets[rectangle._datasetIndex];\n\t\t\tvar index = rectangle._index;\n\t\t\tvar custom = rectangle.custom || {};\n\t\t\tvar model = rectangle._model;\n\n\t\t\tmodel.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));\n\t\t\tmodel.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));\n\t\t\tmodel.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);\n\t\t},\n\n\t\tremoveHoverStyle: function(rectangle) {\n\t\t\tvar dataset = this.chart.data.datasets[rectangle._datasetIndex];\n\t\t\tvar index = rectangle._index;\n\t\t\tvar custom = rectangle.custom || {};\n\t\t\tvar model = rectangle._model;\n\t\t\tvar rectangleElementOptions = this.chart.options.elements.rectangle;\n\n\t\t\tmodel.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);\n\t\t\tmodel.borderColor = custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);\n\t\t\tmodel.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);\n\t\t}\n\t});\n\n\tChart.controllers.horizontalBar = Chart.controllers.bar.extend({\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetValueScaleId: function() {\n\t\t\treturn this.getMeta().xAxisID;\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetIndexScaleId: function() {\n\t\t\treturn this.getMeta().yAxisID;\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}