import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Class BlockUiService
 * @class
 */
export class BlockUiService {
    /**
     * constructor method
     * @constructor
     */
    constructor() {
        /**
         * subject property
         * @private
         * @type {Subject<BlockUiStatus>}
         */
        this.subject = new Subject();
        /**
         * loaderStatus property
         * @public
         * @type {Observable}
         */
        this.loaderStatus = this.subject.asObservable();
    }
    /**
     * show methods
     * @returns void
     */
    show() {
        this.subject.next({ status: true });
    }
    /**
     * hide methods
     * @returns void
     */
    hide() {
        this.subject.next({ status: false });
    }
}
BlockUiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BlockUiService_Factory() { return new BlockUiService(); }, token: BlockUiService, providedIn: "root" });
BlockUiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
BlockUiService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2Jsb2NrLXVpL2Jsb2NrLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUUvQjs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sY0FBYztJQWdCdkI7OztPQUdHO0lBQ0g7UUFsQkE7Ozs7V0FJRztRQUNLLFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBaUIsQ0FBQztRQUUvQzs7OztXQUlHO1FBQ0gsaUJBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBTTNCLENBQUM7SUFFakI7OztPQUdHO0lBQ0gsSUFBSTtRQUNBLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFnQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0EsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQWdCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7OztZQXZDSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbG9ja1VpU3RhdHVzIH0gZnJvbSAnLi9ibG9jay11aS5zdGF0dXMnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIENsYXNzIEJsb2NrVWlTZXJ2aWNlXG4gKiBAY2xhc3NcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBCbG9ja1VpU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBzdWJqZWN0IHByb3BlcnR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7U3ViamVjdDxCbG9ja1VpU3RhdHVzPn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHN1YmplY3QgPSBuZXcgU3ViamVjdDxCbG9ja1VpU3RhdHVzPigpO1xuXG4gICAgLyoqXG4gICAgICogbG9hZGVyU3RhdHVzIHByb3BlcnR5XG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0eXBlIHtPYnNlcnZhYmxlfVxuICAgICAqL1xuICAgIGxvYWRlclN0YXR1cyA9IHRoaXMuc3ViamVjdC5hc09ic2VydmFibGUoKTtcblxuICAgIC8qKlxuICAgICAqIGNvbnN0cnVjdG9yIG1ldGhvZFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBzaG93IG1ldGhvZHNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoPEJsb2NrVWlTdGF0dXM+eyBzdGF0dXM6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGlkZSBtZXRob2RzXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuc3ViamVjdC5uZXh0KDxCbG9ja1VpU3RhdHVzPnsgc3RhdHVzOiBmYWxzZSB9KTtcbiAgICB9XG59XG4iXX0=