import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockUIInstanceService } from '../../services/block-ui-instance.service';
import * as ɵngcc0 from '@angular/core';
export declare class BlockUIContentComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {
    private blockUI;
    private resolver;
    private changeDetectionRef;
    name: string;
    delayStart: number;
    delayStop: number;
    defaultMessage: string;
    templateCmp: any;
    templateOutlet: ViewContainerRef;
    state: any;
    className: string;
    active: boolean;
    templateCompRef: ComponentRef<{
        message?: any;
    }> | TemplateRef<{}>;
    message: any;
    private blockUISubscription;
    private settings;
    constructor(blockUI: BlockUIInstanceService, resolver: ComponentFactoryResolver, changeDetectionRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): boolean;
    ngAfterViewChecked(): void;
    private subscribeToBlockUI(blockUI$);
    private onDispatchedEvent(event);
    private onStart({name, message});
    private onStop({name});
    private onReset();
    private onUpdate({name, message});
    updateMessage(message: string): void;
    private showBlock(message);
    private hideBlock();
    private clearState();
    private updateBlockTemplate(msg);
    private onUnsubscribe(name);
    private updateInstanceBlockCount();
    private detectChanges();
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BlockUIContentComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BlockUIContentComponent, "block-ui-content", never, { "name": "name"; "delayStart": "delayStart"; "delayStop": "delayStop"; "defaultMessage": "message"; "templateCmp": "template"; }, {}, never, never>;
}

//# sourceMappingURL=block-ui-content.component.d.ts.map