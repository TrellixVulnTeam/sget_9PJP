import { Component } from '@angular/core';
import { MessageService } from 'primeng/api';
import { BreadcrumbService } from './breadcrumb.service';
import { AccessbilityService } from '@nuvem/angular-base';
import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';
import { filter, distinctUntilChanged } from 'rxjs/operators';
export class BreadcrumbComponent {
    constructor(router, activatedRoute, breadcrumbService, messages, accessibilityService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.breadcrumbService = breadcrumbService;
        this.messages = messages;
        this.accessibilityService = accessibilityService;
        this.highContrastEnabled = false;
        this.subscription = breadcrumbService.itemsHandler.subscribe(response => {
            this.items = response;
        });
        this.home = { icon: 'pi pi-home', routerLink: '/' };
    }
    ngOnInit() {
        this.router.events.pipe(filter((event) => event instanceof NavigationEnd), distinctUntilChanged()).subscribe((event) => {
            this.items = this.buildBreadCrumb(this.activatedRoute.root);
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    enableHighContrast() {
        this.highContrastEnabled = true;
        this.accessibilityService.enableHighContrast();
    }
    disableHighContrast() {
        this.highContrastEnabled = false;
        this.accessibilityService.disableHighContrast();
    }
    increaseFontSize() {
        this.accessibilityService.increaseFontSize();
    }
    decreaseFontSize() {
        this.accessibilityService.decreaseFontSize();
    }
    ngAfterViewInit() {
        this.messages.messageObserver.subscribe((msg) => {
            this.accessibilityService.addAccessibilityMessages({ severity: msg.severity });
        });
        this.accessibilityService.addAccessibilityIcons();
    }
    buildBreadCrumb(route, url = '', breadcrumbs = []) {
        let label = (route.routeConfig && route.routeConfig.data ? route.routeConfig.data.breadcrumb : '').trim();
        let path = route.routeConfig && route.routeConfig.data ? route.routeConfig.path : '';
        const lastRoutePart = path.split('/').pop();
        const isDynamicRoute = lastRoutePart.startsWith(':');
        if (isDynamicRoute && !!route.snapshot) {
            for (let key in route.snapshot.params) {
                path = path.replace(`:${key}`, route.snapshot.params[key]);
            }
            label = (`${(label != ':action') ? label : ''} ${Object.values(route.snapshot.params).join(' ')}`).trim();
        }
        const nextUrl = path ? `${url}/${path}` : url;
        const menuItem = {
            "label": label.charAt(0).toUpperCase() + label.slice(1),
            "routerLink": nextUrl
        };
        const newBreadcrumbs = menuItem.label ? [...breadcrumbs, menuItem] : [...breadcrumbs];
        if (route.firstChild) {
            return this.buildBreadCrumb(route.firstChild, nextUrl, newBreadcrumbs);
        }
        return newBreadcrumbs;
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'breadcrumb',
                template: "<div class=\"layout-breadcrumb layout-breadcrumb-container p-d-flex p-jc-between p-ai-center p-shadow-1\">\n    <p-breadcrumb [model]=\"items\" [home]=\"home\" styleClass=\"layout-breadcrumb p-pl-4 p-py-2\"></p-breadcrumb>\n    <div class=\"layout-breadcrumb-buttons p-d-flex p-ai-center p-pr-3\">\n        <button pButton \n            pRipple type=\"button\" \n            icon=\"pi pi-sliders-h\"\n            (click)=\"highContrastEnabled ? disableHighContrast() : enableHighContrast()\"\n            title=\"{{ highContrastEnabled ? 'Desabilitar alto contraste' : 'Habilitar alto contraste' }}\"\n            class=\"p-button-rounded p-button-text p-button-plain p-mr-1\">\n        </button>\n        <button pButton \n            pRipple \n            type=\"button\" \n            icon=\"pi pi-search-plus\"\n            title=\"Aumentar fonte\"\n            (click)=\"increaseFontSize()\" \n            class=\"p-button-rounded p-button-text p-button-plain p-mr-1\">\n        </button>\n        <button pButton \n            pRipple \n            type=\"button\"\n            icon=\"pi pi-search-minus\" \n            (click)=\"decreaseFontSize()\" title=\"Diminuir fonte\"\n            class=\"p-button-rounded p-button-text p-button-plain p-mr-1\">\n        </button>\n    </div>\n</div>\n",
                styles: [""]
            },] }
];
BreadcrumbComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: BreadcrumbService },
    { type: MessageService },
    { type: AccessbilityService }
];
//# sourceMappingURL=data:application/json;base64,