import { Observable } from 'rxjs';
import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';
import { HttpInterceptor } from '@angular/common/http';
import { BlockUiService } from './block-ui.service';
/**
 * Class BlockUiInterceptor
 * @class
 */
import * as ɵngcc0 from '@angular/core';
export declare class BlockUiInterceptor implements HttpInterceptor {
    private service;
    /**
     * constructor method
     * @constructor
     * @param {BlockUiService} service
     */
    constructor(service: BlockUiService);
    /**
     * intercept method
     * @public
     * @param {HttpRequest<any>} req
     * @param {HttpHandler} next
     * @return Observable<HttpEvent<any>>
     */
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    /**
     * isMutation method
     * @private
     * @param {string} method
     * @return boolean
     */
    private isMutation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BlockUiInterceptor, never>;
}

//# sourceMappingURL=block-ui.interceptor.d.ts.map