import { VersionTagComponent } from './version-tag.component';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { VERSIONTAG_CONFIG } from './version-tag.config';
/**
 * O componente VersionTag exibe o atributo `version` do arquivo `package.json` do sistema,
 * com o intuito de informar o usuário a versão atual da aplicação. Inicialmente foi feito para
 * ser utilizado no rodapé das aplicações conforme o exemplo a seguir.
 * @module
 */
import * as ɵngcc0 from '@angular/core';
export class VersionTagModule {
    /**
     * forRoot method
     * @public
     * @static
     * @returns ModuleWithProviders
     */
    static forRoot(config) {
        return {
            ngModule: VersionTagModule,
            providers: [
                { provide: VERSIONTAG_CONFIG, useValue: config },
            ]
        };
    }
}
VersionTagModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: VersionTagModule });
VersionTagModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function VersionTagModule_Factory(t) { return new (t || VersionTagModule)(); }, imports: [[
            CommonModule,
            RouterModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(VersionTagModule, { declarations: function () { return [VersionTagComponent]; }, imports: function () { return [CommonModule,
        RouterModule]; }, exports: function () { return [VersionTagComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VersionTagModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    RouterModule
                ],
                declarations: [
                    VersionTagComponent
                ],
                exports: [
                    VersionTagComponent
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi10YWcubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi92ZXJzaW9uLXRhZy92ZXJzaW9uLXRhZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQW9CLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBYUgsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QixJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQXdCO0FBQUksUUFDdkMsT0FBTztBQUNmLFlBQVksUUFBUSxFQUFFLGdCQUFnQjtBQUN0QyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtBQUNoRSxhQUFhO0FBQ2IsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0w7NENBNUJDLFFBQVEsU0FBQztFQUNOLE9BQU8sRUFBRSxzQkFDTCxZQUFZLHNCQUNaLFlBQVksa0JBQ2Ysa0JBQ0QsWUFBWSxFQUFFO0FBQ1YsbUJBQW1CO1dBQ3RCO0lBQ0QsT0FBTyxFQUFFO29CQUNMLG1CQUFtQixrQkFDdEIsY0FDSjs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVyc2lvblRhZ0NvbXBvbmVudCB9IGZyb20gJy4vdmVyc2lvbi10YWcuY29tcG9uZW50JztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFZlcnNpb25UYWdDb25maWcsIFZFUlNJT05UQUdfQ09ORklHIH0gZnJvbSAnLi92ZXJzaW9uLXRhZy5jb25maWcnO1xuXG4vKipcbiAqIE8gY29tcG9uZW50ZSBWZXJzaW9uVGFnIGV4aWJlIG8gYXRyaWJ1dG8gYHZlcnNpb25gIGRvIGFycXVpdm8gYHBhY2thZ2UuanNvbmAgZG8gc2lzdGVtYSxcbiAqIGNvbSBvIGludHVpdG8gZGUgaW5mb3JtYXIgbyB1c3XDoXJpbyBhIHZlcnPDo28gYXR1YWwgZGEgYXBsaWNhw6fDo28uIEluaWNpYWxtZW50ZSBmb2kgZmVpdG8gcGFyYVxuICogc2VyIHV0aWxpemFkbyBubyByb2RhcMOpIGRhcyBhcGxpY2HDp8O1ZXMgY29uZm9ybWUgbyBleGVtcGxvIGEgc2VndWlyLlxuICogQG1vZHVsZVxuICovXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBSb3V0ZXJNb2R1bGVcbiAgICBdLFxuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBWZXJzaW9uVGFnQ29tcG9uZW50XG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFZlcnNpb25UYWdDb21wb25lbnRcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFZlcnNpb25UYWdNb2R1bGUge1xuXG4gICAgLyoqXG4gICAgICogZm9yUm9vdCBtZXRob2RcbiAgICAgKiBAcHVibGljXG4gICAgICogQHN0YXRpY1xuICAgICAqIEByZXR1cm5zIE1vZHVsZVdpdGhQcm92aWRlcnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFZlcnNpb25UYWdDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFZlcnNpb25UYWdNb2R1bGU+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBWZXJzaW9uVGFnTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBWRVJTSU9OVEFHX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZyB9LFxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==