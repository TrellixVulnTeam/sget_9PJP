{"version":3,"file":"hide-while-login.component.d.ts","sources":["hide-while-login.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnDestroy, OnInit, AfterViewInit, AfterContentInit } from '@angular/core';\nimport { Authentication } from './authentication';\nimport { User } from './user';\nimport { BlockUiService } from '../../block-ui/block-ui.service';\n/**\n *\n * Componente HideWhileLoginComponent, utilizado para não apresentar a tela da aplicação enquanto a fase de login não terminou.\n *\n * @class\n */\nexport declare class HideWhileLoginComponent implements OnInit, AfterViewInit, AfterContentInit, OnDestroy {\n    private hostComponent;\n    private auth;\n    private blockUiService;\n    /**\n     * Carrega conteúdo\n     * @type {loadingString}\n     */\n    loadingContent: string;\n    private loginNotifications;\n    waitingLogin: boolean;\n    /**\n     * constructor method\n     * @param {ElementRef} hostComponent\n     * @param {AbstractAuthentication} auth\n     * @param {BlockUiService} blockUiService\n     * @constructor\n     */\n    constructor(hostComponent: ElementRef, auth: Authentication<User>, blockUiService: BlockUiService);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    /**\n     * ngOnDestroy method\n     * @returns void\n     */\n    ngOnDestroy(): void;\n}\n"]}