import { Injector, Directive } from "@angular/core";
import { FormControl } from "@angular/forms";
import { FormControlSuperclass } from "./form-control-superclass";
import * as ɵngcc0 from '@angular/core';
export class WrappedFormControlSuperclass extends FormControlSuperclass {
    constructor(injector) {
        super(injector);
        this.formControl = new FormControl();
        this.subscribeTo(this.formControl.valueChanges, (value) => {
            this.emitOutgoingValue(this.innerToOuter(value));
        });
        this.formControl.markAsTouched = () => {
            this.onTouched();
        };
    }
    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */
    handleIncomingValue(value) {
        this.formControl.setValue(this.outerToInner(value), { emitEvent: false });
    }
    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this.formControl.disable({ emitEvent: false });
        }
        else {
            this.formControl.enable({ emitEvent: false });
        }
        super.setDisabledState(this.isDisabled);
    }
    /** Override this to modify a value coming from the outside to the format needed within this component. */
    outerToInner(value) {
        return value;
    }
    /** Override this to modify a value coming from within this component to the format expected on the outside. */
    innerToOuter(value) {
        return value;
    }
}
WrappedFormControlSuperclass.ɵfac = function WrappedFormControlSuperclass_Factory(t) { return new (t || WrappedFormControlSuperclass)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
WrappedFormControlSuperclass.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WrappedFormControlSuperclass, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
WrappedFormControlSuperclass.ctorParameters = () => [
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WrappedFormControlSuperclass, [{
        type: Directive
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1mb3JtLWNvbnRyb2wtc3VwZXJjbGFzcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1iYXNlL3NyYy9saWIvZm9ybS11dGlscy93cmFwcGVkLWZvcm0tY29udHJvbC1zdXBlcmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFHbEUsTUFBTSxPQUFnQiw0QkFBK0QsU0FBUSxxQkFBZ0M7QUFDN0gsSUFHSSxZQUFZLFFBQWtCO0FBQ2xDLFFBQVEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hCLFFBSkksZ0JBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQ3BDLFFBR1EsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0FBQ2xFLFlBQVksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM3RCxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxHQUFHLEVBQUU7QUFDOUMsWUFBWSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDN0IsUUFBUSxDQUFDLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTCxJQUNJLHNIQUFzSDtBQUMxSCxJQUFJLG1CQUFtQixDQUFDLEtBQWdCO0FBQ3hDLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2xGLElBQUksQ0FBQztBQUNMLElBQ0ksd0hBQXdIO0FBQzVILElBQUksZ0JBQWdCLENBQUMsVUFBbUI7QUFDeEMsUUFBUSxJQUFJLFVBQVUsRUFBRTtBQUN4QixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDM0QsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDMUQsU0FBUztBQUNULFFBQVEsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNoRCxJQUFJLENBQUM7QUFDTCxJQUNJLDBHQUEwRztBQUM5RyxJQUFjLFlBQVksQ0FBQyxLQUFnQjtBQUFJLFFBQ3ZDLE9BQVEsS0FBMEIsQ0FBQztBQUMzQyxJQUFJLENBQUM7QUFDTCxJQUNJLCtHQUErRztBQUNuSCxJQUFjLFlBQVksQ0FBQyxLQUFnQjtBQUFJLFFBQ3ZDLE9BQVEsS0FBMEIsQ0FBQztBQUMzQyxJQUFJLENBQUM7QUFDTDt3REF2Q0MsU0FBUztvSkFDUjtBQUFDO0FBQXNELFlBTGhELFFBQVE7QUFBRzs7O3lFQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBGb3JtQ29udHJvbFN1cGVyY2xhc3MgfSBmcm9tIFwiLi9mb3JtLWNvbnRyb2wtc3VwZXJjbGFzc1wiO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBXcmFwcGVkRm9ybUNvbnRyb2xTdXBlcmNsYXNzPE91dGVyVHlwZSwgSW5uZXJUeXBlID0gT3V0ZXJUeXBlPiBleHRlbmRzIEZvcm1Db250cm9sU3VwZXJjbGFzczxPdXRlclR5cGU+IHtcblxuICAgIGZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICAgICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvKHRoaXMuZm9ybUNvbnRyb2wudmFsdWVDaGFuZ2VzLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdE91dGdvaW5nVmFsdWUodGhpcy5pbm5lclRvT3V0ZXIodmFsdWUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2wubWFya0FzVG91Y2hlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqIENhbGxlZCBhcyBhbmd1bGFyIHByb3BhZ2F0ZXMgdmFsdWVzIGNoYW5nZXMgdG8gdGhpcyBgQ29udHJvbFZhbHVlQWNjZXNzb3JgLiBZb3Ugbm9ybWFsbHkgZG8gbm90IG5lZWQgdG8gdXNlIGl0LiAqL1xuICAgIGhhbmRsZUluY29taW5nVmFsdWUodmFsdWU6IE91dGVyVHlwZSkge1xuICAgICAgICB0aGlzLmZvcm1Db250cm9sLnNldFZhbHVlKHRoaXMub3V0ZXJUb0lubmVyKHZhbHVlKSwgeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIC8qKiBDYWxsZWQgYXMgYW5ndWxhciBwcm9wYWdhdGVzIGRpc2FibGVkIGNoYW5nZXMgdG8gdGhpcyBgQ29udHJvbFZhbHVlQWNjZXNzb3JgLiBZb3Ugbm9ybWFsbHkgZG8gbm90IG5lZWQgdG8gdXNlIGl0LiAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5kaXNhYmxlKHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuZW5hYmxlKHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5zZXREaXNhYmxlZFN0YXRlKHRoaXMuaXNEaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgLyoqIE92ZXJyaWRlIHRoaXMgdG8gbW9kaWZ5IGEgdmFsdWUgY29taW5nIGZyb20gdGhlIG91dHNpZGUgdG8gdGhlIGZvcm1hdCBuZWVkZWQgd2l0aGluIHRoaXMgY29tcG9uZW50LiAqL1xuICAgIHByb3RlY3RlZCBvdXRlclRvSW5uZXIodmFsdWU6IE91dGVyVHlwZSk6IElubmVyVHlwZSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgYXMgYW55KSBhcyBJbm5lclR5cGU7XG4gICAgfVxuXG4gICAgLyoqIE92ZXJyaWRlIHRoaXMgdG8gbW9kaWZ5IGEgdmFsdWUgY29taW5nIGZyb20gd2l0aGluIHRoaXMgY29tcG9uZW50IHRvIHRoZSBmb3JtYXQgZXhwZWN0ZWQgb24gdGhlIG91dHNpZGUuICovXG4gICAgcHJvdGVjdGVkIGlubmVyVG9PdXRlcih2YWx1ZTogSW5uZXJUeXBlKTogT3V0ZXJUeXBlIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpIGFzIE91dGVyVHlwZTtcbiAgICB9XG59XG4iXX0=