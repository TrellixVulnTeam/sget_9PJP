import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { FormNotificationType } from '../types/form-notification.type';
import { filter } from 'rxjs/operators';
import { FieldFormNotification } from '../types/field-form-notification.type';
import * as i0 from "@angular/core";
/**
 * Serviço ṕara tratar notificações em formulários
 * @class
 */
export class FormNotificationService {
    constructor() {
        /**
         * @type {Subject<FormNotification>()}
         */
        this.formNotifications = new Subject();
    }
    /**
     * Método para criação de inscrição de campos presentes nos formulários
     * @param {string} field
     * @returns Observable<ResponseHandle>
     */
    notifications(form, field) {
        return this.formNotifications.pipe(filter((violation) => {
            return (!form || violation.form === form) && (violation.type === FormNotificationType.CLEAN || (violation instanceof FieldFormNotification &&
                violation.field === field));
        }));
    }
    notify(notification) {
        this.formNotifications.next(notification);
    }
}
FormNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormNotificationService_Factory() { return new FormNotificationService(); }, token: FormNotificationService, providedIn: "root" });
FormNotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2Zvcm0tbm90aWZpY2F0aW9uL3NlcnZpY2VzL2Zvcm0tbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBb0Isb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6RixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7O0FBRTlFOzs7R0FHRztBQUlILE1BQU0sT0FBTyx1QkFBdUI7SUFIcEM7UUFLSTs7V0FFRztRQUNILHNCQUFpQixHQUNiLElBQUksT0FBTyxFQUFvQixDQUFDO0tBcUJ2QztJQW5CRzs7OztPQUlHO0lBQ0gsYUFBYSxDQUFDLElBQVksRUFBRSxLQUFhO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQ3JDLENBQUMsU0FBMkIsRUFBRSxFQUFFO1lBQzVCLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxvQkFBb0IsQ0FBQyxLQUFLLElBQUksQ0FDM0YsU0FBUyxZQUFZLHFCQUFxQjtnQkFDMUMsU0FBUyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQ25DLENBQUMsQ0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQThCO1FBQ2pDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7OztZQTVCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGb3JtTm90aWZpY2F0aW9uLCBGb3JtTm90aWZpY2F0aW9uVHlwZSB9IGZyb20gJy4uL3R5cGVzL2Zvcm0tbm90aWZpY2F0aW9uLnR5cGUnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRmllbGRGb3JtTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vdHlwZXMvZmllbGQtZm9ybS1ub3RpZmljYXRpb24udHlwZSc7XG5cbi8qKlxuICogU2VydmnDp28g4bmVYXJhIHRyYXRhciBub3RpZmljYcOnw7VlcyBlbSBmb3JtdWzDoXJpb3NcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtTm90aWZpY2F0aW9uU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U3ViamVjdDxGb3JtTm90aWZpY2F0aW9uPigpfVxuICAgICAqL1xuICAgIGZvcm1Ob3RpZmljYXRpb25zOiBTdWJqZWN0PEZvcm1Ob3RpZmljYXRpb24+ID1cbiAgICAgICAgbmV3IFN1YmplY3Q8Rm9ybU5vdGlmaWNhdGlvbj4oKTtcblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcGFyYSBjcmlhw6fDo28gZGUgaW5zY3Jpw6fDo28gZGUgY2FtcG9zIHByZXNlbnRlcyBub3MgZm9ybXVsw6FyaW9zXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkXG4gICAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxSZXNwb25zZUhhbmRsZT5cbiAgICAgKi9cbiAgICBub3RpZmljYXRpb25zKGZvcm06IFN0cmluZywgZmllbGQ6IFN0cmluZyk6IE9ic2VydmFibGU8Rm9ybU5vdGlmaWNhdGlvbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtTm90aWZpY2F0aW9ucy5waXBlKGZpbHRlcihcbiAgICAgICAgICAgICh2aW9sYXRpb246IEZvcm1Ob3RpZmljYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCFmb3JtIHx8IHZpb2xhdGlvbi5mb3JtID09PSBmb3JtKSAmJiAodmlvbGF0aW9uLnR5cGUgPT09IEZvcm1Ob3RpZmljYXRpb25UeXBlLkNMRUFOIHx8IChcbiAgICAgICAgICAgICAgICAgICAgdmlvbGF0aW9uIGluc3RhbmNlb2YgRmllbGRGb3JtTm90aWZpY2F0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgIHZpb2xhdGlvbi5maWVsZCA9PT0gZmllbGQpKVxuICAgICAgICAgICAgfVxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBub3RpZnkobm90aWZpY2F0aW9uOiBGb3JtTm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuZm9ybU5vdGlmaWNhdGlvbnMubmV4dChub3RpZmljYXRpb24pO1xuICAgIH1cblxufVxuIl19