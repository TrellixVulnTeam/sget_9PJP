{"ast":null,"code":"import _toConsumableArray from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Input, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"inputtext\"];\n\nfunction Chips_li_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Chips_li_2_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 11);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r2 = ɵngcc0.ɵɵnextContext().$implicit;\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r6.field ? ctx_r6.resolveFieldData(item_r2, ctx_r6.field) : item_r2);\n  }\n}\n\nfunction Chips_li_2_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function Chips_li_2_span_4_Template_span_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      var i_r3 = ɵngcc0.ɵɵnextContext().index;\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.removeItem($event, i_r3);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c1 = function _c1(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction Chips_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 6, 7);\n    ɵngcc0.ɵɵlistener(\"click\", function Chips_li_2_Template_li_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var item_r2 = ctx.$implicit;\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onItemClick($event, item_r2);\n    });\n    ɵngcc0.ɵɵtemplate(2, Chips_li_2_ng_container_2_Template, 1, 0, \"ng-container\", 8);\n    ɵngcc0.ɵɵtemplate(3, Chips_li_2_span_3_Template, 2, 1, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(4, Chips_li_2_span_4_Template, 1, 0, \"span\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r2 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.itemTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(4, _c1, item_r2));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.itemTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.disabled);\n  }\n}\n\nvar _c2 = function _c2(a1, a2) {\n  return {\n    \"p-inputtext p-chips-multiple-container\": true,\n    \"p-focus\": a1,\n    \"p-disabled\": a2\n  };\n};\n\nvar CHIPS_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return Chips;\n  }),\n  multi: true\n};\n\nvar Chips = /*#__PURE__*/function () {\n  function Chips(el, cd) {\n    _classCallCheck(this, Chips);\n\n    this.el = el;\n    this.cd = cd;\n    this.allowDuplicate = true;\n    this.onAdd = new EventEmitter();\n    this.onRemove = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this.onChipClick = new EventEmitter();\n\n    this.onModelChange = function () {};\n\n    this.onModelTouched = function () {};\n  }\n\n  _createClass(Chips, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'item':\n            _this.itemTemplate = item.template;\n            break;\n\n          default:\n            _this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      this.inputViewChild.nativeElement.focus();\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput() {\n      this.updateFilledState();\n    }\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      var _this2 = this;\n\n      if (!this.disabled) {\n        if (this.separator) {\n          var pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n          pastedData.split(this.separator).forEach(function (val) {\n            _this2.addItem(event, val, true);\n          });\n          this.inputViewChild.nativeElement.value = '';\n        }\n\n        this.updateFilledState();\n      }\n    }\n  }, {\n    key: \"updateFilledState\",\n    value: function updateFilledState() {\n      if (!this.value || this.value.length === 0) {\n        this.filled = this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '';\n      } else {\n        this.filled = true;\n      }\n    }\n  }, {\n    key: \"onItemClick\",\n    value: function onItemClick(event, item) {\n      this.onChipClick.emit({\n        originalEvent: event,\n        value: item\n      });\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n      this.updateMaxedOut();\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"resolveFieldData\",\n    value: function resolveFieldData(data, field) {\n      if (data && field) {\n        if (field.indexOf('.') == -1) {\n          return data[field];\n        } else {\n          var fields = field.split('.');\n          var value = data;\n\n          for (var i = 0, len = fields.length; i < len; ++i) {\n            value = value[fields[i]];\n          }\n\n          return value;\n        }\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"onInputFocus\",\n    value: function onInputFocus(event) {\n      this.focus = true;\n      this.onFocus.emit(event);\n    }\n  }, {\n    key: \"onInputBlur\",\n    value: function onInputBlur(event) {\n      this.focus = false;\n\n      if (this.addOnBlur && this.inputViewChild.nativeElement.value) {\n        this.addItem(event, this.inputViewChild.nativeElement.value, false);\n      }\n\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(event, index) {\n      if (this.disabled) {\n        return;\n      }\n\n      var removedItem = this.value[index];\n      this.value = this.value.filter(function (val, i) {\n        return i != index;\n      });\n      this.onModelChange(this.value);\n      this.onRemove.emit({\n        originalEvent: event,\n        value: removedItem\n      });\n      this.updateFilledState();\n      this.updateMaxedOut();\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(event, item, preventDefault) {\n      this.value = this.value || [];\n\n      if (item && item.trim().length) {\n        if (this.allowDuplicate || this.value.indexOf(item) === -1) {\n          this.value = [].concat(_toConsumableArray(this.value), [item]);\n          this.onModelChange(this.value);\n          this.onAdd.emit({\n            originalEvent: event,\n            value: item\n          });\n        }\n      }\n\n      this.updateFilledState();\n      this.updateMaxedOut();\n      this.inputViewChild.nativeElement.value = '';\n\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      switch (event.which) {\n        //backspace\n        case 8:\n          if (this.inputViewChild.nativeElement.value.length === 0 && this.value && this.value.length > 0) {\n            this.value = _toConsumableArray(this.value);\n            var removedItem = this.value.pop();\n            this.onModelChange(this.value);\n            this.onRemove.emit({\n              originalEvent: event,\n              value: removedItem\n            });\n            this.updateFilledState();\n          }\n\n          break;\n        //enter\n\n        case 13:\n          this.addItem(event, this.inputViewChild.nativeElement.value, true);\n          break;\n\n        case 9:\n          if (this.addOnTab && this.inputViewChild.nativeElement.value !== '') {\n            this.addItem(event, this.inputViewChild.nativeElement.value, true);\n          }\n\n          break;\n\n        default:\n          if (this.max && this.value && this.max === this.value.length) {\n            event.preventDefault();\n          } else if (this.separator) {\n            if (this.separator === ',' && event.which === 188) {\n              this.addItem(event, this.inputViewChild.nativeElement.value, true);\n            }\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"updateMaxedOut\",\n    value: function updateMaxedOut() {\n      if (this.inputViewChild && this.inputViewChild.nativeElement) {\n        if (this.max && this.value && this.max === this.value.length) this.inputViewChild.nativeElement.disabled = true;else this.inputViewChild.nativeElement.disabled = this.disabled || false;\n      }\n    }\n  }]);\n\n  return Chips;\n}();\n\nChips.ɵfac = function Chips_Factory(t) {\n  return new (t || Chips)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nChips.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: Chips,\n  selectors: [[\"p-chips\"]],\n  contentQueries: function Chips_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function Chips_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function Chips_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focus);\n    }\n  },\n  inputs: {\n    allowDuplicate: \"allowDuplicate\",\n    disabled: \"disabled\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    field: \"field\",\n    placeholder: \"placeholder\",\n    max: \"max\",\n    ariaLabelledBy: \"ariaLabelledBy\",\n    tabindex: \"tabindex\",\n    inputId: \"inputId\",\n    inputStyle: \"inputStyle\",\n    inputStyleClass: \"inputStyleClass\",\n    addOnTab: \"addOnTab\",\n    addOnBlur: \"addOnBlur\",\n    separator: \"separator\"\n  },\n  outputs: {\n    onAdd: \"onAdd\",\n    onRemove: \"onRemove\",\n    onFocus: \"onFocus\",\n    onBlur: \"onBlur\",\n    onChipClick: \"onChipClick\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR])],\n  decls: 6,\n  vars: 17,\n  consts: [[3, \"ngClass\", \"ngStyle\", \"click\"], [3, \"ngClass\"], [\"class\", \"p-chips-token\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"p-chips-input-token\"], [\"type\", \"text\", 3, \"disabled\", \"ngStyle\", \"keydown\", \"input\", \"paste\", \"focus\", \"blur\"], [\"inputtext\", \"\"], [1, \"p-chips-token\", 3, \"click\"], [\"token\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"p-chips-token-label\", 4, \"ngIf\"], [\"class\", \"p-chips-token-icon pi pi-times-circle\", 3, \"click\", 4, \"ngIf\"], [1, \"p-chips-token-label\"], [1, \"p-chips-token-icon\", \"pi\", \"pi-times-circle\", 3, \"click\"]],\n  template: function Chips_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"click\", function Chips_Template_div_click_0_listener() {\n        return ctx.onClick();\n      });\n      ɵngcc0.ɵɵelementStart(1, \"ul\", 1);\n      ɵngcc0.ɵɵtemplate(2, Chips_li_2_Template, 5, 6, \"li\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"li\", 3);\n      ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"keydown\", function Chips_Template_input_keydown_4_listener($event) {\n        return ctx.onKeydown($event);\n      })(\"input\", function Chips_Template_input_input_4_listener() {\n        return ctx.onInput();\n      })(\"paste\", function Chips_Template_input_paste_4_listener($event) {\n        return ctx.onPaste($event);\n      })(\"focus\", function Chips_Template_input_focus_4_listener($event) {\n        return ctx.onInputFocus($event);\n      })(\"blur\", function Chips_Template_input_blur_4_listener($event) {\n        return ctx.onInputBlur($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngClass\", \"p-chips p-component\")(\"ngStyle\", ctx.style);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(14, _c2, ctx.focus, ctx.disabled));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.value);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassMap(ctx.inputStyleClass);\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"ngStyle\", ctx.inputStyle);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"placeholder\", ctx.value && ctx.value.length ? null : ctx.placeholder)(\"tabindex\", ctx.tabindex)(\"aria-labelledby\", ctx.ariaLabelledBy);\n    }\n  },\n  directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf],\n  styles: [\".p-chips{display:inline-flex}.p-chips-multiple-container{align-items:center;cursor:text;display:flex;flex-wrap:wrap;list-style-type:none;margin:0;overflow:hidden;padding:0}.p-chips-token{align-items:center;cursor:default;display:inline-flex;flex:0 0 auto}.p-chips-input-token{display:inline-flex;flex:1 1 auto}.p-chips-token-icon{cursor:pointer}.p-chips-input-token input{background-color:transparent;border:0;border-radius:0;box-shadow:none;margin:0;outline:0 none;padding:0;width:100%}.p-fluid .p-chips{display:flex}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nChips.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nChips.propDecorators = {\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  field: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  ariaLabelledBy: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  inputId: [{\n    type: Input\n  }],\n  allowDuplicate: [{\n    type: Input\n  }],\n  inputStyle: [{\n    type: Input\n  }],\n  inputStyleClass: [{\n    type: Input\n  }],\n  addOnTab: [{\n    type: Input\n  }],\n  addOnBlur: [{\n    type: Input\n  }],\n  separator: [{\n    type: Input\n  }],\n  onAdd: [{\n    type: Output\n  }],\n  onRemove: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output\n  }],\n  onBlur: [{\n    type: Output\n  }],\n  onChipClick: [{\n    type: Output\n  }],\n  inputViewChild: [{\n    type: ViewChild,\n    args: ['inputtext']\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Chips, [{\n    type: Component,\n    args: [{\n      selector: 'p-chips',\n      template: \"\\n        <div [ngClass]=\\\"'p-chips p-component'\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" (click)=\\\"onClick()\\\">\\n            <ul [ngClass]=\\\"{'p-inputtext p-chips-multiple-container':true,'p-focus':focus,'p-disabled':disabled}\\\">\\n                <li #token *ngFor=\\\"let item of value; let i = index;\\\" class=\\\"p-chips-token\\\" (click)=\\\"onItemClick($event, item)\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"itemTemplate; context: {$implicit: item}\\\"></ng-container>\\n                    <span *ngIf=\\\"!itemTemplate\\\" class=\\\"p-chips-token-label\\\">{{field ? resolveFieldData(item,field) : item}}</span>\\n                    <span *ngIf=\\\"!disabled\\\" class=\\\"p-chips-token-icon pi pi-times-circle\\\" (click)=\\\"removeItem($event,i)\\\"></span>\\n                </li>\\n                <li class=\\\"p-chips-input-token\\\">\\n                    <input #inputtext type=\\\"text\\\" [attr.id]=\\\"inputId\\\" [attr.placeholder]=\\\"(value && value.length ? null : placeholder)\\\" [attr.tabindex]=\\\"tabindex\\\" (keydown)=\\\"onKeydown($event)\\\"\\n                    (input)=\\\"onInput()\\\" (paste)=\\\"onPaste($event)\\\" [attr.aria-labelledby]=\\\"ariaLabelledBy\\\" (focus)=\\\"onInputFocus($event)\\\" (blur)=\\\"onInputBlur($event)\\\" [disabled]=\\\"disabled\\\" [ngStyle]=\\\"inputStyle\\\" [class]=\\\"inputStyleClass\\\">\\n                </li>\\n            </ul>\\n        </div>\\n    \",\n      host: {\n        '[class.p-inputwrapper-filled]': 'filled',\n        '[class.p-inputwrapper-focus]': 'focus'\n      },\n      providers: [CHIPS_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".p-chips{display:inline-flex}.p-chips-multiple-container{align-items:center;cursor:text;display:flex;flex-wrap:wrap;list-style-type:none;margin:0;overflow:hidden;padding:0}.p-chips-token{align-items:center;cursor:default;display:inline-flex;flex:0 0 auto}.p-chips-input-token{display:inline-flex;flex:1 1 auto}.p-chips-token-icon{cursor:pointer}.p-chips-input-token input{background-color:transparent;border:0;border-radius:0;box-shadow:none;margin:0;outline:0 none;padding:0;width:100%}.p-fluid .p-chips{display:flex}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    allowDuplicate: [{\n      type: Input\n    }],\n    onAdd: [{\n      type: Output\n    }],\n    onRemove: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    onChipClick: [{\n      type: Output\n    }],\n    disabled: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    field: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    inputStyle: [{\n      type: Input\n    }],\n    inputStyleClass: [{\n      type: Input\n    }],\n    addOnTab: [{\n      type: Input\n    }],\n    addOnBlur: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input\n    }],\n    inputViewChild: [{\n      type: ViewChild,\n      args: ['inputtext']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\nvar ChipsModule = function ChipsModule() {\n  _classCallCheck(this, ChipsModule);\n};\n\nChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ChipsModule\n});\nChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ChipsModule_Factory(t) {\n    return new (t || ChipsModule)();\n  },\n  imports: [[CommonModule, InputTextModule, SharedModule], InputTextModule, SharedModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChipsModule, {\n    declarations: function declarations() {\n      return [Chips];\n    },\n    imports: function imports() {\n      return [CommonModule, InputTextModule, SharedModule];\n    },\n    exports: function exports() {\n      return [Chips, InputTextModule, SharedModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, InputTextModule, SharedModule],\n      exports: [Chips, InputTextModule, SharedModule],\n      declarations: [Chips]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CHIPS_VALUE_ACCESSOR, Chips, ChipsModule };","map":{"version":3,"sources":["../../src/app/components/chips/chips.ts","../../src/app/components/chips/primeng-chips.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,EventEmitter,AfterContentInit,ContentChildren,QueryList,TemplateRef,forwardRef,ViewChild,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule,PrimeTemplate} from 'primeng/api';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const CHIPS_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Chips),\n  multi: true\n};\n\n@Component({\n    selector: 'p-chips',\n    template: `\n        <div [ngClass]=\"'p-chips p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onClick()\">\n            <ul [ngClass]=\"{'p-inputtext p-chips-multiple-container':true,'p-focus':focus,'p-disabled':disabled}\">\n                <li #token *ngFor=\"let item of value; let i = index;\" class=\"p-chips-token\" (click)=\"onItemClick($event, item)\">\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item}\"></ng-container>\n                    <span *ngIf=\"!itemTemplate\" class=\"p-chips-token-label\">{{field ? resolveFieldData(item,field) : item}}</span>\n                    <span *ngIf=\"!disabled\" class=\"p-chips-token-icon pi pi-times-circle\" (click)=\"removeItem($event,i)\"></span>\n                </li>\n                <li class=\"p-chips-input-token\">\n                    <input #inputtext type=\"text\" [attr.id]=\"inputId\" [attr.placeholder]=\"(value && value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\"\n                    (input)=\"onInput()\" (paste)=\"onPaste($event)\" [attr.aria-labelledby]=\"ariaLabelledBy\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\">\n                </li>\n            </ul>\n        </div>\n    `,\n    host: {\n        '[class.p-inputwrapper-filled]': 'filled',\n        '[class.p-inputwrapper-focus]': 'focus'\n    },\n    providers: [CHIPS_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./chips.css']\n})\nexport class Chips implements AfterContentInit,ControlValueAccessor {\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() disabled: boolean;\n\n    @Input() field: string;\n\n    @Input() placeholder: string;\n\n    @Input() max: number;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() allowDuplicate: boolean = true;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: any;\n\n    @Input() addOnTab: boolean;\n\n    @Input() addOnBlur: boolean;\n\n    @Input() separator: string;\n\n    @Output() onAdd: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRemove: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onChipClick: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('inputtext') inputViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    public itemTemplate: TemplateRef<any>;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    valueChanged: boolean;\n\n    focus: boolean;\n\n    filled: boolean;\n\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    onClick() {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    onInput() {\n        this.updateFilledState();\n    }\n\n    onPaste(event) {\n        if (!this.disabled) {\n            if (this.separator) {\n                let pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n                pastedData.split(this.separator).forEach(val => {\n                    this.addItem(event, val, true);\n                });\n                this.inputViewChild.nativeElement.value = '';\n            }\n            this.updateFilledState();\n        }\n    }\n\n    updateFilledState() {\n        if (!this.value || this.value.length === 0) {\n            this.filled = (this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '');\n        }\n        else {\n            this.filled = true;\n        }\n    }\n\n    onItemClick(event: Event, item: any) {\n        this.onChipClick.emit({\n            originalEvent: event,\n            value: item\n        });\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.updateMaxedOut();\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n\n    resolveFieldData(data: any, field: string): any {\n        if (data && field) {\n            if (field.indexOf('.') == -1) {\n                return data[field];\n            }\n            else {\n                let fields: string[] = field.split('.');\n                let value = data;\n                for(var i = 0, len = fields.length; i < len; ++i) {\n                    value = value[fields[i]];\n                }\n                return value;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    onInputFocus(event: FocusEvent) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event: FocusEvent) {\n        this.focus = false;\n        if (this.addOnBlur && this.inputViewChild.nativeElement.value) {\n            this.addItem(event, this.inputViewChild.nativeElement.value, false);\n        }\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    removeItem(event: Event, index: number): void {\n        if (this.disabled) {\n            return;\n        }\n\n        let removedItem = this.value[index];\n        this.value = this.value.filter((val, i) => i!=index);\n        this.onModelChange(this.value);\n        this.onRemove.emit({\n            originalEvent: event,\n            value: removedItem\n        });\n        this.updateFilledState();\n        this.updateMaxedOut();\n    }\n\n    addItem(event: Event, item: string, preventDefault: boolean): void {\n        this.value = this.value||[];\n        if (item && item.trim().length) {\n            if (this.allowDuplicate || this.value.indexOf(item) === -1) {\n                this.value = [...this.value, item];\n                this.onModelChange(this.value);\n                this.onAdd.emit({\n                    originalEvent: event,\n                    value: item\n                });\n            }\n        }\n        this.updateFilledState();\n        this.updateMaxedOut();\n        this.inputViewChild.nativeElement.value = '';\n\n        if (preventDefault) {\n            event.preventDefault();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        switch(event.which) {\n            //backspace\n            case 8:\n                if (this.inputViewChild.nativeElement.value.length === 0 && this.value && this.value.length > 0) {\n                    this.value = [...this.value];\n                    let removedItem = this.value.pop();\n                    this.onModelChange(this.value);\n                    this.onRemove.emit({\n                        originalEvent: event,\n                        value: removedItem\n                    });\n                    this.updateFilledState();\n                }\n            break;\n\n            //enter\n            case 13:\n                this.addItem(event, this.inputViewChild.nativeElement.value, true);\n            break;\n\n            case 9:\n                if (this.addOnTab && this.inputViewChild.nativeElement.value !== '') {\n                    this.addItem(event, this.inputViewChild.nativeElement.value, true);\n                }\n            break;\n\n            default:\n                if (this.max && this.value && this.max === this.value.length) {\n                    event.preventDefault();\n                }\n                else if (this.separator) {\n                    if (this.separator === ',' && event.which === 188) {\n                        this.addItem(event, this.inputViewChild.nativeElement.value, true);\n                    }\n                }\n            break;\n        }\n    }\n\n    updateMaxedOut() {\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\n            if (this.max && this.value && this.max === this.value.length)\n                this.inputViewChild.nativeElement.disabled = true;\n            else\n                this.inputViewChild.nativeElement.disabled = this.disabled || false;\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule,SharedModule],\n    exports: [Chips,InputTextModule,SharedModule],\n    declarations: [Chips]\n})\nexport class ChipsModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}