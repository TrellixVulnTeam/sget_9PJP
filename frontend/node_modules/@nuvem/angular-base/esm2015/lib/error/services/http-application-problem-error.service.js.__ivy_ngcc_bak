import { Injectable, NgZone } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { NotificationProvider } from '../providers/notification.provider';
import { ApplicationProblemType } from '../types/application-problem.type';
import * as i0 from "@angular/core";
import * as i1 from "../providers/notification.provider";
/**
 * Serviço HttpApplicationProblemErrorService
 * @class
 */
export class HttpApplicationProblemErrorService {
    /**
     * Metodo construtor responsável por injetar serviço NotificationProvider
     * @param {NotificationProvider} notification
     * @constructor
     */
    constructor(notification, ngZone) {
        this.notification = notification;
        this.ngZone = ngZone;
    }
    /**
     * Metodo responsável pela identificação de erros
     * @public
     * @param {Error | HttpErrorResponse} error
     * @returns Boolean
     */
    shouldHandle(error) {
        return error instanceof HttpErrorResponse &&
            error.headers.get('Content-Type') === 'application/problem+json' &&
            error.error;
    }
    /**
     * Metodo pela adição de erros
     * @public
     * @param {HttpErrorResponse} error
     * @returns void
     */
    handle(error) {
        this.ngZone.run(() => {
            this.notification.addErrorProblem(new ApplicationProblemType(error.error.type, error.error.title, error.error.detail, error.error.status, error.error.instance));
        });
    }
}
HttpApplicationProblemErrorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpApplicationProblemErrorService_Factory() { return new HttpApplicationProblemErrorService(i0.ɵɵinject(i1.NotificationProvider), i0.ɵɵinject(i0.NgZone)); }, token: HttpApplicationProblemErrorService, providedIn: "root" });
HttpApplicationProblemErrorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HttpApplicationProblemErrorService.ctorParameters = () => [
    { type: NotificationProvider },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1hcHBsaWNhdGlvbi1wcm9ibGVtLWVycm9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9lcnJvci9zZXJ2aWNlcy9odHRwLWFwcGxpY2F0aW9uLXByb2JsZW0tZXJyb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBRzNFOzs7R0FHRztBQUlILE1BQU0sT0FBTyxrQ0FBa0M7SUFFM0M7Ozs7T0FJRztJQUNILFlBQW9CLFlBQWtDLEVBQVUsTUFBYztRQUExRCxpQkFBWSxHQUFaLFlBQVksQ0FBc0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUksQ0FBQztJQUVuRjs7Ozs7T0FLRztJQUNILFlBQVksQ0FBQyxLQUFnQztRQUN6QyxPQUFPLEtBQUssWUFBWSxpQkFBaUI7WUFDckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssMEJBQTBCO1lBQ2hFLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLEtBQXdCO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNqQixJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FDN0IsSUFBSSxzQkFBc0IsQ0FDdEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQ2hCLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUNqQixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDbEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ2xCLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7WUF4Q0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFWUSxvQkFBb0I7WUFGUixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL25vdGlmaWNhdGlvbi5wcm92aWRlcic7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblByb2JsZW1UeXBlIH0gZnJvbSAnLi4vdHlwZXMvYXBwbGljYXRpb24tcHJvYmxlbS50eXBlJztcbmltcG9ydCB7IEVycm9yUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZXJyb3IucHJvdmlkZXInO1xuXG4vKipcbiAqIFNlcnZpw6dvIEh0dHBBcHBsaWNhdGlvblByb2JsZW1FcnJvclNlcnZpY2VcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBIdHRwQXBwbGljYXRpb25Qcm9ibGVtRXJyb3JTZXJ2aWNlIGltcGxlbWVudHMgRXJyb3JQcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gY29uc3RydXRvciByZXNwb25zw6F2ZWwgcG9yIGluamV0YXIgc2VydmnDp28gTm90aWZpY2F0aW9uUHJvdmlkZXJcbiAgICAgKiBAcGFyYW0ge05vdGlmaWNhdGlvblByb3ZpZGVyfSBub3RpZmljYXRpb25cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uUHJvdmlkZXIsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHsgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHJlc3BvbnPDoXZlbCBwZWxhIGlkZW50aWZpY2HDp8OjbyBkZSBlcnJvc1xuICAgICAqIEBwdWJsaWMgXG4gICAgICogQHBhcmFtIHtFcnJvciB8IEh0dHBFcnJvclJlc3BvbnNlfSBlcnJvclxuICAgICAqIEByZXR1cm5zIEJvb2xlYW5cbiAgICAgKi9cbiAgICBzaG91bGRIYW5kbGUoZXJyb3I6IEVycm9yIHwgSHR0cEVycm9yUmVzcG9uc2UpOiBCb29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UgJiYgXG4gICAgICAgICAgICBlcnJvci5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgPT09ICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nICYmIFxuICAgICAgICAgICAgZXJyb3IuZXJyb3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0b2RvIHBlbGEgYWRpw6fDo28gZGUgZXJyb3NcbiAgICAgKiBAcHVibGljIFxuICAgICAqIEBwYXJhbSB7SHR0cEVycm9yUmVzcG9uc2V9IGVycm9yXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGhhbmRsZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHsgXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbi5hZGRFcnJvclByb2JsZW0oXG4gICAgICAgICAgICAgICAgbmV3IEFwcGxpY2F0aW9uUHJvYmxlbVR5cGUoXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmVycm9yLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmVycm9yLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvci5lcnJvci5kZXRhaWwsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmVycm9yLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IuaW5zdGFuY2UpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSJdfQ==