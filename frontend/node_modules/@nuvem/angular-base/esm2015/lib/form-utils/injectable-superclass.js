import { Injectable } from "@angular/core";
import { Subject, Subscription } from "rxjs";
/**
 * Use as the superclass for anything managed by angular's dependency injection for care-free use of `subscribeTo()`. It simply calls `unsubscribe()` during `ngOnDestroy()`. If you override `ngOnDestroy()` in your subclass, be sure to invoke the super implementation.
 *
 * ```ts
 * @Injectable()
 * // or @Component() (also consider DirectiveSuperclass)
 * // or @Directive() (also consider DirectiveSuperclass)
 * // or @Pipe()
 * class MyThing extends InjectableSuperclass {
 *   constructor(somethingObservable: Observable) {
 *     super();
 *     this.subscribeTo(somethingObservable);
 *   }
 *
 *   ngOnDestroy() {
 *     // if you override ngOnDestroy, be sure to call this too
 *     super.ngOnDestroy();
 *   }
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export class InjectableSuperclass {
    constructor() {
        this.subscriptions = new Subscription();
        this.destructionSubject = new Subject();
        this.destruction$ = this.destructionSubject.asObservable();
    }
    subscribeTo(observable, next, error, complete) {
        this.subscriptions.add(observable.subscribe(this.bind(next), this.bind(error), this.bind(complete)));
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
        this.subscriptions = new Subscription();
    }
    bind(fn) {
        return fn === null || fn === void 0 ? void 0 : fn.bind(this);
    }
    ngOnDestroy() {
        this.unsubscribe();
        this.destructionSubject.next();
        this.destructionSubject.complete();
    }
}
InjectableSuperclass.ɵfac = function InjectableSuperclass_Factory(t) { return new (t || InjectableSuperclass)(); };
InjectableSuperclass.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InjectableSuperclass, factory: InjectableSuperclass.ɵfac });
InjectableSuperclass.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InjectableSuperclass, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0YWJsZS1zdXBlcmNsYXNzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWJhc2Uvc3JjL2xpYi9mb3JtLXV0aWxzL2luamVjdGFibGUtc3VwZXJjbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBYyxPQUFPLEVBQUUsWUFBWSxFQUFrQixNQUFNLE1BQU0sQ0FBQztBQUV6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxNQUFNLE9BQWdCLG9CQUFvQjtBQUFHLElBUXpDO0FBQ0osUUFQWSxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDL0MsUUFHWSx1QkFBa0IsR0FBRyxJQUFJLE9BQU8sRUFBYSxDQUFDO0FBQzFELFFBRVEsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDbkUsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXLENBQ1AsVUFBeUIsRUFDekIsSUFBeUIsRUFDekIsS0FBNEIsRUFDNUIsUUFBcUI7QUFDM0IsUUFDTSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDbEIsVUFBVSxDQUFDLFNBQVMsQ0FDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUN0QixDQUNKLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFDZixRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDekMsUUFBUSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDaEQsSUFBSSxDQUFDO0FBQ0wsSUFDWSxJQUFJLENBQUMsRUFBd0I7QUFDekMsUUFBUSxPQUFPLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQzlCLElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzNCLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3ZDLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzNDLElBQUksQ0FBQztBQUNMO2dEQTFDQyxVQUFVOzRIQUNUO0FBQUM7OztnREFBK0M7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBTdWJzY3JpcHRpb24sIFVuc3Vic2NyaWJhYmxlIH0gZnJvbSBcInJ4anNcIjtcblxuLyoqXG4gKiBVc2UgYXMgdGhlIHN1cGVyY2xhc3MgZm9yIGFueXRoaW5nIG1hbmFnZWQgYnkgYW5ndWxhcidzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGZvciBjYXJlLWZyZWUgdXNlIG9mIGBzdWJzY3JpYmVUbygpYC4gSXQgc2ltcGx5IGNhbGxzIGB1bnN1YnNjcmliZSgpYCBkdXJpbmcgYG5nT25EZXN0cm95KClgLiBJZiB5b3Ugb3ZlcnJpZGUgYG5nT25EZXN0cm95KClgIGluIHlvdXIgc3ViY2xhc3MsIGJlIHN1cmUgdG8gaW52b2tlIHRoZSBzdXBlciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBgYGB0c1xuICogQEluamVjdGFibGUoKVxuICogLy8gb3IgQENvbXBvbmVudCgpIChhbHNvIGNvbnNpZGVyIERpcmVjdGl2ZVN1cGVyY2xhc3MpXG4gKiAvLyBvciBARGlyZWN0aXZlKCkgKGFsc28gY29uc2lkZXIgRGlyZWN0aXZlU3VwZXJjbGFzcylcbiAqIC8vIG9yIEBQaXBlKClcbiAqIGNsYXNzIE15VGhpbmcgZXh0ZW5kcyBJbmplY3RhYmxlU3VwZXJjbGFzcyB7XG4gKiAgIGNvbnN0cnVjdG9yKHNvbWV0aGluZ09ic2VydmFibGU6IE9ic2VydmFibGUpIHtcbiAqICAgICBzdXBlcigpO1xuICogICAgIHRoaXMuc3Vic2NyaWJlVG8oc29tZXRoaW5nT2JzZXJ2YWJsZSk7XG4gKiAgIH1cbiAqXG4gKiAgIG5nT25EZXN0cm95KCkge1xuICogICAgIC8vIGlmIHlvdSBvdmVycmlkZSBuZ09uRGVzdHJveSwgYmUgc3VyZSB0byBjYWxsIHRoaXMgdG9vXG4gKiAgICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbmplY3RhYmxlU3VwZXJjbGFzcyBpbXBsZW1lbnRzIFVuc3Vic2NyaWJhYmxlLCBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gICAgZGVzdHJ1Y3Rpb24kOiBPYnNlcnZhYmxlPHVuZGVmaW5lZD47XG5cbiAgICBwcml2YXRlIGRlc3RydWN0aW9uU3ViamVjdCA9IG5ldyBTdWJqZWN0PHVuZGVmaW5lZD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRlc3RydWN0aW9uJCA9IHRoaXMuZGVzdHJ1Y3Rpb25TdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHN1YnNjcmliZVRvPFQ+KFxuICAgICAgICBvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPFQ+LFxuICAgICAgICBuZXh0PzogKHZhbHVlOiBUKSA9PiB2b2lkLFxuICAgICAgICBlcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLFxuICAgICAgICBjb21wbGV0ZT86ICgpID0+IHZvaWQsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoXG4gICAgICAgICAgICBvYnNlcnZhYmxlLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQobmV4dCksXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kKGVycm9yKSxcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQoY29tcGxldGUpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJpbmQoZm4/OiAodmFsPzogYW55KSA9PiB2b2lkKSB7XG4gICAgICAgIHJldHVybiBmbj8uYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmRlc3RydWN0aW9uU3ViamVjdC5uZXh0KCk7XG4gICAgICAgIHRoaXMuZGVzdHJ1Y3Rpb25TdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19