{"ast":null,"code":"import _toConsumableArray from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, forwardRef, ChangeDetectorRef, Input, EventEmitter, ElementRef, Output, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { Subject } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"pOrganizationChartNode\", \"\"];\n\nfunction OrganizationChartNode_tbody_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.node.label);\n  }\n}\n\nfunction OrganizationChartNode_tbody_0_div_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c1 = function _c1(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction OrganizationChartNode_tbody_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, OrganizationChartNode_tbody_0_div_5_ng_container_1_Template, 1, 0, \"ng-container\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.chart.getTemplateForNode(ctx_r2.node))(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r2.node));\n  }\n}\n\nvar _c2 = function _c2(a0, a1) {\n  return {\n    \"pi-chevron-down\": a0,\n    \"pi-chevron-up\": a1\n  };\n};\n\nfunction OrganizationChartNode_tbody_0_a_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"a\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function OrganizationChartNode_tbody_0_a_6_Template_a_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r8.toggleNode($event, ctx_r8.node);\n    })(\"keydown.enter\", function OrganizationChartNode_tbody_0_a_6_Template_a_keydown_enter_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r10.toggleNode($event, ctx_r10.node);\n    });\n    ɵngcc0.ɵɵelement(1, \"i\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(1, _c2, ctx_r3.node.expanded, !ctx_r3.node.expanded));\n  }\n}\n\nfunction OrganizationChartNode_tbody_0_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"td\");\n    ɵngcc0.ɵɵelement(2, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r4.colspan);\n  }\n}\n\nvar _c3 = function _c3(a0) {\n  return {\n    \"p-organizationchart-line-top\": a0\n  };\n};\n\nfunction OrganizationChartNode_tbody_0_ng_container_12_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 11);\n    ɵngcc0.ɵɵtext(1, \"\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"td\", 12);\n    ɵngcc0.ɵɵtext(3, \"\\xA0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var first_r13 = ctx.first;\n    var last_r14 = ctx.last;\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c3, !first_r13));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c3, !last_r14));\n  }\n}\n\nfunction OrganizationChartNode_tbody_0_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, OrganizationChartNode_tbody_0_ng_container_12_ng_template_1_Template, 4, 6, \"ng-template\", 10);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r5.node.children);\n  }\n}\n\nfunction OrganizationChartNode_tbody_0_td_14_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 13);\n    ɵngcc0.ɵɵelement(1, \"table\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var child_r15 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"node\", child_r15);\n  }\n}\n\nvar _c4 = function _c4(a1, a2) {\n  return {\n    \"p-organizationchart-node-content\": true,\n    \"p-organizationchart-selectable-node\": a1,\n    \"p-highlight\": a2\n  };\n};\n\nfunction OrganizationChartNode_tbody_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"tbody\");\n    ɵngcc0.ɵɵelementStart(1, \"tr\");\n    ɵngcc0.ɵɵelementStart(2, \"td\");\n    ɵngcc0.ɵɵelementStart(3, \"div\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function OrganizationChartNode_tbody_0_Template_div_click_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      var ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.onNodeClick($event, ctx_r16.node);\n    });\n    ɵngcc0.ɵɵtemplate(4, OrganizationChartNode_tbody_0_div_4_Template, 2, 1, \"div\", 0);\n    ɵngcc0.ɵɵtemplate(5, OrganizationChartNode_tbody_0_div_5_Template, 2, 4, \"div\", 0);\n    ɵngcc0.ɵɵtemplate(6, OrganizationChartNode_tbody_0_a_6_Template, 2, 4, \"a\", 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(7, \"tr\", 3);\n    ɵngcc0.ɵɵelementStart(8, \"td\");\n    ɵngcc0.ɵɵelement(9, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(10, \"tr\", 3);\n    ɵngcc0.ɵɵtemplate(11, OrganizationChartNode_tbody_0_ng_container_11_Template, 3, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵtemplate(12, OrganizationChartNode_tbody_0_ng_container_12_Template, 2, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(13, \"tr\", 5);\n    ɵngcc0.ɵɵtemplate(14, OrganizationChartNode_tbody_0_td_14_Template, 2, 1, \"td\", 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r0.colspan);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(ctx_r0.node.styleClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(17, _c4, ctx_r0.chart.selectionMode && ctx_r0.node.selectable !== false, ctx_r0.isSelected()));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.chart.getTemplateForNode(ctx_r0.node));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.chart.getTemplateForNode(ctx_r0.node));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.leaf);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", !ctx_r0.leaf && ctx_r0.node.expanded ? \"p-organizationchart-node-visible\" : \"p-organizationchart-node-hidden\")(\"@childState\", \"in\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r0.colspan);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", !ctx_r0.leaf && ctx_r0.node.expanded ? \"p-organizationchart-node-visible\" : \"p-organizationchart-node-hidden\")(\"@childState\", \"in\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.node.children && ctx_r0.node.children.length === 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.node.children && ctx_r0.node.children.length > 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", !ctx_r0.leaf && ctx_r0.node.expanded ? \"p-organizationchart-node-visible\" : \"p-organizationchart-node-hidden\")(\"@childState\", \"in\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.node.children);\n  }\n}\n\nfunction OrganizationChart_table_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"table\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r0.root);\n  }\n}\n\nvar _c5 = function _c5(a1) {\n  return {\n    \"p-organizationchart p-component\": true,\n    \"p-organizationchart-preservespace\": a1\n  };\n};\n\nvar OrganizationChartNode = /*#__PURE__*/function () {\n  function OrganizationChartNode(chart, cd) {\n    var _this = this;\n\n    _classCallCheck(this, OrganizationChartNode);\n\n    this.cd = cd;\n    this.chart = chart;\n    this.subscription = this.chart.selectionSource$.subscribe(function () {\n      _this.cd.markForCheck();\n    });\n  }\n\n  _createClass(OrganizationChartNode, [{\n    key: \"leaf\",\n    get: function get() {\n      return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);\n    }\n  }, {\n    key: \"colspan\",\n    get: function get() {\n      return this.node.children && this.node.children.length ? this.node.children.length * 2 : null;\n    }\n  }, {\n    key: \"onNodeClick\",\n    value: function onNodeClick(event, node) {\n      this.chart.onNodeClick(event, node);\n    }\n  }, {\n    key: \"toggleNode\",\n    value: function toggleNode(event, node) {\n      node.expanded = !node.expanded;\n      if (node.expanded) this.chart.onNodeExpand.emit({\n        originalEvent: event,\n        node: this.node\n      });else this.chart.onNodeCollapse.emit({\n        originalEvent: event,\n        node: this.node\n      });\n      event.preventDefault();\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      return this.chart.isSelected(this.node);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n  }]);\n\n  return OrganizationChartNode;\n}();\n\nOrganizationChartNode.ɵfac = function OrganizationChartNode_Factory(t) {\n  return new (t || OrganizationChartNode)(ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n    return OrganizationChart;\n  })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nOrganizationChartNode.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: OrganizationChartNode,\n  selectors: [[\"\", \"pOrganizationChartNode\", \"\"]],\n  inputs: {\n    node: \"node\",\n    root: \"root\",\n    first: \"first\",\n    last: \"last\"\n  },\n  attrs: _c0,\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [3, \"ngClass\", \"click\"], [\"tabindex\", \"0\", \"class\", \"p-node-toggler\", 3, \"click\", \"keydown.enter\", 4, \"ngIf\"], [1, \"p-organizationchart-lines\", 3, \"ngClass\"], [1, \"p-organizationchart-line-down\"], [1, \"p-organizationchart-nodes\", 3, \"ngClass\"], [\"colspan\", \"2\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"tabindex\", \"0\", 1, \"p-node-toggler\", 3, \"click\", \"keydown.enter\"], [1, \"p-node-toggler-icon\", \"pi\", 3, \"ngClass\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"p-organizationchart-line-left\", 3, \"ngClass\"], [1, \"p-organizationchart-line-right\", 3, \"ngClass\"], [\"colspan\", \"2\"], [\"pOrganizationChartNode\", \"\", 1, \"p-organizationchart-table\", 3, \"node\"]],\n  template: function OrganizationChartNode_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, OrganizationChartNode_tbody_0_Template, 15, 20, \"tbody\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.node);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgTemplateOutlet, OrganizationChartNode],\n  styles: [\".p-organizationchart-table{border-collapse:separate;border-spacing:0;margin:0 auto}.p-organizationchart-table>tbody>tr>td{padding:0 .75rem;text-align:center;vertical-align:top}.p-organizationchart-node-content{display:inline-block;position:relative}.p-organizationchart-node-content .p-node-toggler{-ms-user-select:none;-webkit-user-select:none;bottom:-.75rem;cursor:pointer;height:1.5rem;left:50%;margin-left:-.75rem;position:absolute;user-select:none;width:1.5rem;z-index:2}.p-organizationchart-node-content .p-node-toggler .p-node-toggler-icon{position:relative;top:.25rem}.p-organizationchart-line-down{height:20px;margin:0 auto;width:1px}.p-organizationchart-line-left,.p-organizationchart-line-right{border-radius:0}.p-organizationchart-selectable-node{cursor:pointer}.p-organizationchart .p-organizationchart-node-hidden{display:none}.p-organizationchart-preservespace .p-organizationchart-node-hidden{display:inherit;visibility:hidden}\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('childState', [state('in', style({\n      opacity: 1\n    })), transition('void => *', [style({\n      opacity: 0\n    }), animate(150)]), transition('* => void', [animate(150, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\nOrganizationChartNode.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(function () {\n        return OrganizationChart;\n      })]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nOrganizationChartNode.propDecorators = {\n  node: [{\n    type: Input\n  }],\n  root: [{\n    type: Input\n  }],\n  first: [{\n    type: Input\n  }],\n  last: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrganizationChartNode, [{\n    type: Component,\n    args: [{\n      selector: '[pOrganizationChartNode]',\n      template: \"\\n        <tbody *ngIf=\\\"node\\\">\\n            <tr>\\n                <td [attr.colspan]=\\\"colspan\\\">\\n                    <div [class]=\\\"node.styleClass\\\" [ngClass]=\\\"{'p-organizationchart-node-content': true, 'p-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'p-highlight':isSelected()}\\\"\\n                        (click)=\\\"onNodeClick($event,node)\\\">\\n                        <div *ngIf=\\\"!chart.getTemplateForNode(node)\\\">{{node.label}}</div>\\n                        <div *ngIf=\\\"chart.getTemplateForNode(node)\\\">\\n                            <ng-container *ngTemplateOutlet=\\\"chart.getTemplateForNode(node); context: {$implicit: node}\\\"></ng-container>\\n                        </div>\\n                        <a *ngIf=\\\"!leaf\\\" tabindex=\\\"0\\\" class=\\\"p-node-toggler\\\" (click)=\\\"toggleNode($event, node)\\\" (keydown.enter)=\\\"toggleNode($event, node)\\\">\\n                            <i class=\\\"p-node-toggler-icon pi\\\" [ngClass]=\\\"{'pi-chevron-down': node.expanded, 'pi-chevron-up': !node.expanded}\\\"></i>\\n                        </a>\\n                    </div>\\n                </td>\\n            </tr>\\n            <tr [ngClass]=\\\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\\\" class=\\\"p-organizationchart-lines\\\" [@childState]=\\\"'in'\\\">\\n                <td [attr.colspan]=\\\"colspan\\\">\\n                    <div class=\\\"p-organizationchart-line-down\\\"></div>\\n                </td>\\n            </tr>\\n            <tr [ngClass]=\\\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\\\" class=\\\"p-organizationchart-lines\\\" [@childState]=\\\"'in'\\\">\\n                <ng-container *ngIf=\\\"node.children && node.children.length === 1\\\">\\n                    <td [attr.colspan]=\\\"colspan\\\">\\n                        <div class=\\\"p-organizationchart-line-down\\\"></div>\\n                    </td>\\n                </ng-container>\\n                <ng-container *ngIf=\\\"node.children && node.children.length > 1\\\">\\n                    <ng-template ngFor let-child [ngForOf]=\\\"node.children\\\" let-first=\\\"first\\\" let-last=\\\"last\\\">\\n                        <td class=\\\"p-organizationchart-line-left\\\" [ngClass]=\\\"{'p-organizationchart-line-top':!first}\\\">&nbsp;</td>\\n                        <td class=\\\"p-organizationchart-line-right\\\" [ngClass]=\\\"{'p-organizationchart-line-top':!last}\\\">&nbsp;</td>\\n                    </ng-template>\\n                </ng-container>\\n            </tr>\\n            <tr [ngClass]=\\\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\\\" class=\\\"p-organizationchart-nodes\\\" [@childState]=\\\"'in'\\\">\\n                <td *ngFor=\\\"let child of node.children\\\" colspan=\\\"2\\\">\\n                    <table class=\\\"p-organizationchart-table\\\" pOrganizationChartNode [node]=\\\"child\\\"></table>\\n                </td>\\n            </tr>\\n        </tbody>\\n    \",\n      animations: [trigger('childState', [state('in', style({\n        opacity: 1\n      })), transition('void => *', [style({\n        opacity: 0\n      }), animate(150)]), transition('* => void', [animate(150, style({\n        opacity: 0\n      }))])])],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".p-organizationchart-table{border-collapse:separate;border-spacing:0;margin:0 auto}.p-organizationchart-table>tbody>tr>td{padding:0 .75rem;text-align:center;vertical-align:top}.p-organizationchart-node-content{display:inline-block;position:relative}.p-organizationchart-node-content .p-node-toggler{-ms-user-select:none;-webkit-user-select:none;bottom:-.75rem;cursor:pointer;height:1.5rem;left:50%;margin-left:-.75rem;position:absolute;user-select:none;width:1.5rem;z-index:2}.p-organizationchart-node-content .p-node-toggler .p-node-toggler-icon{position:relative;top:.25rem}.p-organizationchart-line-down{height:20px;margin:0 auto;width:1px}.p-organizationchart-line-left,.p-organizationchart-line-right{border-radius:0}.p-organizationchart-selectable-node{cursor:pointer}.p-organizationchart .p-organizationchart-node-hidden{display:none}.p-organizationchart-preservespace .p-organizationchart-node-hidden{display:inherit;visibility:hidden}\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return OrganizationChart;\n        })]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    node: [{\n      type: Input\n    }],\n    root: [{\n      type: Input\n    }],\n    first: [{\n      type: Input\n    }],\n    last: [{\n      type: Input\n    }]\n  });\n})();\n\nvar OrganizationChart = /*#__PURE__*/function () {\n  function OrganizationChart(el, cd) {\n    _classCallCheck(this, OrganizationChart);\n\n    this.el = el;\n    this.cd = cd;\n    this.preserveSpace = true;\n    this.selectionChange = new EventEmitter();\n    this.onNodeSelect = new EventEmitter();\n    this.onNodeUnselect = new EventEmitter();\n    this.onNodeExpand = new EventEmitter();\n    this.onNodeCollapse = new EventEmitter();\n    this.selectionSource = new Subject();\n    this.selectionSource$ = this.selectionSource.asObservable();\n  }\n\n  _createClass(OrganizationChart, [{\n    key: \"selection\",\n    get: function get() {\n      return this._selection;\n    },\n    set: function set(val) {\n      this._selection = val;\n      if (this.initialized) this.selectionSource.next();\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return this.value && this.value.length ? this.value[0] : null;\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      if (this.templates.length) {\n        this.templateMap = {};\n      }\n\n      this.templates.forEach(function (item) {\n        _this2.templateMap[item.getType()] = item.template;\n      });\n      this.initialized = true;\n    }\n  }, {\n    key: \"getTemplateForNode\",\n    value: function getTemplateForNode(node) {\n      if (this.templateMap) return node.type ? this.templateMap[node.type] : this.templateMap['default'];else return null;\n    }\n  }, {\n    key: \"onNodeClick\",\n    value: function onNodeClick(event, node) {\n      var eventTarget = event.target;\n\n      if (eventTarget.className && (eventTarget.className.indexOf('p-node-toggler') !== -1 || eventTarget.className.indexOf('p-node-toggler-icon') !== -1)) {\n        return;\n      } else if (this.selectionMode) {\n        if (node.selectable === false) {\n          return;\n        }\n\n        var index = this.findIndexInSelection(node);\n        var selected = index >= 0;\n\n        if (this.selectionMode === 'single') {\n          if (selected) {\n            this.selection = null;\n            this.onNodeUnselect.emit({\n              originalEvent: event,\n              node: node\n            });\n          } else {\n            this.selection = node;\n            this.onNodeSelect.emit({\n              originalEvent: event,\n              node: node\n            });\n          }\n        } else if (this.selectionMode === 'multiple') {\n          if (selected) {\n            this.selection = this.selection.filter(function (val, i) {\n              return i != index;\n            });\n            this.onNodeUnselect.emit({\n              originalEvent: event,\n              node: node\n            });\n          } else {\n            this.selection = [].concat(_toConsumableArray(this.selection || []), [node]);\n            this.onNodeSelect.emit({\n              originalEvent: event,\n              node: node\n            });\n          }\n        }\n\n        this.selectionChange.emit(this.selection);\n        this.selectionSource.next();\n      }\n    }\n  }, {\n    key: \"findIndexInSelection\",\n    value: function findIndexInSelection(node) {\n      var index = -1;\n\n      if (this.selectionMode && this.selection) {\n        if (this.selectionMode === 'single') {\n          index = this.selection == node ? 0 : -1;\n        } else if (this.selectionMode === 'multiple') {\n          for (var i = 0; i < this.selection.length; i++) {\n            if (this.selection[i] == node) {\n              index = i;\n              break;\n            }\n          }\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(node) {\n      return this.findIndexInSelection(node) != -1;\n    }\n  }]);\n\n  return OrganizationChart;\n}();\n\nOrganizationChart.ɵfac = function OrganizationChart_Factory(t) {\n  return new (t || OrganizationChart)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nOrganizationChart.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: OrganizationChart,\n  selectors: [[\"p-organizationChart\"]],\n  contentQueries: function OrganizationChart_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  inputs: {\n    preserveSpace: \"preserveSpace\",\n    selection: \"selection\",\n    value: \"value\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    selectionMode: \"selectionMode\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    onNodeSelect: \"onNodeSelect\",\n    onNodeUnselect: \"onNodeUnselect\",\n    onNodeExpand: \"onNodeExpand\",\n    onNodeCollapse: \"onNodeCollapse\"\n  },\n  decls: 2,\n  vars: 7,\n  consts: [[3, \"ngStyle\", \"ngClass\"], [\"class\", \"p-organizationchart-table\", \"pOrganizationChartNode\", \"\", 3, \"node\", 4, \"ngIf\"], [\"pOrganizationChartNode\", \"\", 1, \"p-organizationchart-table\", 3, \"node\"]],\n  template: function OrganizationChart_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, OrganizationChart_table_1_Template, 1, 1, \"table\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(5, _c5, ctx.preserveSpace));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.root);\n    }\n  },\n  directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass, ɵngcc1.NgIf, OrganizationChartNode],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nOrganizationChart.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nOrganizationChart.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  selectionMode: [{\n    type: Input\n  }],\n  preserveSpace: [{\n    type: Input\n  }],\n  selection: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  onNodeSelect: [{\n    type: Output\n  }],\n  onNodeUnselect: [{\n    type: Output\n  }],\n  onNodeExpand: [{\n    type: Output\n  }],\n  onNodeCollapse: [{\n    type: Output\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrganizationChart, [{\n    type: Component,\n    args: [{\n      selector: 'p-organizationChart',\n      template: \"\\n        <div [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\" [ngClass]=\\\"{'p-organizationchart p-component': true, 'p-organizationchart-preservespace': preserveSpace}\\\">\\n            <table class=\\\"p-organizationchart-table\\\" pOrganizationChartNode [node]=\\\"root\\\" *ngIf=\\\"root\\\"></table>\\n        </div>\\n    \",\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    preserveSpace: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    selection: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\nvar OrganizationChartModule = function OrganizationChartModule() {\n  _classCallCheck(this, OrganizationChartModule);\n};\n\nOrganizationChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: OrganizationChartModule\n});\nOrganizationChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function OrganizationChartModule_Factory(t) {\n    return new (t || OrganizationChartModule)();\n  },\n  imports: [[CommonModule], SharedModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OrganizationChartModule, {\n    declarations: function declarations() {\n      return [OrganizationChart, OrganizationChartNode];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [OrganizationChart, SharedModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrganizationChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [OrganizationChart, SharedModule],\n      declarations: [OrganizationChart, OrganizationChartNode]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { OrganizationChart, OrganizationChartModule, OrganizationChartNode };","map":{"version":3,"sources":["../../src/app/components/organizationchart/organizationchart.ts","../../src/app/components/organizationchart/primeng-organizationchart.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,AfterContentInit,EventEmitter,TemplateRef,\n        Inject,forwardRef,ContentChildren,QueryList,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng/api';\nimport {TreeNode} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\n\n@Component({\n    selector: '[pOrganizationChartNode]',\n    template: `\n        <tbody *ngIf=\"node\">\n            <tr>\n                <td [attr.colspan]=\"colspan\">\n                    <div [class]=\"node.styleClass\" [ngClass]=\"{'p-organizationchart-node-content': true, 'p-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'p-highlight':isSelected()}\"\n                        (click)=\"onNodeClick($event,node)\">\n                        <div *ngIf=\"!chart.getTemplateForNode(node)\">{{node.label}}</div>\n                        <div *ngIf=\"chart.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"chart.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                        </div>\n                        <a *ngIf=\"!leaf\" tabindex=\"0\" class=\"p-node-toggler\" (click)=\"toggleNode($event, node)\" (keydown.enter)=\"toggleNode($event, node)\">\n                            <i class=\"p-node-toggler-icon pi\" [ngClass]=\"{'pi-chevron-down': node.expanded, 'pi-chevron-up': !node.expanded}\"></i>\n                        </a>\n                    </div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <td [attr.colspan]=\"colspan\">\n                    <div class=\"p-organizationchart-line-down\"></div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <ng-container *ngIf=\"node.children && node.children.length === 1\">\n                    <td [attr.colspan]=\"colspan\">\n                        <div class=\"p-organizationchart-line-down\"></div>\n                    </td>\n                </ng-container>\n                <ng-container *ngIf=\"node.children && node.children.length > 1\">\n                    <ng-template ngFor let-child [ngForOf]=\"node.children\" let-first=\"first\" let-last=\"last\">\n                        <td class=\"p-organizationchart-line-left\" [ngClass]=\"{'p-organizationchart-line-top':!first}\">&nbsp;</td>\n                        <td class=\"p-organizationchart-line-right\" [ngClass]=\"{'p-organizationchart-line-top':!last}\">&nbsp;</td>\n                    </ng-template>\n                </ng-container>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-nodes\" [@childState]=\"'in'\">\n                <td *ngFor=\"let child of node.children\" colspan=\"2\">\n                    <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"child\"></table>\n                </td>\n            </tr>\n        </tbody>\n    `,\n    animations: [\n        trigger('childState', [\n            state('in', style({opacity: 1})),\n           transition('void => *', [\n             style({opacity: 0}),\n             animate(150)\n           ]),\n           transition('* => void', [\n             animate(150, style({opacity:0}))\n           ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./organizationchart.css']\n})\nexport class OrganizationChartNode implements OnDestroy{\n\n    @Input() node: TreeNode;\n        \n    @Input() root: boolean;\n    \n    @Input() first: boolean;\n    \n    @Input() last: boolean;\n\n    chart: OrganizationChart;\n\n    subscription: Subscription;\n        \n    constructor(@Inject(forwardRef(() => OrganizationChart)) chart, public cd: ChangeDetectorRef) {\n        this.chart = chart as OrganizationChart;\n        this.subscription = this.chart.selectionSource$.subscribe(() =>{\n            this.cd.markForCheck();\n        })\n    }\n                \n    get leaf(): boolean {\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\n    }\n    \n    get colspan() {\n        return (this.node.children && this.node.children.length) ? this.node.children.length * 2: null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        this.chart.onNodeClick(event, node)\n    }\n    \n    toggleNode(event: Event, node: TreeNode) {\n        node.expanded = !node.expanded;\n        if (node.expanded)\n            this.chart.onNodeExpand.emit({originalEvent: event, node: this.node});\n        else\n            this.chart.onNodeCollapse.emit({originalEvent: event, node: this.node});\n            \n        event.preventDefault();\n    }\n    \n    isSelected() {\n        return this.chart.isSelected(this.node);\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n\n@Component({\n    selector: 'p-organizationChart',\n    template: `\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'p-organizationchart p-component': true, 'p-organizationchart-preservespace': preserveSpace}\">\n            <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"root\" *ngIf=\"root\"></table>\n        </div>\n    `,\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OrganizationChart implements AfterContentInit {\n            \n    @Input() value: TreeNode[];            \n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() selectionMode: string;\n    \n    @Input() preserveSpace: boolean = true;\n    \n    @Input()  get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val:any) {\n        this._selection = val;\n        \n        if (this.initialized)\n            this.selectionSource.next();\n    }\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public templateMap: any;\n\n    private selectionSource = new Subject<any>();\n\n    _selection: any;\n\n    initialized: boolean;\n\n    selectionSource$ = this.selectionSource.asObservable();\n    \n    constructor(public el: ElementRef, public cd:ChangeDetectorRef) {}\n    \n    get root(): TreeNode {\n        return this.value && this.value.length ? this.value[0] : null;\n    }\n    \n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n        \n        this.templates.forEach((item) => {\n            this.templateMap[item.getType()] = item.template;\n        });\n\n        this.initialized = true;\n    }\n    \n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n        \n        if (eventTarget.className && (eventTarget.className.indexOf('p-node-toggler') !== -1 || eventTarget.className.indexOf('p-node-toggler-icon') !== -1)) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n            \n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n            \n            if (this.selectionMode === 'single') {\n                if (selected) {\n                    this.selection = null;\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = node;\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else if (this.selectionMode === 'multiple') {\n                if (selected) {\n                    this.selection = this.selection.filter((val,i) => i!=index);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = [...this.selection||[],node];\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            \n            this.selectionChange.emit(this.selection);\n            this.selectionSource.next();\n        }\n    }\n    \n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.selectionMode === 'single') {\n                index = (this.selection == node) ? 0 : - 1;\n            }\n            else if (this.selectionMode === 'multiple') {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    if (this.selection[i] == node) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n    \n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;         \n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [OrganizationChart,SharedModule],\n    declarations: [OrganizationChart,OrganizationChartNode]\n})\nexport class OrganizationChartModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}