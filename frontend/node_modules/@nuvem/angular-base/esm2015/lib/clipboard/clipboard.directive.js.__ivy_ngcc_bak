import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { ClipboardService } from './clipboard.service';
/**
 * Diretiva que exp√µe seletor para o uso do clipbord
 * @class
 */
export class ClipboardDirective {
    /**
     * constructor method
     * @param {ClipboardService} service
     * @constructor
     */
    constructor(service) {
        this.service = service;
        /**
         * onClipboard variable
         * @type {EventEmitter<boolean>}
         */
        this.onClipboard = new EventEmitter();
    }
    /**
     * copy method
     * @event click
     * @returns void
     */
    copy() {
        try {
            this.service.copy(this.clipboard);
            this.onClipboard.emit(true);
        }
        catch (e) {
            this.onClipboard.emit(false);
            throw e;
        }
    }
}
ClipboardDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clipboard]'
            },] }
];
ClipboardDirective.ctorParameters = () => [
    { type: ClipboardService }
];
ClipboardDirective.propDecorators = {
    clipboard: [{ type: Input }],
    onClipboard: [{ type: Output }],
    copy: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2NsaXBib2FyZC9jbGlwYm9hcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS3ZEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFnQjNCOzs7O09BSUc7SUFDSCxZQUFvQixPQUF5QjtRQUF6QixZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQVo3Qzs7O1dBR0c7UUFFSCxnQkFBVyxHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO0lBT2pCLENBQUM7SUFHakQ7Ozs7T0FJRztJQUNILElBQUk7UUFDQSxJQUFJO1lBQ0EsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsQ0FBQztTQUNYO0lBQ0wsQ0FBQzs7O1lBNUNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTthQUMxQjs7O1lBSlEsZ0JBQWdCOzs7d0JBZXBCLEtBQUs7MEJBT0wsTUFBTTttQkFVTixZQUFZLFNBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2xpcGJvYXJkU2VydmljZSB9IGZyb20gJy4vY2xpcGJvYXJkLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tjbGlwYm9hcmRdJ1xufSlcbi8qKlxuICogRGlyZXRpdmEgcXVlIGV4cMO1ZSBzZWxldG9yIHBhcmEgbyB1c28gZG8gY2xpcGJvcmRcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgQ2xpcGJvYXJkRGlyZWN0aXZlIHtcblxuICAgIC8qKlxuICAgICAqIGNsaXBib2FyZCB2YXJpYWJsZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBjbGlwYm9hcmQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIG9uQ2xpcGJvYXJkIHZhcmlhYmxlXG4gICAgICogQHR5cGUge0V2ZW50RW1pdHRlcjxib29sZWFuPn1cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBvbkNsaXBib2FyZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgbWV0aG9kXG4gICAgICogQHBhcmFtIHtDbGlwYm9hcmRTZXJ2aWNlfSBzZXJ2aWNlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBDbGlwYm9hcmRTZXJ2aWNlKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIC8qKlxuICAgICAqIGNvcHkgbWV0aG9kXG4gICAgICogQGV2ZW50IGNsaWNrXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGNvcHkoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZpY2UuY29weSh0aGlzLmNsaXBib2FyZCk7XG4gICAgICAgICAgICB0aGlzLm9uQ2xpcGJvYXJkLmVtaXQodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMub25DbGlwYm9hcmQuZW1pdChmYWxzZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19