import { Injectable, Inject } from '@angular/core';
import { AUTH_CONFIG } from '../config/auth-config';
import { BehaviorSubject } from 'rxjs';
import { Authentication } from './authentication';
import { HttpClient } from '@angular/common/http';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
import * as i2 from "@angular/common/http";
export function isAuthenticated(config) {
    return null !== config.storage.getItem(config.userStorageIndex);
}
;
export function redirect(config) {
    window.location.href = config.loginUrl;
    ;
}
;
/**
 * Serviço de autenticação
 * @class
 */
export class AuthenticationService extends Authentication {
    constructor(config, http) {
        super();
        this.config = config;
        this.http = http;
        this.loginNotifications = new BehaviorSubject(this.getUser());
    }
    /**
     * Método para verificar se o usuário esta autenticado na aplicação
     * @returns boolean
     * @public
     */
    isAuthenticated() {
        return isAuthenticated(this.config);
    }
    /**
     * Método responsável por realizar redirecionamentos
     * @returns void
     * @public
     */
    redirect() {
        redirect(this.config);
    }
    /**
     * Método responsável pelo login da aplicação
     * @public
     * @param {User} user
     * @returns Observable<any>
     */
    login() {
        this.getUserDetails()
            .subscribe((user) => {
            this.setUser(user);
            this.loginNotifications.next(user);
        });
    }
    /**
     * Método responsável pelo logou da aplicação
     * @public
     * @returns void
     */
    logout() {
        this.loginNotifications.next(null);
        this.config.storage.removeItem(this.config.userStorageIndex);
        window.location.href = this.config.logoutUrl;
    }
    /**
     * Método responsável por obter os dados do usuário logado
     * @public
     * @returns Observable<any>
     */
    getUserDetails() {
        return this.http.get(this.config.baseUrl + this.config.detailsUrl);
    }
    setUser(user) {
        this.config.storage.setItem(this.config.userStorageIndex, JSON.stringify(user));
    }
    getUser() {
        return JSON.parse(this.config.storage.getItem(this.config.userStorageIndex));
    }
    getLoginNotifications() {
        return this.loginNotifications.pipe(filter((value) => value != null));
    }
}
AuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticationService_Factory() { return new AuthenticationService(i0.ɵɵinject(i1.AUTH_CONFIG), i0.ɵɵinject(i2.HttpClient)); }, token: AuthenticationService, providedIn: "root" });
AuthenticationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuthenticationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_CONFIG,] }] },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL3NlY3VyaXR5L2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hFLE9BQU8sRUFBdUIsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFPLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRTdDLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBa0I7SUFDOUMsT0FBTyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUFBLENBQUM7QUFFRixNQUFNLFVBQVUsUUFBUSxDQUFDLE1BQWtCO0lBQ3ZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFBQSxDQUFDO0FBQzVDLENBQUM7QUFBQSxDQUFDO0FBRUY7OztHQUdHO0FBSUgsTUFBTSxPQUFPLHFCQUFzQyxTQUFRLGNBQWlCO0lBSXhFLFlBQXlDLE1BQWtCLEVBQVUsSUFBZ0I7UUFDakYsS0FBSyxFQUFFLENBQUM7UUFENkIsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFGckYsdUJBQWtCLEdBQTBCLElBQUksZUFBZSxDQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBSXRGLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsZUFBZTtRQUNYLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFFBQVE7UUFDSixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUs7UUFDRCxJQUFJLENBQUMsY0FBYyxFQUFFO2FBQ2hCLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTTtRQUNGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTyxPQUFPLENBQUMsSUFBTztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7OztZQXpFSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs0Q0FLZ0IsTUFBTSxTQUFDLFdBQVc7WUF0QjFCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0aENvbmZpZywgQVVUSF9DT05GSUcgfSBmcm9tICcuLi9jb25maWcvYXV0aC1jb25maWcnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgdGFwLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoY29uZmlnOiBBdXRoQ29uZmlnKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG51bGwgIT09IGNvbmZpZy5zdG9yYWdlLmdldEl0ZW0oY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZGlyZWN0KGNvbmZpZzogQXV0aENvbmZpZyk6IHZvaWQge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY29uZmlnLmxvZ2luVXJsOztcbn07XG5cbi8qKlxuICogU2VydmnDp28gZGUgYXV0ZW50aWNhw6fDo29cbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvblNlcnZpY2U8VSBleHRlbmRzIFVzZXI+IGV4dGVuZHMgQXV0aGVudGljYXRpb248VT4ge1xuXG4gICAgbG9naW5Ob3RpZmljYXRpb25zOiBCZWhhdmlvclN1YmplY3Q8VXNlcj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFVzZXI+KHRoaXMuZ2V0VXNlcigpKTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoQVVUSF9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBBdXRoQ29uZmlnLCBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHBhcmEgdmVyaWZpY2FyIHNlIG8gdXN1w6FyaW8gZXN0YSBhdXRlbnRpY2FkbyBuYSBhcGxpY2HDp8Ojb1xuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaXNBdXRoZW50aWNhdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNBdXRoZW50aWNhdGVkKHRoaXMuY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmVhbGl6YXIgcmVkaXJlY2lvbmFtZW50b3NcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHJlZGlyZWN0KCkge1xuICAgICAgICByZWRpcmVjdCh0aGlzLmNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcGVsbyBsb2dpbiBkYSBhcGxpY2HDp8Ojb1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1VzZXJ9IHVzZXJcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPGFueT5cbiAgICAgKi9cbiAgICBsb2dpbigpIHtcbiAgICAgICAgdGhpcy5nZXRVc2VyRGV0YWlscygpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRVc2VyKHVzZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9naW5Ob3RpZmljYXRpb25zLm5leHQodXNlcilcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBlbG8gbG9nb3UgZGEgYXBsaWNhw6fDo29cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGxvZ291dCgpIHtcbiAgICAgICAgdGhpcy5sb2dpbk5vdGlmaWNhdGlvbnMubmV4dChudWxsKTtcbiAgICAgICAgdGhpcy5jb25maWcuc3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRoaXMuY29uZmlnLmxvZ291dFVybDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3Igb2J0ZXIgb3MgZGFkb3MgZG8gdXN1w6FyaW8gbG9nYWRvXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8YW55PlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVc2VyRGV0YWlscygpOiBPYnNlcnZhYmxlPFU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VT4odGhpcy5jb25maWcuYmFzZVVybCArIHRoaXMuY29uZmlnLmRldGFpbHNVcmwpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0VXNlcih1c2VyOiBVKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmNvbmZpZy51c2VyU3RvcmFnZUluZGV4LCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgfVxuXG4gICAgZ2V0VXNlcigpOiBVIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5jb25maWcuc3RvcmFnZS5nZXRJdGVtKHRoaXMuY29uZmlnLnVzZXJTdG9yYWdlSW5kZXgpKTtcbiAgICB9XG5cbiAgICBnZXRMb2dpbk5vdGlmaWNhdGlvbnMoKTogT2JzZXJ2YWJsZTxVc2VyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvZ2luTm90aWZpY2F0aW9ucy5waXBlKGZpbHRlcigodmFsdWUpID0+IHZhbHVlICE9IG51bGwpKTtcbiAgICB9XG5cbn1cbiJdfQ==