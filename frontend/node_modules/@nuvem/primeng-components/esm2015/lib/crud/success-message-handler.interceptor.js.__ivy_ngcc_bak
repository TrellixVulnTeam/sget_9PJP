import { Injectable } from '@angular/core';
import { HTTP_INTERCEPTORS, HttpResponse } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { PageNotificationService } from '../page-notification/page-notification.service';
import * as i0 from "@angular/core";
import * as i1 from "../page-notification/page-notification.service";
var STATUS;
(function (STATUS) {
    STATUS[STATUS["OK"] = 200] = "OK";
    STATUS[STATUS["CREATED"] = 201] = "CREATED";
})(STATUS || (STATUS = {}));
export class SuccessMessageHandlerInterceptor {
    constructor(notification) {
        this.notification = notification;
    }
    intercept(req, next) {
        return next.handle(req).pipe(tap((event) => {
            if (event instanceof HttpResponse) {
                if (event.headers.has("X-nuvem-alert")) {
                    this.notification.addSuccessMessage(event.headers.get("X-nuvem-alert"));
                }
                else if ((event.status === STATUS.OK || event.status === STATUS.CREATED) && req.method != "GET") {
                    this.notification.addSuccessMessage("Operação realizada com sucesso!");
                }
            }
        }));
    }
}
SuccessMessageHandlerInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function SuccessMessageHandlerInterceptor_Factory() { return new SuccessMessageHandlerInterceptor(i0.ɵɵinject(i1.PageNotificationService)); }, token: SuccessMessageHandlerInterceptor, providedIn: "root" });
SuccessMessageHandlerInterceptor.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
SuccessMessageHandlerInterceptor.ctorParameters = () => [
    { type: PageNotificationService }
];
export const httpInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: SuccessMessageHandlerInterceptor, multi: true },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VjY2Vzcy1tZXNzYWdlLWhhbmRsZXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wcmltZW5nLWNvbXBvbmVudHMvc3JjL2xpYi9jcnVkL3N1Y2Nlc3MtbWVzc2FnZS1oYW5kbGVyLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNpRCxpQkFBaUIsRUFBRSxZQUFZLEVBQ3RGLE1BQU0sc0JBQXNCLENBQUM7QUFHOUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOzs7QUFFekYsSUFBSyxNQUErQjtBQUFwQyxXQUFLLE1BQU07SUFBRyxpQ0FBTSxDQUFBO0lBQUUsMkNBQVcsQ0FBQTtBQUFFLENBQUMsRUFBL0IsTUFBTSxLQUFOLE1BQU0sUUFBeUI7QUFHcEMsTUFBTSxPQUFPLGdDQUFnQztJQUUzQyxZQUFvQixZQUFxQztRQUFyQyxpQkFBWSxHQUFaLFlBQVksQ0FBeUI7SUFFekQsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBQ2hELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ3hCLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ1osSUFBSSxLQUFLLFlBQVksWUFBWSxFQUFFO2dCQUNqQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFO29CQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7aUJBQ3pFO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxLQUFLLEVBQUU7b0JBQ2pHLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsaUNBQWlDLENBQUMsQ0FBQztpQkFDeEU7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDSixDQUFDOzs7O1lBbkJGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQUp6Qix1QkFBdUI7O0FBMkJoQyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRztJQUN0QyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsZ0NBQWdDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtDQUN4RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgSHR0cEV2ZW50LCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCwgSFRUUF9JTlRFUkNFUFRPUlMsIEh0dHBSZXNwb25zZVxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFBhZ2VOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vcGFnZS1ub3RpZmljYXRpb24vcGFnZS1ub3RpZmljYXRpb24uc2VydmljZSc7XG5cbmVudW0gU1RBVFVTIHsgT0s9MjAwLCBDUkVBVEVEPTIwMSAgfVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFN1Y2Nlc3NNZXNzYWdlSGFuZGxlckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vdGlmaWNhdGlvbjogUGFnZU5vdGlmaWNhdGlvblNlcnZpY2UpIHtcblxuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcbiAgICAgICAgdGFwKChldmVudCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmhlYWRlcnMuaGFzKFwiWC1udXZlbS1hbGVydFwiKSkge1xuICAgICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbi5hZGRTdWNjZXNzTWVzc2FnZShldmVudC5oZWFkZXJzLmdldChcIlgtbnV2ZW0tYWxlcnRcIikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoZXZlbnQuc3RhdHVzID09PSBTVEFUVVMuT0sgfHwgZXZlbnQuc3RhdHVzID09PSBTVEFUVVMuQ1JFQVRFRCkgJiYgcmVxLm1ldGhvZCAhPSBcIkdFVFwiKSB7XG4gICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uLmFkZFN1Y2Nlc3NNZXNzYWdlKFwiT3BlcmHDp8OjbyByZWFsaXphZGEgY29tIHN1Y2Vzc28hXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApO1xuICB9XG5cbn1cblxuZXhwb3J0IGNvbnN0IGh0dHBJbnRlcmNlcHRvclByb3ZpZGVycyA9IFtcbiAgeyBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUywgdXNlQ2xhc3M6IFN1Y2Nlc3NNZXNzYWdlSGFuZGxlckludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZSB9LFxuXTtcbiJdfQ==