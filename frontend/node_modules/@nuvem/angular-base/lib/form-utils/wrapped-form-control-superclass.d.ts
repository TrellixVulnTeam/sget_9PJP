import { Injector } from "@angular/core";
import { FormControl } from "@angular/forms";
import { FormControlSuperclass } from "./form-control-superclass";
import * as ɵngcc0 from '@angular/core';
export declare abstract class WrappedFormControlSuperclass<OuterType, InnerType = OuterType> extends FormControlSuperclass<OuterType> {
    formControl: FormControl;
    constructor(injector: Injector);
    /** Called as angular propagates values changes to this `ControlValueAccessor`. You normally do not need to use it. */
    handleIncomingValue(value: OuterType): void;
    /** Called as angular propagates disabled changes to this `ControlValueAccessor`. You normally do not need to use it. */
    setDisabledState(isDisabled: boolean): void;
    /** Override this to modify a value coming from the outside to the format needed within this component. */
    protected outerToInner(value: OuterType): InnerType;
    /** Override this to modify a value coming from within this component to the format expected on the outside. */
    protected innerToOuter(value: InnerType): OuterType;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WrappedFormControlSuperclass<any, any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<WrappedFormControlSuperclass<any, any>, never, never, {}, {}, never>;
}

//# sourceMappingURL=wrapped-form-control-superclass.d.ts.map