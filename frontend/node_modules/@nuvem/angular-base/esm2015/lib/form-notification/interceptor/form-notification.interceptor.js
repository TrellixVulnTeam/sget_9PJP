import { Injectable } from "@angular/core";
import { FormNotificationService } from "../services/form-notification.service";
import { CleanFormNotification } from "../types/clean-form-notification.type";
import * as i0 from "@angular/core";
import * as i1 from "../services/form-notification.service";
/**
 * Implementação de classe para interceptar e tratar requisições http/https
 * @class
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/form-notification.service';
export class FormNotificationInterceptor {
    /**
     * Método construtor
     * @constructor
     * @param {AbstractAuthentication} auth
     */
    constructor(formNotificationService) {
        this.formNotificationService = formNotificationService;
    }
    /**
     * Método responsável por interceptar requisições HTTP/HTTPS
     * @public
     * @param {HttpRequest<any>} request
     * @param {HttpHandler} next
     * @returns Observable<HttpEvent<any>>
     */
    intercept(request, next) {
        this.formNotificationService
            .notify(new CleanFormNotification(request.url));
        return next.handle(request);
    }
}
FormNotificationInterceptor.ɵfac = function FormNotificationInterceptor_Factory(t) { return new (t || FormNotificationInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.FormNotificationService)); };
FormNotificationInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormNotificationInterceptor_Factory() { return new FormNotificationInterceptor(i0.ɵɵinject(i1.FormNotificationService)); }, token: FormNotificationInterceptor, providedIn: "root" });
FormNotificationInterceptor.ctorParameters = () => [
    { type: FormNotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormNotificationInterceptor, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.FormNotificationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ub3RpZmljYXRpb24uaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2Zvcm0tbm90aWZpY2F0aW9uL2ludGVyY2VwdG9yL2Zvcm0tbm90aWZpY2F0aW9uLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDaEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDOUU7QUFFZ0M7QUFEaEM7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBSUgsTUFBTSxPQUFPLDJCQUEyQjtBQUFHLElBRXZDO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksWUFBb0IsdUJBQWdEO0FBQUksUUFBcEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtBQUFDLElBQUUsQ0FBQztBQUM1RSxJQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxJQUFJLFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCO0FBQUksUUFDdEQsSUFBSSxDQUFDLHVCQUF1QjtBQUNwQyxhQUFhLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVELFFBQVEsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLElBQUksQ0FBQztBQUNMO3VMQUNBO0FBQUMsb1FBdEJJO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBRytDLFlBVmxELHVCQUF1QjtDQVE1QixEQVIrQjtRQVFyQixFQUFFLE1BQU0sZUFDckI7Ozs7O3dGQVRvQztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBIdHRwRXZlbnQsXG4gICAgSHR0cEhhbmRsZXIsXG4gICAgSHR0cEludGVyY2VwdG9yLFxuICAgIEh0dHBSZXF1ZXN0XG59IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBGb3JtTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9mb3JtLW5vdGlmaWNhdGlvbi5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBDbGVhbkZvcm1Ob3RpZmljYXRpb24gfSBmcm9tIFwiLi4vdHlwZXMvY2xlYW4tZm9ybS1ub3RpZmljYXRpb24udHlwZVwiO1xuXG4vKipcbiAqIEltcGxlbWVudGHDp8OjbyBkZSBjbGFzc2UgcGFyYSBpbnRlcmNlcHRhciBlIHRyYXRhciByZXF1aXNpw6fDtWVzIGh0dHAvaHR0cHNcbiAqIEBjbGFzc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtTm90aWZpY2F0aW9uSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gICAgLyoqXG4gICAgICogTcOpdG9kbyBjb25zdHJ1dG9yXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBYnN0cmFjdEF1dGhlbnRpY2F0aW9ufSBhdXRoXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBmb3JtTm90aWZpY2F0aW9uU2VydmljZTogRm9ybU5vdGlmaWNhdGlvblNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgaW50ZXJjZXB0YXIgcmVxdWlzacOnw7VlcyBIVFRQL0hUVFBTXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7SHR0cFJlcXVlc3Q8YW55Pn0gcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7SHR0cEhhbmRsZXJ9IG5leHRcbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PlxuICAgICAqL1xuICAgIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICAgICAgdGhpcy5mb3JtTm90aWZpY2F0aW9uU2VydmljZVxuICAgICAgICAgICAgLm5vdGlmeShuZXcgQ2xlYW5Gb3JtTm90aWZpY2F0aW9uKHJlcXVlc3QudXJsKSk7XG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KTtcbiAgICB9XG5cbn1cbiJdfQ==