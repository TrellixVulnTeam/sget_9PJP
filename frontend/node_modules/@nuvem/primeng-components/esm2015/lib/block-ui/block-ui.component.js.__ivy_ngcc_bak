import { BlockUiService } from '@nuvem/angular-base';
import { Component } from '@angular/core';
/**
 * Class BlockUiComponent
 * @class
 */
export class BlockUiComponent {
    /**
     * constructor method
     * @constructor
     * @param {BlockUiService} service
     */
    constructor(service) {
        this.service = service;
        /**
         * status property
         * @type {boolean}
         * @public
         */
        this.status = false;
    }
    /**
     * ngOnInit method
     * @returns void
     */
    ngOnInit() {
        this.subscription = this.service.loaderStatus.subscribe((blockui) => {
            this.status = blockui.status;
        });
    }
    /**
     * ngOnDestroy methods
     * @returns void
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * isBlocked method
     * @returns boolean
     */
    isBlocked() {
        return this.status;
    }
    /**
     * show method
     * @returns false
     */
    show() {
        this.status = true;
    }
    /**
     * hide methods
     * @returns void
     */
    hide() {
        this.status = false;
    }
}
BlockUiComponent.decorators = [
    { type: Component, args: [{
                selector: 'basis-block-ui',
                template: "<p-blockUI [blocked]=\"isBlocked()\">\n    <div class=\"center-screen\">\n        <p-progressSpinner></p-progressSpinner>\n    </div>\n</p-blockUI>\n",
                styles: [".center-screen{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;min-height:100vh}"]
            },] }
];
BlockUiComponent.ctorParameters = () => [
    { type: BlockUiService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcHJpbWVuZy1jb21wb25lbnRzL3NyYy9saWIvYmxvY2stdWkvYmxvY2stdWkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFHN0Q7OztHQUdHO0FBTUgsTUFBTSxPQUFPLGdCQUFnQjtJQWV6Qjs7OztPQUlHO0lBQ0gsWUFBb0IsT0FBdUI7UUFBdkIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFuQjNDOzs7O1dBSUc7UUFDSCxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBY2dDLENBQUM7SUFFaEQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNKLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBc0IsRUFBRSxFQUFFO1lBQy9FLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSTtRQUNBLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0EsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQzs7O1lBbkVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixpS0FBd0M7O2FBRTNDOzs7WUFadUIsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsb2NrVWlTdGF0dXMsIEJsb2NrVWlTZXJ2aWNlIH0gZnJvbSAnQG51dmVtL2FuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBDbGFzcyBCbG9ja1VpQ29tcG9uZW50XG4gKiBAY2xhc3NcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdiYXNpcy1ibG9jay11aScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Jsb2NrLXVpLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsgJy4vYmxvY2stdWkuY29tcG9uZW50LmNzcycgXSxcbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tVaUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCAsIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogc3RhdHVzIHByb3BlcnR5XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHN0YXR1cyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogc3Vic2NyaXB0aW9uIHByb3BlcnR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7U3Vic2NyaXB0aW9ufVxuICAgICAqL1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvciBtZXRob2RcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0Jsb2NrVWlTZXJ2aWNlfSBzZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBCbG9ja1VpU2VydmljZSkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBuZ09uSW5pdCBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlLmxvYWRlclN0YXR1cy5zdWJzY3JpYmUoKGJsb2NrdWk6IEJsb2NrVWlTdGF0dXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gYmxvY2t1aS5zdGF0dXM7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5nT25EZXN0cm95IG1ldGhvZHNcbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaXNCbG9ja2VkIG1ldGhvZFxuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cbiAgICAgKi9cbiAgICBpc0Jsb2NrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzaG93IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIGZhbHNlXG4gICAgICovXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGhpZGUgbWV0aG9kc1xuICAgICAqIEByZXR1cm5zIHZvaWRcbiAgICAgKi9cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==