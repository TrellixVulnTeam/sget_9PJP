{"version":3,"file":"filter-column.component.d.ts","sources":["filter-column.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChange, OnInit } from '@angular/core';\nexport declare class FilterColumn implements OnChanges, OnInit {\n    listaOriginal: any[];\n    lista: any[];\n    field: string;\n    header: string;\n    labelDefaultImplementation: boolean;\n    labelDefaultName: string;\n    updateFiltro: boolean;\n    filterType: string;\n    tableType: string;\n    customFilterOptions: Object;\n    template: string;\n    outputEvent: EventEmitter<any>;\n    private debouncer;\n    filtro: any;\n    resultado: any[];\n    private listaFields;\n    constructor();\n    ngOnInit(): void;\n    ngOnChanges(changes: {\n        [propName: string]: SimpleChange;\n    }): void;\n    checkChanges(changes: {\n        [propName: string]: SimpleChange;\n    }, property: any): boolean;\n    /**\n     * Método para propagar o evento de filtragem\n     * @param event filtro\n     */\n    filtrar(event: any): void;\n    /**\n     * Preenche os itens que serão exibidos no multiselect, removendo duplicidades\n     */\n    preencherFields(): void;\n    /**\n     *\n     * @param field Verifica duplicidade de fields nas opções de seleção\n     */\n    verificarSeExisteField(field: any): boolean;\n    /**\n     * Caso o usuaŕio não forneça uma lista para o options, será criada uma lista com\n     * os valores presentes na tabela\n     */\n    getCustomFilterOptions(): any;\n}\n"]}