import { Directive, ElementRef, HostListener } from '@angular/core';
/**
 * OnlyNumbersDirective diretiva para que sejam permitidos somente números
 * @class
 */
export class OnlyNumbersDirective {
    /**
     * @param {ElementRef} el
     * @constructor
     */
    constructor(el) {
        this.el = el;
        /**
         * Propriedade que carrega expressão regular para numeros
         * @type {RegExp}
         */
        this.regex = new RegExp(/[^0-9]$/g);
        /**
         * Propriedade que lista opções aceitas além de núsmeros
         * @type {Array<string>}
         */
        this.specialKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'End',
            'Home',
            'ArrowLeft',
            'ArrowRight'
        ];
    }
    /**
     * Metodo executado para os evento KeyDown do teclado executa verificação do valor digitado
     * @param {KeyboardEvent} event
     * @returns void
     */
    onKeyDown(event) {
        const current = this.el.nativeElement.value;
        const next = current.concat(event.key);
        if (this.specialKeys.indexOf(event.key) !== -1) {
            return;
        }
        if (next && String(next).match(this.regex)) {
            event.preventDefault();
        }
    }
}
OnlyNumbersDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[onlyNumbers]'
            },] }
];
OnlyNumbersDirective.ctorParameters = () => [
    { type: ElementRef }
];
OnlyNumbersDirective.propDecorators = {
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25seS1udW1iZXJzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYmFzZS9zcmMvbGliL2RpcmVjdGl2ZXMvb25seS1udW1iZXJzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEU7OztHQUdHO0FBSUgsTUFBTSxPQUFPLG9CQUFvQjtJQXNCN0I7OztPQUdHO0lBQ0gsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUF4QmxDOzs7V0FHRztRQUNLLFVBQUssR0FBVyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvQzs7O1dBR0c7UUFDSyxnQkFBVyxHQUFrQjtZQUNqQyxXQUFXO1lBQ1gsUUFBUTtZQUNSLEtBQUs7WUFDTCxLQUFLO1lBQ0wsTUFBTTtZQUNOLFdBQVc7WUFDWCxZQUFZO1NBQ2YsQ0FBQztJQU1vQyxDQUFDO0lBRXZDOzs7O09BSUc7SUFFSCxTQUFTLENBQUMsS0FBb0I7UUFFMUIsTUFBTSxPQUFPLEdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQ3BELE1BQU0sSUFBSSxHQUFXLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRS9DLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzVDLE9BQU87U0FDVjtRQUVELElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUMxQjtJQUNMLENBQUM7OztZQWpESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjthQUNqQzs7O1lBUm1CLFVBQVU7Ozt3QkEwQ3pCLFlBQVksU0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIE9ubHlOdW1iZXJzRGlyZWN0aXZlIGRpcmV0aXZhIHBhcmEgcXVlIHNlamFtIHBlcm1pdGlkb3Mgc29tZW50ZSBuw7ptZXJvc1xuICogQGNsYXNzXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnaW5wdXRbb25seU51bWJlcnNdJ1xufSlcbmV4cG9ydCBjbGFzcyBPbmx5TnVtYmVyc0RpcmVjdGl2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wcmllZGFkZSBxdWUgY2FycmVnYSBleHByZXNzw6NvIHJlZ3VsYXIgcGFyYSBudW1lcm9zXG4gICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlZ2V4OiBSZWdFeHAgPSBuZXcgUmVnRXhwKC9bXjAtOV0kL2cpO1xuXG4gICAgLyoqXG4gICAgICogUHJvcHJpZWRhZGUgcXVlIGxpc3RhIG9ww6fDtWVzIGFjZWl0YXMgYWzDqW0gZGUgbsO6c21lcm9zXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgcHJpdmF0ZSBzcGVjaWFsS2V5czogQXJyYXk8c3RyaW5nPiA9IFtcbiAgICAgICAgJ0JhY2tzcGFjZScsXG4gICAgICAgICdEZWxldGUnLFxuICAgICAgICAnVGFiJyxcbiAgICAgICAgJ0VuZCcsXG4gICAgICAgICdIb21lJyxcbiAgICAgICAgJ0Fycm93TGVmdCcsXG4gICAgICAgICdBcnJvd1JpZ2h0J1xuICAgIF07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnRSZWZ9IGVsXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRvZG8gZXhlY3V0YWRvIHBhcmEgb3MgZXZlbnRvIEtleURvd24gZG8gdGVjbGFkbyBleGVjdXRhIHZlcmlmaWNhw6fDo28gZG8gdmFsb3IgZGlnaXRhZG9cbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICAgIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnQ6IHN0cmluZyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgICAgY29uc3QgbmV4dDogc3RyaW5nID0gY3VycmVudC5jb25jYXQoZXZlbnQua2V5KTtcblxuICAgICAgICBpZiAodGhpcy5zcGVjaWFsS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCAmJiBTdHJpbmcobmV4dCkubWF0Y2godGhpcy5yZWdleCkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==