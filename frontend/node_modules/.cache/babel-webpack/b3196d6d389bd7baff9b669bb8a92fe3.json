{"ast":null,"code":"import _classCallCheck from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/basis/TCC/codificacao/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { RippleModule } from 'primeng/ripple';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'primeng/ripple';\n\nvar _c0 = function _c0(a0, a1) {\n  return {\n    \"pi-minus\": a0,\n    \"pi-plus\": a1\n  };\n};\n\nfunction Fieldset_ng_container_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 9);\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(1, _c0, !ctx_r4.collapsed, ctx_r4.collapsed));\n  }\n}\n\nfunction Fieldset_ng_container_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Fieldset_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function Fieldset_ng_container_2_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.toggle($event);\n    })(\"keydown.enter\", function Fieldset_ng_container_2_Template_a_keydown_enter_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.toggle($event);\n    });\n    ɵngcc0.ɵɵtemplate(2, Fieldset_ng_container_2_span_2_Template, 1, 4, \"span\", 8);\n    ɵngcc0.ɵɵtemplate(3, Fieldset_ng_container_2_ng_container_3_Template, 1, 0, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    var _r1 = ɵngcc0.ɵɵreference(4);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"aria-controls\", ctx_r0.id + \"-content\")(\"aria-expanded\", !ctx_r0.collapsed);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.toggleable);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n  }\n}\n\nfunction Fieldset_ng_template_3_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Fieldset_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 10);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵprojection(2, 1);\n    ɵngcc0.ɵɵtemplate(3, Fieldset_ng_template_3_ng_container_3_Template, 1, 0, \"ng-container\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.legend);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.headerTemplate);\n  }\n}\n\nfunction Fieldset_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c1 = [\"*\", [[\"p-header\"]]];\n\nvar _c2 = function _c2(a1) {\n  return {\n    \"p-fieldset p-component\": true,\n    \"p-fieldset-toggleable\": a1\n  };\n};\n\nvar _c3 = function _c3(a0) {\n  return {\n    transitionParams: a0,\n    height: \"0\"\n  };\n};\n\nvar _c4 = function _c4(a1) {\n  return {\n    value: \"hidden\",\n    params: a1\n  };\n};\n\nvar _c5 = function _c5(a0) {\n  return {\n    transitionParams: a0,\n    height: \"*\"\n  };\n};\n\nvar _c6 = function _c6(a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nvar _c7 = [\"*\", \"p-header\"];\nvar idx = 0;\n\nvar Fieldset = /*#__PURE__*/function () {\n  function Fieldset(el) {\n    _classCallCheck(this, Fieldset);\n\n    this.el = el;\n    this.collapsed = false;\n    this.collapsedChange = new EventEmitter();\n    this.onBeforeToggle = new EventEmitter();\n    this.onAfterToggle = new EventEmitter();\n    this.transitionOptions = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n    this.id = \"p-fieldset-\".concat(idx++);\n  }\n\n  _createClass(Fieldset, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this = this;\n\n      this.templates.forEach(function (item) {\n        switch (item.getType()) {\n          case 'header':\n            _this.headerTemplate = item.template;\n            break;\n\n          case 'content':\n            _this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (this.animating) {\n        return false;\n      }\n\n      this.animating = true;\n      this.onBeforeToggle.emit({\n        originalEvent: event,\n        collapsed: this.collapsed\n      });\n      if (this.collapsed) this.expand(event);else this.collapse(event);\n      this.onAfterToggle.emit({\n        originalEvent: event,\n        collapsed: this.collapsed\n      });\n      event.preventDefault();\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(event) {\n      this.collapsed = false;\n      this.collapsedChange.emit(this.collapsed);\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse(event) {\n      this.collapsed = true;\n      this.collapsedChange.emit(this.collapsed);\n    }\n  }, {\n    key: \"getBlockableElement\",\n    value: function getBlockableElement() {\n      return this.el.nativeElement.children[0];\n    }\n  }, {\n    key: \"onToggleDone\",\n    value: function onToggleDone(event) {\n      this.animating = false;\n    }\n  }]);\n\n  return Fieldset;\n}();\n\nFieldset.ɵfac = function Fieldset_Factory(t) {\n  return new (t || Fieldset)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nFieldset.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: Fieldset,\n  selectors: [[\"p-fieldset\"]],\n  contentQueries: function Fieldset_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  inputs: {\n    collapsed: \"collapsed\",\n    transitionOptions: \"transitionOptions\",\n    legend: \"legend\",\n    toggleable: \"toggleable\",\n    style: \"style\",\n    styleClass: \"styleClass\"\n  },\n  outputs: {\n    collapsedChange: \"collapsedChange\",\n    onBeforeToggle: \"onBeforeToggle\",\n    onAfterToggle: \"onAfterToggle\"\n  },\n  ngContentSelectors: _c7,\n  decls: 9,\n  vars: 22,\n  consts: [[3, \"ngClass\", \"ngStyle\"], [1, \"p-fieldset-legend\"], [4, \"ngIf\", \"ngIfElse\"], [\"legendContent\", \"\"], [\"role\", \"region\", 1, \"p-toggleable-content\"], [1, \"p-fieldset-content\"], [4, \"ngTemplateOutlet\"], [\"tabindex\", \"0\", \"pRipple\", \"\", 3, \"click\", \"keydown.enter\"], [\"class\", \"p-fieldset-toggler pi\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"p-fieldset-toggler\", \"pi\", 3, \"ngClass\"], [1, \"p-fieldset-legend-text\"]],\n  template: function Fieldset_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵelementStart(0, \"fieldset\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"legend\", 1);\n      ɵngcc0.ɵɵtemplate(2, Fieldset_ng_container_2_Template, 4, 4, \"ng-container\", 2);\n      ɵngcc0.ɵɵtemplate(3, Fieldset_ng_template_3_Template, 4, 2, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n      ɵngcc0.ɵɵlistener(\"@fieldsetContent.done\", function Fieldset_Template_div_animation_fieldsetContent_done_5_listener($event) {\n        return ctx.onToggleDone($event);\n      });\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵprojection(7);\n      ɵngcc0.ɵɵtemplate(8, Fieldset_ng_container_8_Template, 1, 0, \"ng-container\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r1 = ɵngcc0.ɵɵreference(4);\n\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(12, _c2, ctx.toggleable))(\"ngStyle\", ctx.style);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toggleable)(\"ngIfElse\", _r1);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"@fieldsetContent\", ctx.collapsed ? ɵngcc0.ɵɵpureFunction1(16, _c4, ɵngcc0.ɵɵpureFunction1(14, _c3, ctx.transitionOptions)) : ɵngcc0.ɵɵpureFunction1(20, _c6, ɵngcc0.ɵɵpureFunction1(18, _c5, ctx.animating ? ctx.transitionOptions : \"0ms\")));\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id + \"-content\")(\"aria-labelledby\", ctx.id)(\"aria-hidden\", ctx.collapsed);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate);\n    }\n  },\n  directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc2.Ripple],\n  styles: [\".p-fieldset-legend>a,.p-fieldset-legend>span{align-items:center;display:flex;justify-content:center}.p-fieldset-toggleable .p-fieldset-legend a{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;overflow:hidden;position:relative;user-select:none}.p-fieldset-legend-text{line-height:1}\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('fieldsetContent', [state('hidden', style({\n      height: '0',\n      overflow: 'hidden'\n    })), state('visible', style({\n      height: '*'\n    })), transition('visible <=> hidden', [style({\n      overflow: 'hidden'\n    }), animate('{{transitionParams}}')]), transition('void => *', animate(0))])]\n  },\n  changeDetection: 0\n});\n\nFieldset.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nFieldset.propDecorators = {\n  legend: [{\n    type: Input\n  }],\n  toggleable: [{\n    type: Input\n  }],\n  collapsed: [{\n    type: Input\n  }],\n  collapsedChange: [{\n    type: Output\n  }],\n  onBeforeToggle: [{\n    type: Output\n  }],\n  onAfterToggle: [{\n    type: Output\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  transitionOptions: [{\n    type: Input\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Fieldset, [{\n    type: Component,\n    args: [{\n      selector: 'p-fieldset',\n      template: \"\\n        <fieldset [attr.id]=\\\"id\\\" [ngClass]=\\\"{'p-fieldset p-component': true, 'p-fieldset-toggleable': toggleable}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <legend class=\\\"p-fieldset-legend\\\">\\n                <ng-container *ngIf=\\\"toggleable; else legendContent\\\">\\n                    <a tabindex=\\\"0\\\" (click)=\\\"toggle($event)\\\" (keydown.enter)=\\\"toggle($event)\\\" [attr.aria-controls]=\\\"id + '-content'\\\" [attr.aria-expanded]=\\\"!collapsed\\\" pRipple>\\n                        <span class=\\\"p-fieldset-toggler pi\\\" *ngIf=\\\"toggleable\\\" [ngClass]=\\\"{'pi-minus': !collapsed,'pi-plus':collapsed}\\\"></span>\\n                        <ng-container *ngTemplateOutlet=\\\"legendContent\\\"></ng-container>\\n                    </a>\\n                </ng-container>\\n                <ng-template #legendContent>\\n                    <span class=\\\"p-fieldset-legend-text\\\">{{legend}}</span>\\n                    <ng-content select=\\\"p-header\\\"></ng-content>\\n                    <ng-container *ngTemplateOutlet=\\\"headerTemplate\\\"></ng-container>\\n                </ng-template>\\n            </legend>\\n            <div [attr.id]=\\\"id + '-content'\\\" class=\\\"p-toggleable-content\\\" [@fieldsetContent]=\\\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\\\" \\n                        [attr.aria-labelledby]=\\\"id\\\" [attr.aria-hidden]=\\\"collapsed\\\"\\n                         (@fieldsetContent.done)=\\\"onToggleDone($event)\\\" role=\\\"region\\\">\\n                <div class=\\\"p-fieldset-content\\\">\\n                    <ng-content></ng-content>\\n                    <ng-container *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-container>\\n                </div>\\n            </div>\\n        </fieldset>\\n    \",\n      animations: [trigger('fieldsetContent', [state('hidden', style({\n        height: '0',\n        overflow: 'hidden'\n      })), state('visible', style({\n        height: '*'\n      })), transition('visible <=> hidden', [style({\n        overflow: 'hidden'\n      }), animate('{{transitionParams}}')]), transition('void => *', animate(0))])],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".p-fieldset-legend>a,.p-fieldset-legend>span{align-items:center;display:flex;justify-content:center}.p-fieldset-toggleable .p-fieldset-legend a{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;overflow:hidden;position:relative;user-select:none}.p-fieldset-legend-text{line-height:1}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    collapsed: [{\n      type: Input\n    }],\n    collapsedChange: [{\n      type: Output\n    }],\n    onBeforeToggle: [{\n      type: Output\n    }],\n    onAfterToggle: [{\n      type: Output\n    }],\n    transitionOptions: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    toggleable: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\nvar FieldsetModule = function FieldsetModule() {\n  _classCallCheck(this, FieldsetModule);\n};\n\nFieldsetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: FieldsetModule\n});\nFieldsetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function FieldsetModule_Factory(t) {\n    return new (t || FieldsetModule)();\n  },\n  imports: [[CommonModule, RippleModule], SharedModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FieldsetModule, {\n    declarations: function declarations() {\n      return [Fieldset];\n    },\n    imports: function imports() {\n      return [CommonModule, RippleModule];\n    },\n    exports: function exports() {\n      return [Fieldset, SharedModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldsetModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RippleModule],\n      exports: [Fieldset, SharedModule],\n      declarations: [Fieldset]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Fieldset, FieldsetModule };","map":{"version":3,"sources":["../../src/app/components/fieldset/fieldset.ts","../../src/app/components/fieldset/primeng-fieldset.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ChangeDetectionStrategy, ViewEncapsulation, AfterContentInit, QueryList, ContentChildren, TemplateRef} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule, PrimeTemplate} from 'primeng/api';\nimport {BlockableUI} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';  \n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-fieldset',\n    template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{'p-fieldset p-component': true, 'p-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"p-fieldset-legend\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\" pRipple>\n                        <span class=\"p-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{'pi-minus': !collapsed,'pi-plus':collapsed}\"></span>\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"p-fieldset-legend-text\">{{legend}}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                </ng-template>\n            </legend>\n            <div [attr.id]=\"id + '-content'\" class=\"p-toggleable-content\" [@fieldsetContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\" \n                        [attr.aria-labelledby]=\"id\" [attr.aria-hidden]=\"collapsed\"\n                         (@fieldsetContent.done)=\"onToggleDone($event)\" role=\"region\">\n                <div class=\"p-fieldset-content\">\n                    <ng-content></ng-content>\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </div>\n            </div>\n        </fieldset>\n    `,\n    animations: [\n        trigger('fieldsetContent', [\n            state('hidden', style({\n                height: '0',\n                overflow: 'hidden'\n            })),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible <=> hidden', [style({overflow: 'hidden'}), animate('{{transitionParams}}')]),\n            transition('void => *', animate(0))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./fieldset.css']\n})\nexport class Fieldset implements AfterContentInit,BlockableUI {\n\n    @Input() legend: string;\n\n    @Input() toggleable: boolean;\n\n    @Input() collapsed: boolean = false;\n\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public animating: boolean;\n\n    headerTemplate: TemplateRef<any>;\n\n    contentTemplate: TemplateRef<any>;\n    \n    constructor(private el: ElementRef) {}\n    \n    id: string = `p-fieldset-${idx++}`;\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n        \n    toggle(event) {\n        if (this.animating) {\n            return false;\n        }\n        \n        this.animating = true;\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\n        \n        if (this.collapsed)\n            this.expand(event);\n        else\n            this.collapse(event);\n            \n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});   \n        event.preventDefault();\n    }\n    \n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onToggleDone(event: Event) {\n        this.animating = false;\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [Fieldset,SharedModule],\n    declarations: [Fieldset]\n})\nexport class FieldsetModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}