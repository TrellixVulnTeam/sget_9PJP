{"version":3,"file":"authentication.service.d.ts","sources":["authentication.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { AuthConfig } from '../config/auth-config';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { User } from './user';\nimport { Authentication } from './authentication';\nimport { HttpClient } from '@angular/common/http';\nexport declare function isAuthenticated(config: AuthConfig): boolean;\nexport declare function redirect(config: AuthConfig): void;\n/**\n * Serviço de autenticação\n * @class\n */\nexport declare class AuthenticationService<U extends User> extends Authentication<U> {\n    private config;\n    private http;\n    loginNotifications: BehaviorSubject<User>;\n    constructor(config: AuthConfig, http: HttpClient);\n    /**\n     * Método para verificar se o usuário esta autenticado na aplicação\n     * @returns boolean\n     * @public\n     */\n    isAuthenticated(): boolean;\n    /**\n     * Método responsável por realizar redirecionamentos\n     * @returns void\n     * @public\n     */\n    redirect(): void;\n    /**\n     * Método responsável pelo login da aplicação\n     * @public\n     * @param {User} user\n     * @returns Observable<any>\n     */\n    login(): void;\n    /**\n     * Método responsável pelo logou da aplicação\n     * @public\n     * @returns void\n     */\n    logout(): void;\n    /**\n     * Método responsável por obter os dados do usuário logado\n     * @public\n     * @returns Observable<any>\n     */\n    getUserDetails(): Observable<U>;\n    private setUser;\n    getUser(): U;\n    getLoginNotifications(): Observable<User>;\n}\n"]}